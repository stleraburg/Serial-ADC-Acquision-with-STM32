
serialADCAcq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08006b40  08006b40  00016b40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d78  08006d78  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  08006d78  08006d78  00016d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d80  08006d80  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d80  08006d80  00016d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d84  08006d84  00016d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08006d88  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000163e8  200000a0  08006e24  000200a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20016488  08006e24  00026488  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e69d  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000213c  00000000  00000000  0002e769  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e70  00000000  00000000  000308a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d68  00000000  00000000  00031718  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002217f  00000000  00000000  00032480  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000aabf  00000000  00000000  000545ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d0ce8  00000000  00000000  0005f0be  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012fda6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043c8  00000000  00000000  0012fe24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a0 	.word	0x200000a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006b24 	.word	0x08006b24

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	08006b24 	.word	0x08006b24

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bc0:	f000 b972 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9e08      	ldr	r6, [sp, #32]
 8000be2:	4604      	mov	r4, r0
 8000be4:	4688      	mov	r8, r1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d14b      	bne.n	8000c82 <__udivmoddi4+0xa6>
 8000bea:	428a      	cmp	r2, r1
 8000bec:	4615      	mov	r5, r2
 8000bee:	d967      	bls.n	8000cc0 <__udivmoddi4+0xe4>
 8000bf0:	fab2 f282 	clz	r2, r2
 8000bf4:	b14a      	cbz	r2, 8000c0a <__udivmoddi4+0x2e>
 8000bf6:	f1c2 0720 	rsb	r7, r2, #32
 8000bfa:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfe:	fa20 f707 	lsr.w	r7, r0, r7
 8000c02:	4095      	lsls	r5, r2
 8000c04:	ea47 0803 	orr.w	r8, r7, r3
 8000c08:	4094      	lsls	r4, r2
 8000c0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0e:	0c23      	lsrs	r3, r4, #16
 8000c10:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c14:	fa1f fc85 	uxth.w	ip, r5
 8000c18:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c1c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c20:	fb07 f10c 	mul.w	r1, r7, ip
 8000c24:	4299      	cmp	r1, r3
 8000c26:	d909      	bls.n	8000c3c <__udivmoddi4+0x60>
 8000c28:	18eb      	adds	r3, r5, r3
 8000c2a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c2e:	f080 811b 	bcs.w	8000e68 <__udivmoddi4+0x28c>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 8118 	bls.w	8000e68 <__udivmoddi4+0x28c>
 8000c38:	3f02      	subs	r7, #2
 8000c3a:	442b      	add	r3, r5
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c44:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c50:	45a4      	cmp	ip, r4
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x8c>
 8000c54:	192c      	adds	r4, r5, r4
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x290>
 8000c5e:	45a4      	cmp	ip, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x290>
 8000c64:	3802      	subs	r0, #2
 8000c66:	442c      	add	r4, r5
 8000c68:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c6c:	eba4 040c 	sub.w	r4, r4, ip
 8000c70:	2700      	movs	r7, #0
 8000c72:	b11e      	cbz	r6, 8000c7c <__udivmoddi4+0xa0>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7c:	4639      	mov	r1, r7
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xbe>
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	f000 80eb 	beq.w	8000e62 <__udivmoddi4+0x286>
 8000c8c:	2700      	movs	r7, #0
 8000c8e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c92:	4638      	mov	r0, r7
 8000c94:	4639      	mov	r1, r7
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f783 	clz	r7, r3
 8000c9e:	2f00      	cmp	r7, #0
 8000ca0:	d147      	bne.n	8000d32 <__udivmoddi4+0x156>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd0>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80fa 	bhi.w	8000ea0 <__udivmoddi4+0x2c4>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	4698      	mov	r8, r3
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa0>
 8000cba:	e9c6 4800 	strd	r4, r8, [r6]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xe8>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 808f 	bne.w	8000dec <__udivmoddi4+0x210>
 8000cce:	1b49      	subs	r1, r1, r5
 8000cd0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd4:	fa1f f885 	uxth.w	r8, r5
 8000cd8:	2701      	movs	r7, #1
 8000cda:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cde:	0c23      	lsrs	r3, r4, #16
 8000ce0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce8:	fb08 f10c 	mul.w	r1, r8, ip
 8000cec:	4299      	cmp	r1, r3
 8000cee:	d907      	bls.n	8000d00 <__udivmoddi4+0x124>
 8000cf0:	18eb      	adds	r3, r5, r3
 8000cf2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x122>
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	f200 80cd 	bhi.w	8000e98 <__udivmoddi4+0x2bc>
 8000cfe:	4684      	mov	ip, r0
 8000d00:	1a59      	subs	r1, r3, r1
 8000d02:	b2a3      	uxth	r3, r4
 8000d04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d08:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d0c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d10:	fb08 f800 	mul.w	r8, r8, r0
 8000d14:	45a0      	cmp	r8, r4
 8000d16:	d907      	bls.n	8000d28 <__udivmoddi4+0x14c>
 8000d18:	192c      	adds	r4, r5, r4
 8000d1a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d1e:	d202      	bcs.n	8000d26 <__udivmoddi4+0x14a>
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	f200 80b6 	bhi.w	8000e92 <__udivmoddi4+0x2b6>
 8000d26:	4618      	mov	r0, r3
 8000d28:	eba4 0408 	sub.w	r4, r4, r8
 8000d2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d30:	e79f      	b.n	8000c72 <__udivmoddi4+0x96>
 8000d32:	f1c7 0c20 	rsb	ip, r7, #32
 8000d36:	40bb      	lsls	r3, r7
 8000d38:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d3c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d40:	fa01 f407 	lsl.w	r4, r1, r7
 8000d44:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d48:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d4c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d50:	4325      	orrs	r5, r4
 8000d52:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d56:	0c2c      	lsrs	r4, r5, #16
 8000d58:	fb08 3319 	mls	r3, r8, r9, r3
 8000d5c:	fa1f fa8e 	uxth.w	sl, lr
 8000d60:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d64:	fb09 f40a 	mul.w	r4, r9, sl
 8000d68:	429c      	cmp	r4, r3
 8000d6a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d72:	d90b      	bls.n	8000d8c <__udivmoddi4+0x1b0>
 8000d74:	eb1e 0303 	adds.w	r3, lr, r3
 8000d78:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d7c:	f080 8087 	bcs.w	8000e8e <__udivmoddi4+0x2b2>
 8000d80:	429c      	cmp	r4, r3
 8000d82:	f240 8084 	bls.w	8000e8e <__udivmoddi4+0x2b2>
 8000d86:	f1a9 0902 	sub.w	r9, r9, #2
 8000d8a:	4473      	add	r3, lr
 8000d8c:	1b1b      	subs	r3, r3, r4
 8000d8e:	b2ad      	uxth	r5, r5
 8000d90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d94:	fb08 3310 	mls	r3, r8, r0, r3
 8000d98:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d9c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000da0:	45a2      	cmp	sl, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1da>
 8000da4:	eb1e 0404 	adds.w	r4, lr, r4
 8000da8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dac:	d26b      	bcs.n	8000e86 <__udivmoddi4+0x2aa>
 8000dae:	45a2      	cmp	sl, r4
 8000db0:	d969      	bls.n	8000e86 <__udivmoddi4+0x2aa>
 8000db2:	3802      	subs	r0, #2
 8000db4:	4474      	add	r4, lr
 8000db6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dba:	fba0 8902 	umull	r8, r9, r0, r2
 8000dbe:	eba4 040a 	sub.w	r4, r4, sl
 8000dc2:	454c      	cmp	r4, r9
 8000dc4:	46c2      	mov	sl, r8
 8000dc6:	464b      	mov	r3, r9
 8000dc8:	d354      	bcc.n	8000e74 <__udivmoddi4+0x298>
 8000dca:	d051      	beq.n	8000e70 <__udivmoddi4+0x294>
 8000dcc:	2e00      	cmp	r6, #0
 8000dce:	d069      	beq.n	8000ea4 <__udivmoddi4+0x2c8>
 8000dd0:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd4:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ddc:	40fd      	lsrs	r5, r7
 8000dde:	40fc      	lsrs	r4, r7
 8000de0:	ea4c 0505 	orr.w	r5, ip, r5
 8000de4:	e9c6 5400 	strd	r5, r4, [r6]
 8000de8:	2700      	movs	r7, #0
 8000dea:	e747      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f703 	lsr.w	r7, r0, r3
 8000df4:	4095      	lsls	r5, r2
 8000df6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dfa:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e02:	4338      	orrs	r0, r7
 8000e04:	0c01      	lsrs	r1, r0, #16
 8000e06:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e0a:	fa1f f885 	uxth.w	r8, r5
 8000e0e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e12:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e16:	fb07 f308 	mul.w	r3, r7, r8
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x256>
 8000e22:	1869      	adds	r1, r5, r1
 8000e24:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e28:	d22f      	bcs.n	8000e8a <__udivmoddi4+0x2ae>
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d92d      	bls.n	8000e8a <__udivmoddi4+0x2ae>
 8000e2e:	3f02      	subs	r7, #2
 8000e30:	4429      	add	r1, r5
 8000e32:	1acb      	subs	r3, r1, r3
 8000e34:	b281      	uxth	r1, r0
 8000e36:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e3a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb00 f308 	mul.w	r3, r0, r8
 8000e46:	428b      	cmp	r3, r1
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x27e>
 8000e4a:	1869      	adds	r1, r5, r1
 8000e4c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e50:	d217      	bcs.n	8000e82 <__udivmoddi4+0x2a6>
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d915      	bls.n	8000e82 <__udivmoddi4+0x2a6>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4429      	add	r1, r5
 8000e5a:	1ac9      	subs	r1, r1, r3
 8000e5c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e60:	e73b      	b.n	8000cda <__udivmoddi4+0xfe>
 8000e62:	4637      	mov	r7, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e709      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000e68:	4607      	mov	r7, r0
 8000e6a:	e6e7      	b.n	8000c3c <__udivmoddi4+0x60>
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x8c>
 8000e70:	4541      	cmp	r1, r8
 8000e72:	d2ab      	bcs.n	8000dcc <__udivmoddi4+0x1f0>
 8000e74:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e78:	eb69 020e 	sbc.w	r2, r9, lr
 8000e7c:	3801      	subs	r0, #1
 8000e7e:	4613      	mov	r3, r2
 8000e80:	e7a4      	b.n	8000dcc <__udivmoddi4+0x1f0>
 8000e82:	4660      	mov	r0, ip
 8000e84:	e7e9      	b.n	8000e5a <__udivmoddi4+0x27e>
 8000e86:	4618      	mov	r0, r3
 8000e88:	e795      	b.n	8000db6 <__udivmoddi4+0x1da>
 8000e8a:	4667      	mov	r7, ip
 8000e8c:	e7d1      	b.n	8000e32 <__udivmoddi4+0x256>
 8000e8e:	4681      	mov	r9, r0
 8000e90:	e77c      	b.n	8000d8c <__udivmoddi4+0x1b0>
 8000e92:	3802      	subs	r0, #2
 8000e94:	442c      	add	r4, r5
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0x14c>
 8000e98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e9c:	442b      	add	r3, r5
 8000e9e:	e72f      	b.n	8000d00 <__udivmoddi4+0x124>
 8000ea0:	4638      	mov	r0, r7
 8000ea2:	e708      	b.n	8000cb6 <__udivmoddi4+0xda>
 8000ea4:	4637      	mov	r7, r6
 8000ea6:	e6e9      	b.n	8000c7c <__udivmoddi4+0xa0>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	0000      	movs	r0, r0
	...

08000eb0 <get_sineval>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void get_sineval() {
 8000eb0:	b590      	push	{r4, r7, lr}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
	for (int i = 0; i < data_size; i++) {
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	e03a      	b.n	8000f32 <get_sineval+0x82>
		sine_val[i] = (uint32_t)((sin(i * 2 * PI / data_size) + 1) * (4096 / 2));
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fb27 	bl	8000514 <__aeabi_i2d>
 8000ec6:	a322      	add	r3, pc, #136	; (adr r3, 8000f50 <get_sineval+0xa0>)
 8000ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ecc:	f7ff fb8c 	bl	80005e8 <__aeabi_dmul>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	460c      	mov	r4, r1
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	4621      	mov	r1, r4
 8000ed8:	f04f 0200 	mov.w	r2, #0
 8000edc:	4b18      	ldr	r3, [pc, #96]	; (8000f40 <get_sineval+0x90>)
 8000ede:	f7ff fcad 	bl	800083c <__aeabi_ddiv>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	460c      	mov	r4, r1
 8000ee6:	ec44 3b17 	vmov	d7, r3, r4
 8000eea:	eeb0 0a47 	vmov.f32	s0, s14
 8000eee:	eef0 0a67 	vmov.f32	s1, s15
 8000ef2:	f004 fe05 	bl	8005b00 <sin>
 8000ef6:	ec51 0b10 	vmov	r0, r1, d0
 8000efa:	f04f 0200 	mov.w	r2, #0
 8000efe:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <get_sineval+0x94>)
 8000f00:	f7ff f9bc 	bl	800027c <__adddf3>
 8000f04:	4603      	mov	r3, r0
 8000f06:	460c      	mov	r4, r1
 8000f08:	4618      	mov	r0, r3
 8000f0a:	4621      	mov	r1, r4
 8000f0c:	f04f 0200 	mov.w	r2, #0
 8000f10:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <get_sineval+0x98>)
 8000f12:	f7ff fb69 	bl	80005e8 <__aeabi_dmul>
 8000f16:	4603      	mov	r3, r0
 8000f18:	460c      	mov	r4, r1
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	4621      	mov	r1, r4
 8000f1e:	f7ff fe25 	bl	8000b6c <__aeabi_d2uiz>
 8000f22:	4601      	mov	r1, r0
 8000f24:	4a09      	ldr	r2, [pc, #36]	; (8000f4c <get_sineval+0x9c>)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < data_size; i++) {
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	607b      	str	r3, [r7, #4]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b22      	cmp	r3, #34	; 0x22
 8000f36:	ddc1      	ble.n	8000ebc <get_sineval+0xc>
	}
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd90      	pop	{r4, r7, pc}
 8000f40:	40418000 	.word	0x40418000
 8000f44:	3ff00000 	.word	0x3ff00000
 8000f48:	40a00000 	.word	0x40a00000
 8000f4c:	20016198 	.word	0x20016198
 8000f50:	54442d18 	.word	0x54442d18
 8000f54:	400921fb 	.word	0x400921fb

08000f58 <processHalfBuf>:


void processHalfBuf(void) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
    int idx = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	607b      	str	r3, [r7, #4]

    for (uint16_t n = 0; n < VIBRO_BUFFER_SIZE/2; n++) {
 8000f62:	2300      	movs	r3, #0
 8000f64:	807b      	strh	r3, [r7, #2]
 8000f66:	e021      	b.n	8000fac <processHalfBuf+0x54>
        // worst-case line: "4095 4095\n" -> 11 bytes
        idx += sprintf((char*)uartFillBuf + idx, "%u %u\n",
 8000f68:	4b1c      	ldr	r3, [pc, #112]	; (8000fdc <processHalfBuf+0x84>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	18d0      	adds	r0, r2, r3
                       (unsigned)adcRBufPtr[n], (unsigned)adcLBufPtr[n]);
 8000f70:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <processHalfBuf+0x88>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	887b      	ldrh	r3, [r7, #2]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	4413      	add	r3, r2
 8000f7a:	881b      	ldrh	r3, [r3, #0]
 8000f7c:	b29b      	uxth	r3, r3
        idx += sprintf((char*)uartFillBuf + idx, "%u %u\n",
 8000f7e:	4619      	mov	r1, r3
                       (unsigned)adcRBufPtr[n], (unsigned)adcLBufPtr[n]);
 8000f80:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <processHalfBuf+0x8c>)
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	887b      	ldrh	r3, [r7, #2]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	4413      	add	r3, r2
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	b29b      	uxth	r3, r3
        idx += sprintf((char*)uartFillBuf + idx, "%u %u\n",
 8000f8e:	460a      	mov	r2, r1
 8000f90:	4915      	ldr	r1, [pc, #84]	; (8000fe8 <processHalfBuf+0x90>)
 8000f92:	f004 f9af 	bl	80052f4 <siprintf>
 8000f96:	4602      	mov	r2, r0
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	607b      	str	r3, [r7, #4]
        if (idx >= UART_BUFFER_SIZE) break;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8000fa4:	da07      	bge.n	8000fb6 <processHalfBuf+0x5e>
    for (uint16_t n = 0; n < VIBRO_BUFFER_SIZE/2; n++) {
 8000fa6:	887b      	ldrh	r3, [r7, #2]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	807b      	strh	r3, [r7, #2]
 8000fac:	887b      	ldrh	r3, [r7, #2]
 8000fae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000fb2:	d9d9      	bls.n	8000f68 <processHalfBuf+0x10>
 8000fb4:	e000      	b.n	8000fb8 <processHalfBuf+0x60>
        if (idx >= UART_BUFFER_SIZE) break;
 8000fb6:	bf00      	nop
    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fbe:	480b      	ldr	r0, [pc, #44]	; (8000fec <processHalfBuf+0x94>)
 8000fc0:	f002 fbe0 	bl	8003784 <HAL_GPIO_WritePin>
    HAL_UART_Transmit_DMA(&huart2, (uint8_t*)uartFillBuf, idx);
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <processHalfBuf+0x84>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	b292      	uxth	r2, r2
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4808      	ldr	r0, [pc, #32]	; (8000ff0 <processHalfBuf+0x98>)
 8000fd0:	f003 fcac 	bl	800492c <HAL_UART_Transmit_DMA>

}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000024 	.word	0x20000024
 8000fe0:	200120f4 	.word	0x200120f4
 8000fe4:	200120f8 	.word	0x200120f8
 8000fe8:	08006b40 	.word	0x08006b40
 8000fec:	40020000 	.word	0x40020000
 8000ff0:	200163e0 	.word	0x200163e0

08000ff4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff4:	b5b0      	push	{r4, r5, r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ffa:	f000 ff9b 	bl	8001f34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ffe:	f000 f8bf 	bl	8001180 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001002:	f000 fafd 	bl	8001600 <MX_GPIO_Init>
  MX_DMA_Init();
 8001006:	f000 fab5 	bl	8001574 <MX_DMA_Init>
  MX_ADC2_Init();
 800100a:	f000 f923 	bl	8001254 <MX_ADC2_Init>
  MX_TIM2_Init();
 800100e:	f000 f9eb 	bl	80013e8 <MX_TIM2_Init>
  MX_TIM8_Init();
 8001012:	f000 fa35 	bl	8001480 <MX_TIM8_Init>
  MX_ADC3_Init();
 8001016:	f000 f96f 	bl	80012f8 <MX_ADC3_Init>
  MX_DAC_Init();
 800101a:	f000 f9bf 	bl	800139c <MX_DAC_Init>
  MX_USART2_UART_Init();
 800101e:	f000 fa7f 	bl	8001520 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
    alpha = (Ff - Fs) / Tc / 2;
 8001022:	4b41      	ldr	r3, [pc, #260]	; (8001128 <main+0x134>)
 8001024:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001028:	4b40      	ldr	r3, [pc, #256]	; (800112c <main+0x138>)
 800102a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800102e:	461a      	mov	r2, r3
 8001030:	4623      	mov	r3, r4
 8001032:	f7ff f921 	bl	8000278 <__aeabi_dsub>
 8001036:	4603      	mov	r3, r0
 8001038:	460c      	mov	r4, r1
 800103a:	4618      	mov	r0, r3
 800103c:	4621      	mov	r1, r4
 800103e:	4b3c      	ldr	r3, [pc, #240]	; (8001130 <main+0x13c>)
 8001040:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001044:	461a      	mov	r2, r3
 8001046:	4623      	mov	r3, r4
 8001048:	f7ff fbf8 	bl	800083c <__aeabi_ddiv>
 800104c:	4603      	mov	r3, r0
 800104e:	460c      	mov	r4, r1
 8001050:	4618      	mov	r0, r3
 8001052:	4621      	mov	r1, r4
 8001054:	f04f 0200 	mov.w	r2, #0
 8001058:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800105c:	f7ff fbee 	bl	800083c <__aeabi_ddiv>
 8001060:	4603      	mov	r3, r0
 8001062:	460c      	mov	r4, r1
 8001064:	4a33      	ldr	r2, [pc, #204]	; (8001134 <main+0x140>)
 8001066:	e9c2 3400 	strd	r3, r4, [r2]
    Cf = ((double) MyClkFreq / ((double) (MyPeriod + 1) * data_size));
 800106a:	4b33      	ldr	r3, [pc, #204]	; (8001138 <main+0x144>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fa40 	bl	80004f4 <__aeabi_ui2d>
 8001074:	4604      	mov	r4, r0
 8001076:	460d      	mov	r5, r1
 8001078:	4b30      	ldr	r3, [pc, #192]	; (800113c <main+0x148>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	3301      	adds	r3, #1
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff fa38 	bl	80004f4 <__aeabi_ui2d>
 8001084:	f04f 0200 	mov.w	r2, #0
 8001088:	4b2d      	ldr	r3, [pc, #180]	; (8001140 <main+0x14c>)
 800108a:	f7ff faad 	bl	80005e8 <__aeabi_dmul>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	4620      	mov	r0, r4
 8001094:	4629      	mov	r1, r5
 8001096:	f7ff fbd1 	bl	800083c <__aeabi_ddiv>
 800109a:	4603      	mov	r3, r0
 800109c:	460c      	mov	r4, r1
 800109e:	4a29      	ldr	r2, [pc, #164]	; (8001144 <main+0x150>)
 80010a0:	e9c2 3400 	strd	r3, r4, [r2]

    HAL_ADC_Start_DMA(&hadc2, (uint32_t*)accelRight, VIBRO_BUFFER_SIZE);
 80010a4:	f241 0202 	movw	r2, #4098	; 0x1002
 80010a8:	4927      	ldr	r1, [pc, #156]	; (8001148 <main+0x154>)
 80010aa:	4828      	ldr	r0, [pc, #160]	; (800114c <main+0x158>)
 80010ac:	f000 fff8 	bl	80020a0 <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA(&hadc3, (uint32_t*)accelLeft, VIBRO_BUFFER_SIZE);
 80010b0:	f241 0202 	movw	r2, #4098	; 0x1002
 80010b4:	4926      	ldr	r1, [pc, #152]	; (8001150 <main+0x15c>)
 80010b6:	4827      	ldr	r0, [pc, #156]	; (8001154 <main+0x160>)
 80010b8:	f000 fff2 	bl	80020a0 <HAL_ADC_Start_DMA>

    get_sineval();
 80010bc:	f7ff fef8 	bl	8000eb0 <get_sineval>
    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*) sine_val, data_size, DAC_ALIGN_12B_R);
 80010c0:	2300      	movs	r3, #0
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	2323      	movs	r3, #35	; 0x23
 80010c6:	4a24      	ldr	r2, [pc, #144]	; (8001158 <main+0x164>)
 80010c8:	2100      	movs	r1, #0
 80010ca:	4824      	ldr	r0, [pc, #144]	; (800115c <main+0x168>)
 80010cc:	f001 fcb8 	bl	8002a40 <HAL_DAC_Start_DMA>

    HAL_TIM_Base_Start(&htim8);
 80010d0:	4823      	ldr	r0, [pc, #140]	; (8001160 <main+0x16c>)
 80010d2:	f002 fffe 	bl	80040d2 <HAL_TIM_Base_Start>
    HAL_TIM_Base_Start(&htim2);
 80010d6:	4823      	ldr	r0, [pc, #140]	; (8001164 <main+0x170>)
 80010d8:	f002 fffb 	bl	80040d2 <HAL_TIM_Base_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (processHalfFlag && pending_half != -1) {
 80010dc:	4b22      	ldr	r3, [pc, #136]	; (8001168 <main+0x174>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d0fa      	beq.n	80010dc <main+0xe8>
 80010e6:	4b21      	ldr	r3, [pc, #132]	; (800116c <main+0x178>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	b25b      	sxtb	r3, r3
 80010ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010f0:	d0f4      	beq.n	80010dc <main+0xe8>
		  if (pending_half == 0) {
 80010f2:	4b1e      	ldr	r3, [pc, #120]	; (800116c <main+0x178>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	b25b      	sxtb	r3, r3
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d106      	bne.n	800110a <main+0x116>
			  adcRBufPtr = &accelRight[0];
 80010fc:	4b1c      	ldr	r3, [pc, #112]	; (8001170 <main+0x17c>)
 80010fe:	4a12      	ldr	r2, [pc, #72]	; (8001148 <main+0x154>)
 8001100:	601a      	str	r2, [r3, #0]
	          adcLBufPtr = &accelLeft[0];
 8001102:	4b1c      	ldr	r3, [pc, #112]	; (8001174 <main+0x180>)
 8001104:	4a12      	ldr	r2, [pc, #72]	; (8001150 <main+0x15c>)
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	e005      	b.n	8001116 <main+0x122>
	      } else {
	          adcRBufPtr = &accelRight[VIBRO_BUFFER_SIZE/2];
 800110a:	4b19      	ldr	r3, [pc, #100]	; (8001170 <main+0x17c>)
 800110c:	4a1a      	ldr	r2, [pc, #104]	; (8001178 <main+0x184>)
 800110e:	601a      	str	r2, [r3, #0]
	          adcLBufPtr = &accelLeft[VIBRO_BUFFER_SIZE/2];
 8001110:	4b18      	ldr	r3, [pc, #96]	; (8001174 <main+0x180>)
 8001112:	4a1a      	ldr	r2, [pc, #104]	; (800117c <main+0x188>)
 8001114:	601a      	str	r2, [r3, #0]
	      }
		  pending_half   = -1;   // consume this half
 8001116:	4b15      	ldr	r3, [pc, #84]	; (800116c <main+0x178>)
 8001118:	22ff      	movs	r2, #255	; 0xff
 800111a:	701a      	strb	r2, [r3, #0]
	      processHalfFlag = 0;   // lock UART
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <main+0x174>)
 800111e:	2200      	movs	r2, #0
 8001120:	701a      	strb	r2, [r3, #0]
	      processHalfBuf();      // build buffer and start DMA
 8001122:	f7ff ff19 	bl	8000f58 <processHalfBuf>
	  if (processHalfFlag && pending_half != -1) {
 8001126:	e7d9      	b.n	80010dc <main+0xe8>
 8001128:	20000008 	.word	0x20000008
 800112c:	20000000 	.word	0x20000000
 8001130:	20000010 	.word	0x20000010
 8001134:	200000c8 	.word	0x200000c8
 8001138:	20000018 	.word	0x20000018
 800113c:	2000001c 	.word	0x2000001c
 8001140:	40418000 	.word	0x40418000
 8001144:	200000d0 	.word	0x200000d0
 8001148:	20014194 	.word	0x20014194
 800114c:	20012148 	.word	0x20012148
 8001150:	20012190 	.word	0x20012190
 8001154:	200162e4 	.word	0x200162e4
 8001158:	20016198 	.word	0x20016198
 800115c:	2001638c 	.word	0x2001638c
 8001160:	20012108 	.word	0x20012108
 8001164:	200163a0 	.word	0x200163a0
 8001168:	20000028 	.word	0x20000028
 800116c:	20000029 	.word	0x20000029
 8001170:	200120f4 	.word	0x200120f4
 8001174:	200120f8 	.word	0x200120f8
 8001178:	20015196 	.word	0x20015196
 800117c:	20013192 	.word	0x20013192

08001180 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b094      	sub	sp, #80	; 0x50
 8001184:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001186:	f107 0320 	add.w	r3, r7, #32
 800118a:	2230      	movs	r2, #48	; 0x30
 800118c:	2100      	movs	r1, #0
 800118e:	4618      	mov	r0, r3
 8001190:	f004 f8a8 	bl	80052e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001194:	f107 030c 	add.w	r3, r7, #12
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a4:	2300      	movs	r3, #0
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	4b28      	ldr	r3, [pc, #160]	; (800124c <SystemClock_Config+0xcc>)
 80011aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ac:	4a27      	ldr	r2, [pc, #156]	; (800124c <SystemClock_Config+0xcc>)
 80011ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b2:	6413      	str	r3, [r2, #64]	; 0x40
 80011b4:	4b25      	ldr	r3, [pc, #148]	; (800124c <SystemClock_Config+0xcc>)
 80011b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011c0:	2300      	movs	r3, #0
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	4b22      	ldr	r3, [pc, #136]	; (8001250 <SystemClock_Config+0xd0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a21      	ldr	r2, [pc, #132]	; (8001250 <SystemClock_Config+0xd0>)
 80011ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ce:	6013      	str	r3, [r2, #0]
 80011d0:	4b1f      	ldr	r3, [pc, #124]	; (8001250 <SystemClock_Config+0xd0>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011dc:	2301      	movs	r3, #1
 80011de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e6:	2302      	movs	r3, #2
 80011e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011f0:	2304      	movs	r3, #4
 80011f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 80011f4:	23a0      	movs	r3, #160	; 0xa0
 80011f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011f8:	2302      	movs	r3, #2
 80011fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011fc:	2304      	movs	r3, #4
 80011fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001200:	f107 0320 	add.w	r3, r7, #32
 8001204:	4618      	mov	r0, r3
 8001206:	f002 fad7 	bl	80037b8 <HAL_RCC_OscConfig>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001210:	f000 fb78 	bl	8001904 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001214:	230f      	movs	r3, #15
 8001216:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001218:	2302      	movs	r3, #2
 800121a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001220:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001224:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001226:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800122a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800122c:	f107 030c 	add.w	r3, r7, #12
 8001230:	2105      	movs	r1, #5
 8001232:	4618      	mov	r0, r3
 8001234:	f002 fd30 	bl	8003c98 <HAL_RCC_ClockConfig>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800123e:	f000 fb61 	bl	8001904 <Error_Handler>
  }
}
 8001242:	bf00      	nop
 8001244:	3750      	adds	r7, #80	; 0x50
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800
 8001250:	40007000 	.word	0x40007000

08001254 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800125a:	463b      	mov	r3, r7
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001266:	4b22      	ldr	r3, [pc, #136]	; (80012f0 <MX_ADC2_Init+0x9c>)
 8001268:	4a22      	ldr	r2, [pc, #136]	; (80012f4 <MX_ADC2_Init+0xa0>)
 800126a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800126c:	4b20      	ldr	r3, [pc, #128]	; (80012f0 <MX_ADC2_Init+0x9c>)
 800126e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001272:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001274:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <MX_ADC2_Init+0x9c>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800127a:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <MX_ADC2_Init+0x9c>)
 800127c:	2200      	movs	r2, #0
 800127e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001280:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <MX_ADC2_Init+0x9c>)
 8001282:	2200      	movs	r2, #0
 8001284:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001286:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <MX_ADC2_Init+0x9c>)
 8001288:	2200      	movs	r2, #0
 800128a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800128e:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <MX_ADC2_Init+0x9c>)
 8001290:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001294:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8001296:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <MX_ADC2_Init+0x9c>)
 8001298:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800129c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800129e:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <MX_ADC2_Init+0x9c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <MX_ADC2_Init+0x9c>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80012aa:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <MX_ADC2_Init+0x9c>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012b2:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <MX_ADC2_Init+0x9c>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80012b8:	480d      	ldr	r0, [pc, #52]	; (80012f0 <MX_ADC2_Init+0x9c>)
 80012ba:	f000 fead 	bl	8002018 <HAL_ADC_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 80012c4:	f000 fb1e 	bl	8001904 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80012c8:	2309      	movs	r3, #9
 80012ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012cc:	2301      	movs	r3, #1
 80012ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 80012d0:	2305      	movs	r3, #5
 80012d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80012d4:	463b      	mov	r3, r7
 80012d6:	4619      	mov	r1, r3
 80012d8:	4805      	ldr	r0, [pc, #20]	; (80012f0 <MX_ADC2_Init+0x9c>)
 80012da:	f000 ffdd 	bl	8002298 <HAL_ADC_ConfigChannel>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 80012e4:	f000 fb0e 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80012e8:	bf00      	nop
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20012148 	.word	0x20012148
 80012f4:	40012100 	.word	0x40012100

080012f8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012fe:	463b      	mov	r3, r7
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800130a:	4b22      	ldr	r3, [pc, #136]	; (8001394 <MX_ADC3_Init+0x9c>)
 800130c:	4a22      	ldr	r2, [pc, #136]	; (8001398 <MX_ADC3_Init+0xa0>)
 800130e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001310:	4b20      	ldr	r3, [pc, #128]	; (8001394 <MX_ADC3_Init+0x9c>)
 8001312:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001316:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001318:	4b1e      	ldr	r3, [pc, #120]	; (8001394 <MX_ADC3_Init+0x9c>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800131e:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <MX_ADC3_Init+0x9c>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001324:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <MX_ADC3_Init+0x9c>)
 8001326:	2200      	movs	r2, #0
 8001328:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800132a:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <MX_ADC3_Init+0x9c>)
 800132c:	2200      	movs	r2, #0
 800132e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001332:	4b18      	ldr	r3, [pc, #96]	; (8001394 <MX_ADC3_Init+0x9c>)
 8001334:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001338:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800133a:	4b16      	ldr	r3, [pc, #88]	; (8001394 <MX_ADC3_Init+0x9c>)
 800133c:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001340:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001342:	4b14      	ldr	r3, [pc, #80]	; (8001394 <MX_ADC3_Init+0x9c>)
 8001344:	2200      	movs	r2, #0
 8001346:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001348:	4b12      	ldr	r3, [pc, #72]	; (8001394 <MX_ADC3_Init+0x9c>)
 800134a:	2201      	movs	r2, #1
 800134c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800134e:	4b11      	ldr	r3, [pc, #68]	; (8001394 <MX_ADC3_Init+0x9c>)
 8001350:	2201      	movs	r2, #1
 8001352:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001356:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <MX_ADC3_Init+0x9c>)
 8001358:	2201      	movs	r2, #1
 800135a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800135c:	480d      	ldr	r0, [pc, #52]	; (8001394 <MX_ADC3_Init+0x9c>)
 800135e:	f000 fe5b 	bl	8002018 <HAL_ADC_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 8001368:	f000 facc 	bl	8001904 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800136c:	2301      	movs	r3, #1
 800136e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001370:	2301      	movs	r3, #1
 8001372:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8001374:	2305      	movs	r3, #5
 8001376:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001378:	463b      	mov	r3, r7
 800137a:	4619      	mov	r1, r3
 800137c:	4805      	ldr	r0, [pc, #20]	; (8001394 <MX_ADC3_Init+0x9c>)
 800137e:	f000 ff8b 	bl	8002298 <HAL_ADC_ConfigChannel>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8001388:	f000 fabc 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800138c:	bf00      	nop
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	200162e4 	.word	0x200162e4
 8001398:	40012200 	.word	0x40012200

0800139c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80013a0:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <MX_DAC_Init+0x40>)
 80013a2:	4a0f      	ldr	r2, [pc, #60]	; (80013e0 <MX_DAC_Init+0x44>)
 80013a4:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80013a6:	480d      	ldr	r0, [pc, #52]	; (80013dc <MX_DAC_Init+0x40>)
 80013a8:	f001 fb27 	bl	80029fa <HAL_DAC_Init>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_DAC_Init+0x1a>
  {
    Error_Handler();
 80013b2:	f000 faa7 	bl	8001904 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80013b6:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <MX_DAC_Init+0x48>)
 80013b8:	2224      	movs	r2, #36	; 0x24
 80013ba:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80013bc:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <MX_DAC_Init+0x48>)
 80013be:	2200      	movs	r2, #0
 80013c0:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80013c2:	2200      	movs	r2, #0
 80013c4:	4907      	ldr	r1, [pc, #28]	; (80013e4 <MX_DAC_Init+0x48>)
 80013c6:	4805      	ldr	r0, [pc, #20]	; (80013dc <MX_DAC_Init+0x40>)
 80013c8:	f001 fbfc 	bl	8002bc4 <HAL_DAC_ConfigChannel>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_DAC_Init+0x3a>
  {
    Error_Handler();
 80013d2:	f000 fa97 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	2001638c 	.word	0x2001638c
 80013e0:	40007400 	.word	0x40007400
 80013e4:	200000bc 	.word	0x200000bc

080013e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ee:	f107 0308 	add.w	r3, r7, #8
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013fc:	463b      	mov	r3, r7
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001404:	4b1d      	ldr	r3, [pc, #116]	; (800147c <MX_TIM2_Init+0x94>)
 8001406:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800140a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1-1;
 800140c:	4b1b      	ldr	r3, [pc, #108]	; (800147c <MX_TIM2_Init+0x94>)
 800140e:	2200      	movs	r2, #0
 8001410:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001412:	4b1a      	ldr	r3, [pc, #104]	; (800147c <MX_TIM2_Init+0x94>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 80-1;
 8001418:	4b18      	ldr	r3, [pc, #96]	; (800147c <MX_TIM2_Init+0x94>)
 800141a:	224f      	movs	r2, #79	; 0x4f
 800141c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800141e:	4b17      	ldr	r3, [pc, #92]	; (800147c <MX_TIM2_Init+0x94>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001424:	4b15      	ldr	r3, [pc, #84]	; (800147c <MX_TIM2_Init+0x94>)
 8001426:	2280      	movs	r2, #128	; 0x80
 8001428:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800142a:	4814      	ldr	r0, [pc, #80]	; (800147c <MX_TIM2_Init+0x94>)
 800142c:	f002 fe26 	bl	800407c <HAL_TIM_Base_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001436:	f000 fa65 	bl	8001904 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800143a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800143e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001440:	f107 0308 	add.w	r3, r7, #8
 8001444:	4619      	mov	r1, r3
 8001446:	480d      	ldr	r0, [pc, #52]	; (800147c <MX_TIM2_Init+0x94>)
 8001448:	f002 ff6f 	bl	800432a <HAL_TIM_ConfigClockSource>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001452:	f000 fa57 	bl	8001904 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001456:	2320      	movs	r3, #32
 8001458:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800145a:	2300      	movs	r3, #0
 800145c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800145e:	463b      	mov	r3, r7
 8001460:	4619      	mov	r1, r3
 8001462:	4806      	ldr	r0, [pc, #24]	; (800147c <MX_TIM2_Init+0x94>)
 8001464:	f003 f984 	bl	8004770 <HAL_TIMEx_MasterConfigSynchronization>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800146e:	f000 fa49 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001472:	bf00      	nop
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	200163a0 	.word	0x200163a0

08001480 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001486:	f107 0308 	add.w	r3, r7, #8
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001494:	463b      	mov	r3, r7
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800149c:	4b1e      	ldr	r3, [pc, #120]	; (8001518 <MX_TIM8_Init+0x98>)
 800149e:	4a1f      	ldr	r2, [pc, #124]	; (800151c <MX_TIM8_Init+0x9c>)
 80014a0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 4000-1;
 80014a2:	4b1d      	ldr	r3, [pc, #116]	; (8001518 <MX_TIM8_Init+0x98>)
 80014a4:	f640 729f 	movw	r2, #3999	; 0xf9f
 80014a8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014aa:	4b1b      	ldr	r3, [pc, #108]	; (8001518 <MX_TIM8_Init+0x98>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 5-1;
 80014b0:	4b19      	ldr	r3, [pc, #100]	; (8001518 <MX_TIM8_Init+0x98>)
 80014b2:	2204      	movs	r2, #4
 80014b4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b6:	4b18      	ldr	r3, [pc, #96]	; (8001518 <MX_TIM8_Init+0x98>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80014bc:	4b16      	ldr	r3, [pc, #88]	; (8001518 <MX_TIM8_Init+0x98>)
 80014be:	2200      	movs	r2, #0
 80014c0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014c2:	4b15      	ldr	r3, [pc, #84]	; (8001518 <MX_TIM8_Init+0x98>)
 80014c4:	2280      	movs	r2, #128	; 0x80
 80014c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80014c8:	4813      	ldr	r0, [pc, #76]	; (8001518 <MX_TIM8_Init+0x98>)
 80014ca:	f002 fdd7 	bl	800407c <HAL_TIM_Base_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 80014d4:	f000 fa16 	bl	8001904 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80014de:	f107 0308 	add.w	r3, r7, #8
 80014e2:	4619      	mov	r1, r3
 80014e4:	480c      	ldr	r0, [pc, #48]	; (8001518 <MX_TIM8_Init+0x98>)
 80014e6:	f002 ff20 	bl	800432a <HAL_TIM_ConfigClockSource>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 80014f0:	f000 fa08 	bl	8001904 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014f4:	2320      	movs	r3, #32
 80014f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f8:	2300      	movs	r3, #0
 80014fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80014fc:	463b      	mov	r3, r7
 80014fe:	4619      	mov	r1, r3
 8001500:	4805      	ldr	r0, [pc, #20]	; (8001518 <MX_TIM8_Init+0x98>)
 8001502:	f003 f935 	bl	8004770 <HAL_TIMEx_MasterConfigSynchronization>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 800150c:	f000 f9fa 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001510:	bf00      	nop
 8001512:	3718      	adds	r7, #24
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20012108 	.word	0x20012108
 800151c:	40010400 	.word	0x40010400

08001520 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001524:	4b10      	ldr	r3, [pc, #64]	; (8001568 <MX_USART2_UART_Init+0x48>)
 8001526:	4a11      	ldr	r2, [pc, #68]	; (800156c <MX_USART2_UART_Init+0x4c>)
 8001528:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 800152a:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <MX_USART2_UART_Init+0x48>)
 800152c:	4a10      	ldr	r2, [pc, #64]	; (8001570 <MX_USART2_UART_Init+0x50>)
 800152e:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001530:	4b0d      	ldr	r3, [pc, #52]	; (8001568 <MX_USART2_UART_Init+0x48>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001536:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <MX_USART2_UART_Init+0x48>)
 8001538:	2200      	movs	r2, #0
 800153a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800153c:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <MX_USART2_UART_Init+0x48>)
 800153e:	2200      	movs	r2, #0
 8001540:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <MX_USART2_UART_Init+0x48>)
 8001544:	2208      	movs	r2, #8
 8001546:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001548:	4b07      	ldr	r3, [pc, #28]	; (8001568 <MX_USART2_UART_Init+0x48>)
 800154a:	2200      	movs	r2, #0
 800154c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800154e:	4b06      	ldr	r3, [pc, #24]	; (8001568 <MX_USART2_UART_Init+0x48>)
 8001550:	2200      	movs	r2, #0
 8001552:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001554:	4804      	ldr	r0, [pc, #16]	; (8001568 <MX_USART2_UART_Init+0x48>)
 8001556:	f003 f99b 	bl	8004890 <HAL_UART_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8001560:	f000 f9d0 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}
 8001568:	200163e0 	.word	0x200163e0
 800156c:	40004400 	.word	0x40004400
 8001570:	000f4240 	.word	0x000f4240

08001574 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	4b1f      	ldr	r3, [pc, #124]	; (80015fc <MX_DMA_Init+0x88>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	4a1e      	ldr	r2, [pc, #120]	; (80015fc <MX_DMA_Init+0x88>)
 8001584:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001588:	6313      	str	r3, [r2, #48]	; 0x30
 800158a:	4b1c      	ldr	r3, [pc, #112]	; (80015fc <MX_DMA_Init+0x88>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	603b      	str	r3, [r7, #0]
 800159a:	4b18      	ldr	r3, [pc, #96]	; (80015fc <MX_DMA_Init+0x88>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a17      	ldr	r2, [pc, #92]	; (80015fc <MX_DMA_Init+0x88>)
 80015a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <MX_DMA_Init+0x88>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ae:	603b      	str	r3, [r7, #0]
 80015b0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2100      	movs	r1, #0
 80015b6:	2010      	movs	r0, #16
 80015b8:	f001 f9e9 	bl	800298e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80015bc:	2010      	movs	r0, #16
 80015be:	f001 fa02 	bl	80029c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2100      	movs	r1, #0
 80015c6:	2011      	movs	r0, #17
 80015c8:	f001 f9e1 	bl	800298e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80015cc:	2011      	movs	r0, #17
 80015ce:	f001 f9fa 	bl	80029c6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2100      	movs	r1, #0
 80015d6:	2038      	movs	r0, #56	; 0x38
 80015d8:	f001 f9d9 	bl	800298e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80015dc:	2038      	movs	r0, #56	; 0x38
 80015de:	f001 f9f2 	bl	80029c6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2100      	movs	r1, #0
 80015e6:	203a      	movs	r0, #58	; 0x3a
 80015e8:	f001 f9d1 	bl	800298e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80015ec:	203a      	movs	r0, #58	; 0x3a
 80015ee:	f001 f9ea 	bl	80029c6 <HAL_NVIC_EnableIRQ>

}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40023800 	.word	0x40023800

08001600 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	4b1e      	ldr	r3, [pc, #120]	; (8001684 <MX_GPIO_Init+0x84>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	4a1d      	ldr	r2, [pc, #116]	; (8001684 <MX_GPIO_Init+0x84>)
 8001610:	f043 0304 	orr.w	r3, r3, #4
 8001614:	6313      	str	r3, [r2, #48]	; 0x30
 8001616:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <MX_GPIO_Init+0x84>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f003 0304 	and.w	r3, r3, #4
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	60bb      	str	r3, [r7, #8]
 8001626:	4b17      	ldr	r3, [pc, #92]	; (8001684 <MX_GPIO_Init+0x84>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	4a16      	ldr	r2, [pc, #88]	; (8001684 <MX_GPIO_Init+0x84>)
 800162c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001630:	6313      	str	r3, [r2, #48]	; 0x30
 8001632:	4b14      	ldr	r3, [pc, #80]	; (8001684 <MX_GPIO_Init+0x84>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	607b      	str	r3, [r7, #4]
 8001642:	4b10      	ldr	r3, [pc, #64]	; (8001684 <MX_GPIO_Init+0x84>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a0f      	ldr	r2, [pc, #60]	; (8001684 <MX_GPIO_Init+0x84>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <MX_GPIO_Init+0x84>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	607b      	str	r3, [r7, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	603b      	str	r3, [r7, #0]
 800165e:	4b09      	ldr	r3, [pc, #36]	; (8001684 <MX_GPIO_Init+0x84>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4a08      	ldr	r2, [pc, #32]	; (8001684 <MX_GPIO_Init+0x84>)
 8001664:	f043 0302 	orr.w	r3, r3, #2
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4b06      	ldr	r3, [pc, #24]	; (8001684 <MX_GPIO_Init+0x84>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	603b      	str	r3, [r7, #0]
 8001674:	683b      	ldr	r3, [r7, #0]

}
 8001676:	bf00      	nop
 8001678:	3714      	adds	r7, #20
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	40023800 	.word	0x40023800

08001688 <MY_TIM_UPDATE>:
	}
	return len;
}


void MY_TIM_UPDATE() {
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
	htim2.Init.Prescaler = MyPrescaler;
 800168c:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <MY_TIM_UPDATE+0x18>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a04      	ldr	r2, [pc, #16]	; (80016a4 <MY_TIM_UPDATE+0x1c>)
 8001692:	6053      	str	r3, [r2, #4]
	HAL_TIM_Base_Init(&htim2);
 8001694:	4803      	ldr	r0, [pc, #12]	; (80016a4 <MY_TIM_UPDATE+0x1c>)
 8001696:	f002 fcf1 	bl	800407c <HAL_TIM_Base_Init>
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	200000f0 	.word	0x200000f0
 80016a4:	200163a0 	.word	0x200163a0

080016a8 <MY_DAC_UPDATE>:

void MY_DAC_UPDATE(void) {
 80016a8:	b598      	push	{r3, r4, r7, lr}
 80016aa:	af00      	add	r7, sp, #0
	MY_TIM_UPDATE();
 80016ac:	f7ff ffec 	bl	8001688 <MY_TIM_UPDATE>
	deltat = (double) (((double) MyPrescaler + 1) / Cf);
 80016b0:	4b51      	ldr	r3, [pc, #324]	; (80017f8 <MY_DAC_UPDATE+0x150>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7fe ff1d 	bl	80004f4 <__aeabi_ui2d>
 80016ba:	f04f 0200 	mov.w	r2, #0
 80016be:	4b4f      	ldr	r3, [pc, #316]	; (80017fc <MY_DAC_UPDATE+0x154>)
 80016c0:	f7fe fddc 	bl	800027c <__adddf3>
 80016c4:	4603      	mov	r3, r0
 80016c6:	460c      	mov	r4, r1
 80016c8:	4618      	mov	r0, r3
 80016ca:	4621      	mov	r1, r4
 80016cc:	4b4c      	ldr	r3, [pc, #304]	; (8001800 <MY_DAC_UPDATE+0x158>)
 80016ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80016d2:	461a      	mov	r2, r3
 80016d4:	4623      	mov	r3, r4
 80016d6:	f7ff f8b1 	bl	800083c <__aeabi_ddiv>
 80016da:	4603      	mov	r3, r0
 80016dc:	460c      	mov	r4, r1
 80016de:	4a49      	ldr	r2, [pc, #292]	; (8001804 <MY_DAC_UPDATE+0x15c>)
 80016e0:	e9c2 3400 	strd	r3, r4, [r2]
	// Update Time Variable [s]
	(t > (2.0 * Tc)) ? (t = 0) : (t += deltat);
 80016e4:	4b48      	ldr	r3, [pc, #288]	; (8001808 <MY_DAC_UPDATE+0x160>)
 80016e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	f7fe fdc5 	bl	800027c <__adddf3>
 80016f2:	4603      	mov	r3, r0
 80016f4:	460c      	mov	r4, r1
 80016f6:	4618      	mov	r0, r3
 80016f8:	4621      	mov	r1, r4
 80016fa:	4b44      	ldr	r3, [pc, #272]	; (800180c <MY_DAC_UPDATE+0x164>)
 80016fc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001700:	461a      	mov	r2, r3
 8001702:	4623      	mov	r3, r4
 8001704:	f7ff f9e2 	bl	8000acc <__aeabi_dcmplt>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d007      	beq.n	800171e <MY_DAC_UPDATE+0x76>
 800170e:	4a3f      	ldr	r2, [pc, #252]	; (800180c <MY_DAC_UPDATE+0x164>)
 8001710:	f04f 0300 	mov.w	r3, #0
 8001714:	f04f 0400 	mov.w	r4, #0
 8001718:	e9c2 3400 	strd	r3, r4, [r2]
 800171c:	e00e      	b.n	800173c <MY_DAC_UPDATE+0x94>
 800171e:	4b3b      	ldr	r3, [pc, #236]	; (800180c <MY_DAC_UPDATE+0x164>)
 8001720:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001724:	4b37      	ldr	r3, [pc, #220]	; (8001804 <MY_DAC_UPDATE+0x15c>)
 8001726:	e9d3 3400 	ldrd	r3, r4, [r3]
 800172a:	461a      	mov	r2, r3
 800172c:	4623      	mov	r3, r4
 800172e:	f7fe fda5 	bl	800027c <__adddf3>
 8001732:	4603      	mov	r3, r0
 8001734:	460c      	mov	r4, r1
 8001736:	4a35      	ldr	r2, [pc, #212]	; (800180c <MY_DAC_UPDATE+0x164>)
 8001738:	e9c2 3400 	strd	r3, r4, [r2]
	Ft = (double) (Fs + alpha * t); // Update Frequency Variable
 800173c:	4b34      	ldr	r3, [pc, #208]	; (8001810 <MY_DAC_UPDATE+0x168>)
 800173e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001742:	4b32      	ldr	r3, [pc, #200]	; (800180c <MY_DAC_UPDATE+0x164>)
 8001744:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001748:	461a      	mov	r2, r3
 800174a:	4623      	mov	r3, r4
 800174c:	f7fe ff4c 	bl	80005e8 <__aeabi_dmul>
 8001750:	4603      	mov	r3, r0
 8001752:	460c      	mov	r4, r1
 8001754:	4618      	mov	r0, r3
 8001756:	4621      	mov	r1, r4
 8001758:	4b2e      	ldr	r3, [pc, #184]	; (8001814 <MY_DAC_UPDATE+0x16c>)
 800175a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800175e:	461a      	mov	r2, r3
 8001760:	4623      	mov	r3, r4
 8001762:	f7fe fd8b 	bl	800027c <__adddf3>
 8001766:	4603      	mov	r3, r0
 8001768:	460c      	mov	r4, r1
 800176a:	4a2b      	ldr	r2, [pc, #172]	; (8001818 <MY_DAC_UPDATE+0x170>)
 800176c:	e9c2 3400 	strd	r3, r4, [r2]
	(Ft > Ff) ? (Ft = Ff) : 1; // Check Frequency Variable
 8001770:	4b29      	ldr	r3, [pc, #164]	; (8001818 <MY_DAC_UPDATE+0x170>)
 8001772:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001776:	4b29      	ldr	r3, [pc, #164]	; (800181c <MY_DAC_UPDATE+0x174>)
 8001778:	e9d3 3400 	ldrd	r3, r4, [r3]
 800177c:	461a      	mov	r2, r3
 800177e:	4623      	mov	r3, r4
 8001780:	f7ff f9c2 	bl	8000b08 <__aeabi_dcmpgt>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d005      	beq.n	8001796 <MY_DAC_UPDATE+0xee>
 800178a:	4b24      	ldr	r3, [pc, #144]	; (800181c <MY_DAC_UPDATE+0x174>)
 800178c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001790:	4a21      	ldr	r2, [pc, #132]	; (8001818 <MY_DAC_UPDATE+0x170>)
 8001792:	e9c2 3400 	strd	r3, r4, [r2]
	(Ft > Cf) ? (Ft = Cf) : 1; // Check Frequency Variable
 8001796:	4b20      	ldr	r3, [pc, #128]	; (8001818 <MY_DAC_UPDATE+0x170>)
 8001798:	e9d3 0100 	ldrd	r0, r1, [r3]
 800179c:	4b18      	ldr	r3, [pc, #96]	; (8001800 <MY_DAC_UPDATE+0x158>)
 800179e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80017a2:	461a      	mov	r2, r3
 80017a4:	4623      	mov	r3, r4
 80017a6:	f7ff f9af 	bl	8000b08 <__aeabi_dcmpgt>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d005      	beq.n	80017bc <MY_DAC_UPDATE+0x114>
 80017b0:	4b13      	ldr	r3, [pc, #76]	; (8001800 <MY_DAC_UPDATE+0x158>)
 80017b2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80017b6:	4a18      	ldr	r2, [pc, #96]	; (8001818 <MY_DAC_UPDATE+0x170>)
 80017b8:	e9c2 3400 	strd	r3, r4, [r2]
	MyPrescaler = (uint32_t) ((Cf / Ft) - 1); // Compute Prescaler Value
 80017bc:	4b10      	ldr	r3, [pc, #64]	; (8001800 <MY_DAC_UPDATE+0x158>)
 80017be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017c2:	4b15      	ldr	r3, [pc, #84]	; (8001818 <MY_DAC_UPDATE+0x170>)
 80017c4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80017c8:	461a      	mov	r2, r3
 80017ca:	4623      	mov	r3, r4
 80017cc:	f7ff f836 	bl	800083c <__aeabi_ddiv>
 80017d0:	4603      	mov	r3, r0
 80017d2:	460c      	mov	r4, r1
 80017d4:	4618      	mov	r0, r3
 80017d6:	4621      	mov	r1, r4
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	4b07      	ldr	r3, [pc, #28]	; (80017fc <MY_DAC_UPDATE+0x154>)
 80017de:	f7fe fd4b 	bl	8000278 <__aeabi_dsub>
 80017e2:	4603      	mov	r3, r0
 80017e4:	460c      	mov	r4, r1
 80017e6:	4618      	mov	r0, r3
 80017e8:	4621      	mov	r1, r4
 80017ea:	f7ff f9bf 	bl	8000b6c <__aeabi_d2uiz>
 80017ee:	4602      	mov	r2, r0
 80017f0:	4b01      	ldr	r3, [pc, #4]	; (80017f8 <MY_DAC_UPDATE+0x150>)
 80017f2:	601a      	str	r2, [r3, #0]
}
 80017f4:	bf00      	nop
 80017f6:	bd98      	pop	{r3, r4, r7, pc}
 80017f8:	200000f0 	.word	0x200000f0
 80017fc:	3ff00000 	.word	0x3ff00000
 8001800:	200000d0 	.word	0x200000d0
 8001804:	200000d8 	.word	0x200000d8
 8001808:	20000010 	.word	0x20000010
 800180c:	200000e0 	.word	0x200000e0
 8001810:	200000c8 	.word	0x200000c8
 8001814:	20000000 	.word	0x20000000
 8001818:	200000e8 	.word	0x200000e8
 800181c:	20000008 	.word	0x20000008

08001820 <HAL_DAC_ConvCpltCallbackCh1>:


void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac) {
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	MY_DAC_UPDATE();
 8001828:	f7ff ff3e 	bl	80016a8 <MY_DAC_UPDATE>
}
 800182c:	bf00      	nop
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <HAL_ADC_ConvHalfCpltCallback>:


void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC2) {
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a0a      	ldr	r2, [pc, #40]	; (800186c <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d10e      	bne.n	8001864 <HAL_ADC_ConvHalfCpltCallback+0x30>
        if (pending_half == -1) pending_half = 0;
 8001846:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	b25b      	sxtb	r3, r3
 800184c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001850:	d102      	bne.n	8001858 <HAL_ADC_ConvHalfCpltCallback+0x24>
 8001852:	4b07      	ldr	r3, [pc, #28]	; (8001870 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8001854:	2200      	movs	r2, #0
 8001856:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001858:	2201      	movs	r2, #1
 800185a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800185e:	4805      	ldr	r0, [pc, #20]	; (8001874 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 8001860:	f001 ff90 	bl	8003784 <HAL_GPIO_WritePin>
    }
}
 8001864:	bf00      	nop
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40012100 	.word	0x40012100
 8001870:	20000029 	.word	0x20000029
 8001874:	40020000 	.word	0x40020000

08001878 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC2) {
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a0a      	ldr	r2, [pc, #40]	; (80018b0 <HAL_ADC_ConvCpltCallback+0x38>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d10e      	bne.n	80018a8 <HAL_ADC_ConvCpltCallback+0x30>
        if (pending_half == -1) pending_half = 1;  // arm half #1 once
 800188a:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <HAL_ADC_ConvCpltCallback+0x3c>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	b25b      	sxtb	r3, r3
 8001890:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001894:	d102      	bne.n	800189c <HAL_ADC_ConvCpltCallback+0x24>
 8001896:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <HAL_ADC_ConvCpltCallback+0x3c>)
 8001898:	2201      	movs	r2, #1
 800189a:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800189c:	2200      	movs	r2, #0
 800189e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018a2:	4805      	ldr	r0, [pc, #20]	; (80018b8 <HAL_ADC_ConvCpltCallback+0x40>)
 80018a4:	f001 ff6e 	bl	8003784 <HAL_GPIO_WritePin>
    }
}
 80018a8:	bf00      	nop
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40012100 	.word	0x40012100
 80018b4:	20000029 	.word	0x20000029
 80018b8:	40020000 	.word	0x40020000

080018bc <HAL_UART_TxCpltCallback>:




void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
    // Swap after the previous buffer is fully sent

	volatile char *tmp = uartActiveBuf;
 80018c4:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <HAL_UART_TxCpltCallback+0x38>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	60fb      	str	r3, [r7, #12]
    uartActiveBuf = uartFillBuf;
 80018ca:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <HAL_UART_TxCpltCallback+0x3c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a09      	ldr	r2, [pc, #36]	; (80018f4 <HAL_UART_TxCpltCallback+0x38>)
 80018d0:	6013      	str	r3, [r2, #0]
    uartFillBuf   = tmp;
 80018d2:	4a09      	ldr	r2, [pc, #36]	; (80018f8 <HAL_UART_TxCpltCallback+0x3c>)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6013      	str	r3, [r2, #0]

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80018d8:	2200      	movs	r2, #0
 80018da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018de:	4807      	ldr	r0, [pc, #28]	; (80018fc <HAL_UART_TxCpltCallback+0x40>)
 80018e0:	f001 ff50 	bl	8003784 <HAL_GPIO_WritePin>
    processHalfFlag = 1;  // ready to fill next half
 80018e4:	4b06      	ldr	r3, [pc, #24]	; (8001900 <HAL_UART_TxCpltCallback+0x44>)
 80018e6:	2201      	movs	r2, #1
 80018e8:	701a      	strb	r2, [r3, #0]
}
 80018ea:	bf00      	nop
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000020 	.word	0x20000020
 80018f8:	20000024 	.word	0x20000024
 80018fc:	40020000 	.word	0x40020000
 8001900:	20000028 	.word	0x20000028

08001904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
	...

08001914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	607b      	str	r3, [r7, #4]
 800191e:	4b10      	ldr	r3, [pc, #64]	; (8001960 <HAL_MspInit+0x4c>)
 8001920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001922:	4a0f      	ldr	r2, [pc, #60]	; (8001960 <HAL_MspInit+0x4c>)
 8001924:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001928:	6453      	str	r3, [r2, #68]	; 0x44
 800192a:	4b0d      	ldr	r3, [pc, #52]	; (8001960 <HAL_MspInit+0x4c>)
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	603b      	str	r3, [r7, #0]
 800193a:	4b09      	ldr	r3, [pc, #36]	; (8001960 <HAL_MspInit+0x4c>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	4a08      	ldr	r2, [pc, #32]	; (8001960 <HAL_MspInit+0x4c>)
 8001940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001944:	6413      	str	r3, [r2, #64]	; 0x40
 8001946:	4b06      	ldr	r3, [pc, #24]	; (8001960 <HAL_MspInit+0x4c>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194e:	603b      	str	r3, [r7, #0]
 8001950:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800

08001964 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08c      	sub	sp, #48	; 0x30
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196c:	f107 031c 	add.w	r3, r7, #28
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a60      	ldr	r2, [pc, #384]	; (8001b04 <HAL_ADC_MspInit+0x1a0>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d15a      	bne.n	8001a3c <HAL_ADC_MspInit+0xd8>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	61bb      	str	r3, [r7, #24]
 800198a:	4b5f      	ldr	r3, [pc, #380]	; (8001b08 <HAL_ADC_MspInit+0x1a4>)
 800198c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198e:	4a5e      	ldr	r2, [pc, #376]	; (8001b08 <HAL_ADC_MspInit+0x1a4>)
 8001990:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001994:	6453      	str	r3, [r2, #68]	; 0x44
 8001996:	4b5c      	ldr	r3, [pc, #368]	; (8001b08 <HAL_ADC_MspInit+0x1a4>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800199e:	61bb      	str	r3, [r7, #24]
 80019a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
 80019a6:	4b58      	ldr	r3, [pc, #352]	; (8001b08 <HAL_ADC_MspInit+0x1a4>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	4a57      	ldr	r2, [pc, #348]	; (8001b08 <HAL_ADC_MspInit+0x1a4>)
 80019ac:	f043 0302 	orr.w	r3, r3, #2
 80019b0:	6313      	str	r3, [r2, #48]	; 0x30
 80019b2:	4b55      	ldr	r3, [pc, #340]	; (8001b08 <HAL_ADC_MspInit+0x1a4>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	617b      	str	r3, [r7, #20]
 80019bc:	697b      	ldr	r3, [r7, #20]
    /**ADC2 GPIO Configuration
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80019be:	2302      	movs	r3, #2
 80019c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019c2:	2303      	movs	r3, #3
 80019c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ca:	f107 031c 	add.w	r3, r7, #28
 80019ce:	4619      	mov	r1, r3
 80019d0:	484e      	ldr	r0, [pc, #312]	; (8001b0c <HAL_ADC_MspInit+0x1a8>)
 80019d2:	f001 fd3d 	bl	8003450 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 80019d6:	4b4e      	ldr	r3, [pc, #312]	; (8001b10 <HAL_ADC_MspInit+0x1ac>)
 80019d8:	4a4e      	ldr	r2, [pc, #312]	; (8001b14 <HAL_ADC_MspInit+0x1b0>)
 80019da:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80019dc:	4b4c      	ldr	r3, [pc, #304]	; (8001b10 <HAL_ADC_MspInit+0x1ac>)
 80019de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019e2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019e4:	4b4a      	ldr	r3, [pc, #296]	; (8001b10 <HAL_ADC_MspInit+0x1ac>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80019ea:	4b49      	ldr	r3, [pc, #292]	; (8001b10 <HAL_ADC_MspInit+0x1ac>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80019f0:	4b47      	ldr	r3, [pc, #284]	; (8001b10 <HAL_ADC_MspInit+0x1ac>)
 80019f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019f6:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019f8:	4b45      	ldr	r3, [pc, #276]	; (8001b10 <HAL_ADC_MspInit+0x1ac>)
 80019fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019fe:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a00:	4b43      	ldr	r3, [pc, #268]	; (8001b10 <HAL_ADC_MspInit+0x1ac>)
 8001a02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a06:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001a08:	4b41      	ldr	r3, [pc, #260]	; (8001b10 <HAL_ADC_MspInit+0x1ac>)
 8001a0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a0e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8001a10:	4b3f      	ldr	r3, [pc, #252]	; (8001b10 <HAL_ADC_MspInit+0x1ac>)
 8001a12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a16:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a18:	4b3d      	ldr	r3, [pc, #244]	; (8001b10 <HAL_ADC_MspInit+0x1ac>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001a1e:	483c      	ldr	r0, [pc, #240]	; (8001b10 <HAL_ADC_MspInit+0x1ac>)
 8001a20:	f001 f9a8 	bl	8002d74 <HAL_DMA_Init>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <HAL_ADC_MspInit+0xca>
    {
      Error_Handler();
 8001a2a:	f7ff ff6b 	bl	8001904 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a37      	ldr	r2, [pc, #220]	; (8001b10 <HAL_ADC_MspInit+0x1ac>)
 8001a32:	639a      	str	r2, [r3, #56]	; 0x38
 8001a34:	4a36      	ldr	r2, [pc, #216]	; (8001b10 <HAL_ADC_MspInit+0x1ac>)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001a3a:	e05e      	b.n	8001afa <HAL_ADC_MspInit+0x196>
  else if(hadc->Instance==ADC3)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a35      	ldr	r2, [pc, #212]	; (8001b18 <HAL_ADC_MspInit+0x1b4>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d159      	bne.n	8001afa <HAL_ADC_MspInit+0x196>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	4b2f      	ldr	r3, [pc, #188]	; (8001b08 <HAL_ADC_MspInit+0x1a4>)
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	4a2e      	ldr	r2, [pc, #184]	; (8001b08 <HAL_ADC_MspInit+0x1a4>)
 8001a50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a54:	6453      	str	r3, [r2, #68]	; 0x44
 8001a56:	4b2c      	ldr	r3, [pc, #176]	; (8001b08 <HAL_ADC_MspInit+0x1a4>)
 8001a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	4b28      	ldr	r3, [pc, #160]	; (8001b08 <HAL_ADC_MspInit+0x1a4>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	4a27      	ldr	r2, [pc, #156]	; (8001b08 <HAL_ADC_MspInit+0x1a4>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6313      	str	r3, [r2, #48]	; 0x30
 8001a72:	4b25      	ldr	r3, [pc, #148]	; (8001b08 <HAL_ADC_MspInit+0x1a4>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a82:	2303      	movs	r3, #3
 8001a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8a:	f107 031c 	add.w	r3, r7, #28
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4822      	ldr	r0, [pc, #136]	; (8001b1c <HAL_ADC_MspInit+0x1b8>)
 8001a92:	f001 fcdd 	bl	8003450 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream0;
 8001a96:	4b22      	ldr	r3, [pc, #136]	; (8001b20 <HAL_ADC_MspInit+0x1bc>)
 8001a98:	4a22      	ldr	r2, [pc, #136]	; (8001b24 <HAL_ADC_MspInit+0x1c0>)
 8001a9a:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8001a9c:	4b20      	ldr	r3, [pc, #128]	; (8001b20 <HAL_ADC_MspInit+0x1bc>)
 8001a9e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001aa2:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001aa4:	4b1e      	ldr	r3, [pc, #120]	; (8001b20 <HAL_ADC_MspInit+0x1bc>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aaa:	4b1d      	ldr	r3, [pc, #116]	; (8001b20 <HAL_ADC_MspInit+0x1bc>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001ab0:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <HAL_ADC_MspInit+0x1bc>)
 8001ab2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ab6:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ab8:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <HAL_ADC_MspInit+0x1bc>)
 8001aba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001abe:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ac0:	4b17      	ldr	r3, [pc, #92]	; (8001b20 <HAL_ADC_MspInit+0x1bc>)
 8001ac2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ac6:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001ac8:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <HAL_ADC_MspInit+0x1bc>)
 8001aca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ace:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 8001ad0:	4b13      	ldr	r3, [pc, #76]	; (8001b20 <HAL_ADC_MspInit+0x1bc>)
 8001ad2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ad6:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ad8:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <HAL_ADC_MspInit+0x1bc>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001ade:	4810      	ldr	r0, [pc, #64]	; (8001b20 <HAL_ADC_MspInit+0x1bc>)
 8001ae0:	f001 f948 	bl	8002d74 <HAL_DMA_Init>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <HAL_ADC_MspInit+0x18a>
      Error_Handler();
 8001aea:	f7ff ff0b 	bl	8001904 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a0b      	ldr	r2, [pc, #44]	; (8001b20 <HAL_ADC_MspInit+0x1bc>)
 8001af2:	639a      	str	r2, [r3, #56]	; 0x38
 8001af4:	4a0a      	ldr	r2, [pc, #40]	; (8001b20 <HAL_ADC_MspInit+0x1bc>)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001afa:	bf00      	nop
 8001afc:	3730      	adds	r7, #48	; 0x30
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40012100 	.word	0x40012100
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40020400 	.word	0x40020400
 8001b10:	20016420 	.word	0x20016420
 8001b14:	40026440 	.word	0x40026440
 8001b18:	40012200 	.word	0x40012200
 8001b1c:	40020000 	.word	0x40020000
 8001b20:	20016224 	.word	0x20016224
 8001b24:	40026410 	.word	0x40026410

08001b28 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08a      	sub	sp, #40	; 0x28
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b30:	f107 0314 	add.w	r3, r7, #20
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
 8001b3e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a30      	ldr	r2, [pc, #192]	; (8001c08 <HAL_DAC_MspInit+0xe0>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d159      	bne.n	8001bfe <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	4b2f      	ldr	r3, [pc, #188]	; (8001c0c <HAL_DAC_MspInit+0xe4>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	4a2e      	ldr	r2, [pc, #184]	; (8001c0c <HAL_DAC_MspInit+0xe4>)
 8001b54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001b58:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5a:	4b2c      	ldr	r3, [pc, #176]	; (8001c0c <HAL_DAC_MspInit+0xe4>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b62:	613b      	str	r3, [r7, #16]
 8001b64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	4b28      	ldr	r3, [pc, #160]	; (8001c0c <HAL_DAC_MspInit+0xe4>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	4a27      	ldr	r2, [pc, #156]	; (8001c0c <HAL_DAC_MspInit+0xe4>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6313      	str	r3, [r2, #48]	; 0x30
 8001b76:	4b25      	ldr	r3, [pc, #148]	; (8001c0c <HAL_DAC_MspInit+0xe4>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b82:	2310      	movs	r3, #16
 8001b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b86:	2303      	movs	r3, #3
 8001b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8e:	f107 0314 	add.w	r3, r7, #20
 8001b92:	4619      	mov	r1, r3
 8001b94:	481e      	ldr	r0, [pc, #120]	; (8001c10 <HAL_DAC_MspInit+0xe8>)
 8001b96:	f001 fc5b 	bl	8003450 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001b9a:	4b1e      	ldr	r3, [pc, #120]	; (8001c14 <HAL_DAC_MspInit+0xec>)
 8001b9c:	4a1e      	ldr	r2, [pc, #120]	; (8001c18 <HAL_DAC_MspInit+0xf0>)
 8001b9e:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001ba0:	4b1c      	ldr	r3, [pc, #112]	; (8001c14 <HAL_DAC_MspInit+0xec>)
 8001ba2:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001ba6:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ba8:	4b1a      	ldr	r3, [pc, #104]	; (8001c14 <HAL_DAC_MspInit+0xec>)
 8001baa:	2240      	movs	r2, #64	; 0x40
 8001bac:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bae:	4b19      	ldr	r3, [pc, #100]	; (8001c14 <HAL_DAC_MspInit+0xec>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001bb4:	4b17      	ldr	r3, [pc, #92]	; (8001c14 <HAL_DAC_MspInit+0xec>)
 8001bb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bba:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bbc:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <HAL_DAC_MspInit+0xec>)
 8001bbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bc2:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bc4:	4b13      	ldr	r3, [pc, #76]	; (8001c14 <HAL_DAC_MspInit+0xec>)
 8001bc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bca:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001bcc:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <HAL_DAC_MspInit+0xec>)
 8001bce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bd2:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_HIGH;
 8001bd4:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <HAL_DAC_MspInit+0xec>)
 8001bd6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bda:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bdc:	4b0d      	ldr	r3, [pc, #52]	; (8001c14 <HAL_DAC_MspInit+0xec>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001be2:	480c      	ldr	r0, [pc, #48]	; (8001c14 <HAL_DAC_MspInit+0xec>)
 8001be4:	f001 f8c6 	bl	8002d74 <HAL_DMA_Init>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8001bee:	f7ff fe89 	bl	8001904 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a07      	ldr	r2, [pc, #28]	; (8001c14 <HAL_DAC_MspInit+0xec>)
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	4a06      	ldr	r2, [pc, #24]	; (8001c14 <HAL_DAC_MspInit+0xec>)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001bfe:	bf00      	nop
 8001c00:	3728      	adds	r7, #40	; 0x28
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40007400 	.word	0x40007400
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40020000 	.word	0x40020000
 8001c14:	20016284 	.word	0x20016284
 8001c18:	40026088 	.word	0x40026088

08001c1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c2c:	d116      	bne.n	8001c5c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	4b16      	ldr	r3, [pc, #88]	; (8001c8c <HAL_TIM_Base_MspInit+0x70>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	4a15      	ldr	r2, [pc, #84]	; (8001c8c <HAL_TIM_Base_MspInit+0x70>)
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c3e:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <HAL_TIM_Base_MspInit+0x70>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	201c      	movs	r0, #28
 8001c50:	f000 fe9d 	bl	800298e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c54:	201c      	movs	r0, #28
 8001c56:	f000 feb6 	bl	80029c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001c5a:	e012      	b.n	8001c82 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM8)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a0b      	ldr	r2, [pc, #44]	; (8001c90 <HAL_TIM_Base_MspInit+0x74>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d10d      	bne.n	8001c82 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	60bb      	str	r3, [r7, #8]
 8001c6a:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <HAL_TIM_Base_MspInit+0x70>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	4a07      	ldr	r2, [pc, #28]	; (8001c8c <HAL_TIM_Base_MspInit+0x70>)
 8001c70:	f043 0302 	orr.w	r3, r3, #2
 8001c74:	6453      	str	r3, [r2, #68]	; 0x44
 8001c76:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <HAL_TIM_Base_MspInit+0x70>)
 8001c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	60bb      	str	r3, [r7, #8]
 8001c80:	68bb      	ldr	r3, [r7, #8]
}
 8001c82:	bf00      	nop
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40010400 	.word	0x40010400

08001c94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08a      	sub	sp, #40	; 0x28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a30      	ldr	r2, [pc, #192]	; (8001d74 <HAL_UART_MspInit+0xe0>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d15a      	bne.n	8001d6c <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	4b2f      	ldr	r3, [pc, #188]	; (8001d78 <HAL_UART_MspInit+0xe4>)
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	4a2e      	ldr	r2, [pc, #184]	; (8001d78 <HAL_UART_MspInit+0xe4>)
 8001cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc6:	4b2c      	ldr	r3, [pc, #176]	; (8001d78 <HAL_UART_MspInit+0xe4>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cce:	613b      	str	r3, [r7, #16]
 8001cd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	4b28      	ldr	r3, [pc, #160]	; (8001d78 <HAL_UART_MspInit+0xe4>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	4a27      	ldr	r2, [pc, #156]	; (8001d78 <HAL_UART_MspInit+0xe4>)
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce2:	4b25      	ldr	r3, [pc, #148]	; (8001d78 <HAL_UART_MspInit+0xe4>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001cee:	230c      	movs	r3, #12
 8001cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cfe:	2307      	movs	r3, #7
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d02:	f107 0314 	add.w	r3, r7, #20
 8001d06:	4619      	mov	r1, r3
 8001d08:	481c      	ldr	r0, [pc, #112]	; (8001d7c <HAL_UART_MspInit+0xe8>)
 8001d0a:	f001 fba1 	bl	8003450 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001d0e:	4b1c      	ldr	r3, [pc, #112]	; (8001d80 <HAL_UART_MspInit+0xec>)
 8001d10:	4a1c      	ldr	r2, [pc, #112]	; (8001d84 <HAL_UART_MspInit+0xf0>)
 8001d12:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001d14:	4b1a      	ldr	r3, [pc, #104]	; (8001d80 <HAL_UART_MspInit+0xec>)
 8001d16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d1a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d1c:	4b18      	ldr	r3, [pc, #96]	; (8001d80 <HAL_UART_MspInit+0xec>)
 8001d1e:	2240      	movs	r2, #64	; 0x40
 8001d20:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d22:	4b17      	ldr	r3, [pc, #92]	; (8001d80 <HAL_UART_MspInit+0xec>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d28:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <HAL_UART_MspInit+0xec>)
 8001d2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d2e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d30:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <HAL_UART_MspInit+0xec>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d36:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <HAL_UART_MspInit+0xec>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001d3c:	4b10      	ldr	r3, [pc, #64]	; (8001d80 <HAL_UART_MspInit+0xec>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001d42:	4b0f      	ldr	r3, [pc, #60]	; (8001d80 <HAL_UART_MspInit+0xec>)
 8001d44:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d48:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d4a:	4b0d      	ldr	r3, [pc, #52]	; (8001d80 <HAL_UART_MspInit+0xec>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001d50:	480b      	ldr	r0, [pc, #44]	; (8001d80 <HAL_UART_MspInit+0xec>)
 8001d52:	f001 f80f 	bl	8002d74 <HAL_DMA_Init>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001d5c:	f7ff fdd2 	bl	8001904 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a07      	ldr	r2, [pc, #28]	; (8001d80 <HAL_UART_MspInit+0xec>)
 8001d64:	631a      	str	r2, [r3, #48]	; 0x30
 8001d66:	4a06      	ldr	r2, [pc, #24]	; (8001d80 <HAL_UART_MspInit+0xec>)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d6c:	bf00      	nop
 8001d6e:	3728      	adds	r7, #40	; 0x28
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40004400 	.word	0x40004400
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	40020000 	.word	0x40020000
 8001d80:	2001632c 	.word	0x2001632c
 8001d84:	400260a0 	.word	0x400260a0

08001d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d9a:	e7fe      	b.n	8001d9a <HardFault_Handler+0x4>

08001d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001da0:	e7fe      	b.n	8001da0 <MemManage_Handler+0x4>

08001da2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001da2:	b480      	push	{r7}
 8001da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001da6:	e7fe      	b.n	8001da6 <BusFault_Handler+0x4>

08001da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dac:	e7fe      	b.n	8001dac <UsageFault_Handler+0x4>

08001dae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dae:	b480      	push	{r7}
 8001db0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ddc:	f000 f8fc 	bl	8001fd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001de0:	bf00      	nop
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001de8:	4802      	ldr	r0, [pc, #8]	; (8001df4 <DMA1_Stream5_IRQHandler+0x10>)
 8001dea:	f001 f8c9 	bl	8002f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20016284 	.word	0x20016284

08001df8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001dfc:	4802      	ldr	r0, [pc, #8]	; (8001e08 <DMA1_Stream6_IRQHandler+0x10>)
 8001dfe:	f001 f8bf 	bl	8002f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	2001632c 	.word	0x2001632c

08001e0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e10:	4802      	ldr	r0, [pc, #8]	; (8001e1c <TIM2_IRQHandler+0x10>)
 8001e12:	f002 f982 	bl	800411a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	200163a0 	.word	0x200163a0

08001e20 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001e24:	4802      	ldr	r0, [pc, #8]	; (8001e30 <DMA2_Stream0_IRQHandler+0x10>)
 8001e26:	f001 f8ab 	bl	8002f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20016224 	.word	0x20016224

08001e34 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001e38:	4802      	ldr	r0, [pc, #8]	; (8001e44 <DMA2_Stream2_IRQHandler+0x10>)
 8001e3a:	f001 f8a1 	bl	8002f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20016420 	.word	0x20016420

08001e48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e50:	4a14      	ldr	r2, [pc, #80]	; (8001ea4 <_sbrk+0x5c>)
 8001e52:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <_sbrk+0x60>)
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e5c:	4b13      	ldr	r3, [pc, #76]	; (8001eac <_sbrk+0x64>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d102      	bne.n	8001e6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e64:	4b11      	ldr	r3, [pc, #68]	; (8001eac <_sbrk+0x64>)
 8001e66:	4a12      	ldr	r2, [pc, #72]	; (8001eb0 <_sbrk+0x68>)
 8001e68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e6a:	4b10      	ldr	r3, [pc, #64]	; (8001eac <_sbrk+0x64>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d207      	bcs.n	8001e88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e78:	f003 fa0a 	bl	8005290 <__errno>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	230c      	movs	r3, #12
 8001e80:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001e82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e86:	e009      	b.n	8001e9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e88:	4b08      	ldr	r3, [pc, #32]	; (8001eac <_sbrk+0x64>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e8e:	4b07      	ldr	r3, [pc, #28]	; (8001eac <_sbrk+0x64>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	4a05      	ldr	r2, [pc, #20]	; (8001eac <_sbrk+0x64>)
 8001e98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20020000 	.word	0x20020000
 8001ea8:	00000400 	.word	0x00000400
 8001eac:	200120fc 	.word	0x200120fc
 8001eb0:	20016488 	.word	0x20016488

08001eb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eb8:	4b08      	ldr	r3, [pc, #32]	; (8001edc <SystemInit+0x28>)
 8001eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ebe:	4a07      	ldr	r2, [pc, #28]	; (8001edc <SystemInit+0x28>)
 8001ec0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ec4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ec8:	4b04      	ldr	r3, [pc, #16]	; (8001edc <SystemInit+0x28>)
 8001eca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ece:	609a      	str	r2, [r3, #8]
#endif
}
 8001ed0:	bf00      	nop
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	e000ed00 	.word	0xe000ed00

08001ee0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ee0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f18 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ee4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001ee6:	e003      	b.n	8001ef0 <LoopCopyDataInit>

08001ee8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ee8:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001eea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001eec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001eee:	3104      	adds	r1, #4

08001ef0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ef0:	480b      	ldr	r0, [pc, #44]	; (8001f20 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ef2:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ef4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ef6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ef8:	d3f6      	bcc.n	8001ee8 <CopyDataInit>
  ldr  r2, =_sbss
 8001efa:	4a0b      	ldr	r2, [pc, #44]	; (8001f28 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001efc:	e002      	b.n	8001f04 <LoopFillZerobss>

08001efe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001efe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f00:	f842 3b04 	str.w	r3, [r2], #4

08001f04 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f04:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001f06:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f08:	d3f9      	bcc.n	8001efe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f0a:	f7ff ffd3 	bl	8001eb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f0e:	f003 f9c5 	bl	800529c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f12:	f7ff f86f 	bl	8000ff4 <main>
  bx  lr    
 8001f16:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f18:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001f1c:	08006d88 	.word	0x08006d88
  ldr  r0, =_sdata
 8001f20:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001f24:	2000009c 	.word	0x2000009c
  ldr  r2, =_sbss
 8001f28:	200000a0 	.word	0x200000a0
  ldr  r3, = _ebss
 8001f2c:	20016488 	.word	0x20016488

08001f30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f30:	e7fe      	b.n	8001f30 <ADC_IRQHandler>
	...

08001f34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f38:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <HAL_Init+0x40>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a0d      	ldr	r2, [pc, #52]	; (8001f74 <HAL_Init+0x40>)
 8001f3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f44:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <HAL_Init+0x40>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a0a      	ldr	r2, [pc, #40]	; (8001f74 <HAL_Init+0x40>)
 8001f4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f50:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <HAL_Init+0x40>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a07      	ldr	r2, [pc, #28]	; (8001f74 <HAL_Init+0x40>)
 8001f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f5c:	2003      	movs	r0, #3
 8001f5e:	f000 fd0b 	bl	8002978 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f62:	2000      	movs	r0, #0
 8001f64:	f000 f808 	bl	8001f78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f68:	f7ff fcd4 	bl	8001914 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40023c00 	.word	0x40023c00

08001f78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f80:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <HAL_InitTick+0x54>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	4b12      	ldr	r3, [pc, #72]	; (8001fd0 <HAL_InitTick+0x58>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f96:	4618      	mov	r0, r3
 8001f98:	f000 fd23 	bl	80029e2 <HAL_SYSTICK_Config>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e00e      	b.n	8001fc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b0f      	cmp	r3, #15
 8001faa:	d80a      	bhi.n	8001fc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fac:	2200      	movs	r2, #0
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fb4:	f000 fceb 	bl	800298e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fb8:	4a06      	ldr	r2, [pc, #24]	; (8001fd4 <HAL_InitTick+0x5c>)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	e000      	b.n	8001fc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	2000002c 	.word	0x2000002c
 8001fd0:	20000034 	.word	0x20000034
 8001fd4:	20000030 	.word	0x20000030

08001fd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fdc:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <HAL_IncTick+0x20>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <HAL_IncTick+0x24>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	4a04      	ldr	r2, [pc, #16]	; (8001ffc <HAL_IncTick+0x24>)
 8001fea:	6013      	str	r3, [r2, #0]
}
 8001fec:	bf00      	nop
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	20000034 	.word	0x20000034
 8001ffc:	20016480 	.word	0x20016480

08002000 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  return uwTick;
 8002004:	4b03      	ldr	r3, [pc, #12]	; (8002014 <HAL_GetTick+0x14>)
 8002006:	681b      	ldr	r3, [r3, #0]
}
 8002008:	4618      	mov	r0, r3
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	20016480 	.word	0x20016480

08002018 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002020:	2300      	movs	r3, #0
 8002022:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e033      	b.n	8002096 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	2b00      	cmp	r3, #0
 8002034:	d109      	bne.n	800204a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7ff fc94 	bl	8001964 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	f003 0310 	and.w	r3, r3, #16
 8002052:	2b00      	cmp	r3, #0
 8002054:	d118      	bne.n	8002088 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800205e:	f023 0302 	bic.w	r3, r3, #2
 8002062:	f043 0202 	orr.w	r2, r3, #2
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 fa36 	bl	80024dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	f023 0303 	bic.w	r3, r3, #3
 800207e:	f043 0201 	orr.w	r2, r3, #1
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	641a      	str	r2, [r3, #64]	; 0x40
 8002086:	e001      	b.n	800208c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002094:	7bfb      	ldrb	r3, [r7, #15]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
	...

080020a0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80020ac:	2300      	movs	r3, #0
 80020ae:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d101      	bne.n	80020be <HAL_ADC_Start_DMA+0x1e>
 80020ba:	2302      	movs	r3, #2
 80020bc:	e0cc      	b.n	8002258 <HAL_ADC_Start_DMA+0x1b8>
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d018      	beq.n	8002106 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	689a      	ldr	r2, [r3, #8]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f042 0201 	orr.w	r2, r2, #1
 80020e2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80020e4:	4b5e      	ldr	r3, [pc, #376]	; (8002260 <HAL_ADC_Start_DMA+0x1c0>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a5e      	ldr	r2, [pc, #376]	; (8002264 <HAL_ADC_Start_DMA+0x1c4>)
 80020ea:	fba2 2303 	umull	r2, r3, r2, r3
 80020ee:	0c9a      	lsrs	r2, r3, #18
 80020f0:	4613      	mov	r3, r2
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	4413      	add	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80020f8:	e002      	b.n	8002100 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	3b01      	subs	r3, #1
 80020fe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f9      	bne.n	80020fa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b01      	cmp	r3, #1
 8002112:	f040 80a0 	bne.w	8002256 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800211e:	f023 0301 	bic.w	r3, r3, #1
 8002122:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002134:	2b00      	cmp	r3, #0
 8002136:	d007      	beq.n	8002148 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002140:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002150:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002154:	d106      	bne.n	8002164 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215a:	f023 0206 	bic.w	r2, r3, #6
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	645a      	str	r2, [r3, #68]	; 0x44
 8002162:	e002      	b.n	800216a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002172:	4b3d      	ldr	r3, [pc, #244]	; (8002268 <HAL_ADC_Start_DMA+0x1c8>)
 8002174:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800217a:	4a3c      	ldr	r2, [pc, #240]	; (800226c <HAL_ADC_Start_DMA+0x1cc>)
 800217c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002182:	4a3b      	ldr	r2, [pc, #236]	; (8002270 <HAL_ADC_Start_DMA+0x1d0>)
 8002184:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800218a:	4a3a      	ldr	r2, [pc, #232]	; (8002274 <HAL_ADC_Start_DMA+0x1d4>)
 800218c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002196:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80021a6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021b6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	334c      	adds	r3, #76	; 0x4c
 80021c2:	4619      	mov	r1, r3
 80021c4:	68ba      	ldr	r2, [r7, #8]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f000 fe82 	bl	8002ed0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f003 031f 	and.w	r3, r3, #31
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d12a      	bne.n	800222e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a26      	ldr	r2, [pc, #152]	; (8002278 <HAL_ADC_Start_DMA+0x1d8>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d015      	beq.n	800220e <HAL_ADC_Start_DMA+0x16e>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a25      	ldr	r2, [pc, #148]	; (800227c <HAL_ADC_Start_DMA+0x1dc>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d105      	bne.n	80021f8 <HAL_ADC_Start_DMA+0x158>
 80021ec:	4b1e      	ldr	r3, [pc, #120]	; (8002268 <HAL_ADC_Start_DMA+0x1c8>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 031f 	and.w	r3, r3, #31
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d00a      	beq.n	800220e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a20      	ldr	r2, [pc, #128]	; (8002280 <HAL_ADC_Start_DMA+0x1e0>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d129      	bne.n	8002256 <HAL_ADC_Start_DMA+0x1b6>
 8002202:	4b19      	ldr	r3, [pc, #100]	; (8002268 <HAL_ADC_Start_DMA+0x1c8>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f003 031f 	and.w	r3, r3, #31
 800220a:	2b0f      	cmp	r3, #15
 800220c:	d823      	bhi.n	8002256 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d11c      	bne.n	8002256 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	689a      	ldr	r2, [r3, #8]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800222a:	609a      	str	r2, [r3, #8]
 800222c:	e013      	b.n	8002256 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a11      	ldr	r2, [pc, #68]	; (8002278 <HAL_ADC_Start_DMA+0x1d8>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d10e      	bne.n	8002256 <HAL_ADC_Start_DMA+0x1b6>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d107      	bne.n	8002256 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002254:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	3718      	adds	r7, #24
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	2000002c 	.word	0x2000002c
 8002264:	431bde83 	.word	0x431bde83
 8002268:	40012300 	.word	0x40012300
 800226c:	080026d5 	.word	0x080026d5
 8002270:	0800278f 	.word	0x0800278f
 8002274:	080027ab 	.word	0x080027ab
 8002278:	40012000 	.word	0x40012000
 800227c:	40012100 	.word	0x40012100
 8002280:	40012200 	.word	0x40012200

08002284 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022a2:	2300      	movs	r3, #0
 80022a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d101      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x1c>
 80022b0:	2302      	movs	r3, #2
 80022b2:	e105      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x228>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2b09      	cmp	r3, #9
 80022c2:	d925      	bls.n	8002310 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68d9      	ldr	r1, [r3, #12]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	461a      	mov	r2, r3
 80022d2:	4613      	mov	r3, r2
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	4413      	add	r3, r2
 80022d8:	3b1e      	subs	r3, #30
 80022da:	2207      	movs	r2, #7
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	43da      	mvns	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	400a      	ands	r2, r1
 80022e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68d9      	ldr	r1, [r3, #12]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	4618      	mov	r0, r3
 80022fc:	4603      	mov	r3, r0
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	4403      	add	r3, r0
 8002302:	3b1e      	subs	r3, #30
 8002304:	409a      	lsls	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	430a      	orrs	r2, r1
 800230c:	60da      	str	r2, [r3, #12]
 800230e:	e022      	b.n	8002356 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6919      	ldr	r1, [r3, #16]
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	b29b      	uxth	r3, r3
 800231c:	461a      	mov	r2, r3
 800231e:	4613      	mov	r3, r2
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	4413      	add	r3, r2
 8002324:	2207      	movs	r2, #7
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43da      	mvns	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	400a      	ands	r2, r1
 8002332:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6919      	ldr	r1, [r3, #16]
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	b29b      	uxth	r3, r3
 8002344:	4618      	mov	r0, r3
 8002346:	4603      	mov	r3, r0
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	4403      	add	r3, r0
 800234c:	409a      	lsls	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	430a      	orrs	r2, r1
 8002354:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b06      	cmp	r3, #6
 800235c:	d824      	bhi.n	80023a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	4613      	mov	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4413      	add	r3, r2
 800236e:	3b05      	subs	r3, #5
 8002370:	221f      	movs	r2, #31
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43da      	mvns	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	400a      	ands	r2, r1
 800237e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	b29b      	uxth	r3, r3
 800238c:	4618      	mov	r0, r3
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685a      	ldr	r2, [r3, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	3b05      	subs	r3, #5
 800239a:	fa00 f203 	lsl.w	r2, r0, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	430a      	orrs	r2, r1
 80023a4:	635a      	str	r2, [r3, #52]	; 0x34
 80023a6:	e04c      	b.n	8002442 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2b0c      	cmp	r3, #12
 80023ae:	d824      	bhi.n	80023fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	4613      	mov	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	3b23      	subs	r3, #35	; 0x23
 80023c2:	221f      	movs	r2, #31
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43da      	mvns	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	400a      	ands	r2, r1
 80023d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	b29b      	uxth	r3, r3
 80023de:	4618      	mov	r0, r3
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	4613      	mov	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	3b23      	subs	r3, #35	; 0x23
 80023ec:	fa00 f203 	lsl.w	r2, r0, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	631a      	str	r2, [r3, #48]	; 0x30
 80023f8:	e023      	b.n	8002442 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	4613      	mov	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	3b41      	subs	r3, #65	; 0x41
 800240c:	221f      	movs	r2, #31
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43da      	mvns	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	400a      	ands	r2, r1
 800241a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	b29b      	uxth	r3, r3
 8002428:	4618      	mov	r0, r3
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	4613      	mov	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	3b41      	subs	r3, #65	; 0x41
 8002436:	fa00 f203 	lsl.w	r2, r0, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	430a      	orrs	r2, r1
 8002440:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002442:	4b22      	ldr	r3, [pc, #136]	; (80024cc <HAL_ADC_ConfigChannel+0x234>)
 8002444:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a21      	ldr	r2, [pc, #132]	; (80024d0 <HAL_ADC_ConfigChannel+0x238>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d109      	bne.n	8002464 <HAL_ADC_ConfigChannel+0x1cc>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2b12      	cmp	r3, #18
 8002456:	d105      	bne.n	8002464 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a19      	ldr	r2, [pc, #100]	; (80024d0 <HAL_ADC_ConfigChannel+0x238>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d123      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x21e>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2b10      	cmp	r3, #16
 8002474:	d003      	beq.n	800247e <HAL_ADC_ConfigChannel+0x1e6>
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2b11      	cmp	r3, #17
 800247c:	d11b      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2b10      	cmp	r3, #16
 8002490:	d111      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002492:	4b10      	ldr	r3, [pc, #64]	; (80024d4 <HAL_ADC_ConfigChannel+0x23c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a10      	ldr	r2, [pc, #64]	; (80024d8 <HAL_ADC_ConfigChannel+0x240>)
 8002498:	fba2 2303 	umull	r2, r3, r2, r3
 800249c:	0c9a      	lsrs	r2, r3, #18
 800249e:	4613      	mov	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4413      	add	r3, r2
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024a8:	e002      	b.n	80024b0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	3b01      	subs	r3, #1
 80024ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1f9      	bne.n	80024aa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	40012300 	.word	0x40012300
 80024d0:	40012000 	.word	0x40012000
 80024d4:	2000002c 	.word	0x2000002c
 80024d8:	431bde83 	.word	0x431bde83

080024dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024e4:	4b79      	ldr	r3, [pc, #484]	; (80026cc <ADC_Init+0x1f0>)
 80024e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	431a      	orrs	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002510:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6859      	ldr	r1, [r3, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	021a      	lsls	r2, r3, #8
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002534:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	6859      	ldr	r1, [r3, #4]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689a      	ldr	r2, [r3, #8]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002556:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6899      	ldr	r1, [r3, #8]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68da      	ldr	r2, [r3, #12]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	430a      	orrs	r2, r1
 8002568:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256e:	4a58      	ldr	r2, [pc, #352]	; (80026d0 <ADC_Init+0x1f4>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d022      	beq.n	80025ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002582:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6899      	ldr	r1, [r3, #8]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	430a      	orrs	r2, r1
 8002594:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6899      	ldr	r1, [r3, #8]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	609a      	str	r2, [r3, #8]
 80025b8:	e00f      	b.n	80025da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 0202 	bic.w	r2, r2, #2
 80025e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	6899      	ldr	r1, [r3, #8]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	7e1b      	ldrb	r3, [r3, #24]
 80025f4:	005a      	lsls	r2, r3, #1
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d01b      	beq.n	8002640 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002616:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002626:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6859      	ldr	r1, [r3, #4]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002632:	3b01      	subs	r3, #1
 8002634:	035a      	lsls	r2, r3, #13
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	e007      	b.n	8002650 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	685a      	ldr	r2, [r3, #4]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800264e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800265e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	3b01      	subs	r3, #1
 800266c:	051a      	lsls	r2, r3, #20
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	430a      	orrs	r2, r1
 8002674:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002684:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6899      	ldr	r1, [r3, #8]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002692:	025a      	lsls	r2, r3, #9
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	430a      	orrs	r2, r1
 800269a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	689a      	ldr	r2, [r3, #8]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6899      	ldr	r1, [r3, #8]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	029a      	lsls	r2, r3, #10
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	430a      	orrs	r2, r1
 80026be:	609a      	str	r2, [r3, #8]
}
 80026c0:	bf00      	nop
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	40012300 	.word	0x40012300
 80026d0:	0f000001 	.word	0x0f000001

080026d4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d13c      	bne.n	8002768 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d12b      	bne.n	8002760 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800270c:	2b00      	cmp	r3, #0
 800270e:	d127      	bne.n	8002760 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002716:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800271a:	2b00      	cmp	r3, #0
 800271c:	d006      	beq.n	800272c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002728:	2b00      	cmp	r3, #0
 800272a:	d119      	bne.n	8002760 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 0220 	bic.w	r2, r2, #32
 800273a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d105      	bne.n	8002760 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002758:	f043 0201 	orr.w	r2, r3, #1
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f7ff f889 	bl	8001878 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002766:	e00e      	b.n	8002786 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276c:	f003 0310 	and.w	r3, r3, #16
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f7ff fd85 	bl	8002284 <HAL_ADC_ErrorCallback>
}
 800277a:	e004      	b.n	8002786 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	4798      	blx	r3
}
 8002786:	bf00      	nop
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b084      	sub	sp, #16
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f7ff f849 	bl	8001834 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027a2:	bf00      	nop
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b084      	sub	sp, #16
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2240      	movs	r2, #64	; 0x40
 80027bc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c2:	f043 0204 	orr.w	r2, r3, #4
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f7ff fd5a 	bl	8002284 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027d0:	bf00      	nop
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027e8:	4b0c      	ldr	r3, [pc, #48]	; (800281c <__NVIC_SetPriorityGrouping+0x44>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ee:	68ba      	ldr	r2, [r7, #8]
 80027f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027f4:	4013      	ands	r3, r2
 80027f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002800:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002808:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800280a:	4a04      	ldr	r2, [pc, #16]	; (800281c <__NVIC_SetPriorityGrouping+0x44>)
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	60d3      	str	r3, [r2, #12]
}
 8002810:	bf00      	nop
 8002812:	3714      	adds	r7, #20
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr
 800281c:	e000ed00 	.word	0xe000ed00

08002820 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002824:	4b04      	ldr	r3, [pc, #16]	; (8002838 <__NVIC_GetPriorityGrouping+0x18>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	0a1b      	lsrs	r3, r3, #8
 800282a:	f003 0307 	and.w	r3, r3, #7
}
 800282e:	4618      	mov	r0, r3
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	e000ed00 	.word	0xe000ed00

0800283c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	4603      	mov	r3, r0
 8002844:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284a:	2b00      	cmp	r3, #0
 800284c:	db0b      	blt.n	8002866 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800284e:	79fb      	ldrb	r3, [r7, #7]
 8002850:	f003 021f 	and.w	r2, r3, #31
 8002854:	4907      	ldr	r1, [pc, #28]	; (8002874 <__NVIC_EnableIRQ+0x38>)
 8002856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285a:	095b      	lsrs	r3, r3, #5
 800285c:	2001      	movs	r0, #1
 800285e:	fa00 f202 	lsl.w	r2, r0, r2
 8002862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	e000e100 	.word	0xe000e100

08002878 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	6039      	str	r1, [r7, #0]
 8002882:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002888:	2b00      	cmp	r3, #0
 800288a:	db0a      	blt.n	80028a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	b2da      	uxtb	r2, r3
 8002890:	490c      	ldr	r1, [pc, #48]	; (80028c4 <__NVIC_SetPriority+0x4c>)
 8002892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002896:	0112      	lsls	r2, r2, #4
 8002898:	b2d2      	uxtb	r2, r2
 800289a:	440b      	add	r3, r1
 800289c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028a0:	e00a      	b.n	80028b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	4908      	ldr	r1, [pc, #32]	; (80028c8 <__NVIC_SetPriority+0x50>)
 80028a8:	79fb      	ldrb	r3, [r7, #7]
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	3b04      	subs	r3, #4
 80028b0:	0112      	lsls	r2, r2, #4
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	440b      	add	r3, r1
 80028b6:	761a      	strb	r2, [r3, #24]
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	e000e100 	.word	0xe000e100
 80028c8:	e000ed00 	.word	0xe000ed00

080028cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b089      	sub	sp, #36	; 0x24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	f1c3 0307 	rsb	r3, r3, #7
 80028e6:	2b04      	cmp	r3, #4
 80028e8:	bf28      	it	cs
 80028ea:	2304      	movcs	r3, #4
 80028ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	3304      	adds	r3, #4
 80028f2:	2b06      	cmp	r3, #6
 80028f4:	d902      	bls.n	80028fc <NVIC_EncodePriority+0x30>
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	3b03      	subs	r3, #3
 80028fa:	e000      	b.n	80028fe <NVIC_EncodePriority+0x32>
 80028fc:	2300      	movs	r3, #0
 80028fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002900:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	43da      	mvns	r2, r3
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	401a      	ands	r2, r3
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002914:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	fa01 f303 	lsl.w	r3, r1, r3
 800291e:	43d9      	mvns	r1, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002924:	4313      	orrs	r3, r2
         );
}
 8002926:	4618      	mov	r0, r3
 8002928:	3724      	adds	r7, #36	; 0x24
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
	...

08002934 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	3b01      	subs	r3, #1
 8002940:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002944:	d301      	bcc.n	800294a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002946:	2301      	movs	r3, #1
 8002948:	e00f      	b.n	800296a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800294a:	4a0a      	ldr	r2, [pc, #40]	; (8002974 <SysTick_Config+0x40>)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	3b01      	subs	r3, #1
 8002950:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002952:	210f      	movs	r1, #15
 8002954:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002958:	f7ff ff8e 	bl	8002878 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800295c:	4b05      	ldr	r3, [pc, #20]	; (8002974 <SysTick_Config+0x40>)
 800295e:	2200      	movs	r2, #0
 8002960:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002962:	4b04      	ldr	r3, [pc, #16]	; (8002974 <SysTick_Config+0x40>)
 8002964:	2207      	movs	r2, #7
 8002966:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	e000e010 	.word	0xe000e010

08002978 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f7ff ff29 	bl	80027d8 <__NVIC_SetPriorityGrouping>
}
 8002986:	bf00      	nop
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800298e:	b580      	push	{r7, lr}
 8002990:	b086      	sub	sp, #24
 8002992:	af00      	add	r7, sp, #0
 8002994:	4603      	mov	r3, r0
 8002996:	60b9      	str	r1, [r7, #8]
 8002998:	607a      	str	r2, [r7, #4]
 800299a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800299c:	2300      	movs	r3, #0
 800299e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029a0:	f7ff ff3e 	bl	8002820 <__NVIC_GetPriorityGrouping>
 80029a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	68b9      	ldr	r1, [r7, #8]
 80029aa:	6978      	ldr	r0, [r7, #20]
 80029ac:	f7ff ff8e 	bl	80028cc <NVIC_EncodePriority>
 80029b0:	4602      	mov	r2, r0
 80029b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029b6:	4611      	mov	r1, r2
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff ff5d 	bl	8002878 <__NVIC_SetPriority>
}
 80029be:	bf00      	nop
 80029c0:	3718      	adds	r7, #24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b082      	sub	sp, #8
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	4603      	mov	r3, r0
 80029ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff ff31 	bl	800283c <__NVIC_EnableIRQ>
}
 80029da:	bf00      	nop
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b082      	sub	sp, #8
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7ff ffa2 	bl	8002934 <SysTick_Config>
 80029f0:	4603      	mov	r3, r0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d101      	bne.n	8002a0c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e014      	b.n	8002a36 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	791b      	ldrb	r3, [r3, #4]
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d105      	bne.n	8002a22 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f7ff f883 	bl	8001b28 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2202      	movs	r2, #2
 8002a26:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2201      	movs	r2, #1
 8002a32:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
	...

08002a40 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
 8002a4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	795b      	ldrb	r3, [r3, #5]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d101      	bne.n	8002a5e <HAL_DAC_Start_DMA+0x1e>
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	e08e      	b.n	8002b7c <HAL_DAC_Start_DMA+0x13c>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2201      	movs	r2, #1
 8002a62:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2202      	movs	r2, #2
 8002a68:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d12a      	bne.n	8002ac6 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	4a43      	ldr	r2, [pc, #268]	; (8002b84 <HAL_DAC_Start_DMA+0x144>)
 8002a76:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	4a42      	ldr	r2, [pc, #264]	; (8002b88 <HAL_DAC_Start_DMA+0x148>)
 8002a7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	4a41      	ldr	r2, [pc, #260]	; (8002b8c <HAL_DAC_Start_DMA+0x14c>)
 8002a86:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002a96:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8002a98:	6a3b      	ldr	r3, [r7, #32]
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	d009      	beq.n	8002ab2 <HAL_DAC_Start_DMA+0x72>
 8002a9e:	2b08      	cmp	r3, #8
 8002aa0:	d00c      	beq.n	8002abc <HAL_DAC_Start_DMA+0x7c>
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d000      	beq.n	8002aa8 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002aa6:	e039      	b.n	8002b1c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	3308      	adds	r3, #8
 8002aae:	617b      	str	r3, [r7, #20]
        break;
 8002ab0:	e034      	b.n	8002b1c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	330c      	adds	r3, #12
 8002ab8:	617b      	str	r3, [r7, #20]
        break;
 8002aba:	e02f      	b.n	8002b1c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	3310      	adds	r3, #16
 8002ac2:	617b      	str	r3, [r7, #20]
        break;
 8002ac4:	e02a      	b.n	8002b1c <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	4a31      	ldr	r2, [pc, #196]	; (8002b90 <HAL_DAC_Start_DMA+0x150>)
 8002acc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	4a30      	ldr	r2, [pc, #192]	; (8002b94 <HAL_DAC_Start_DMA+0x154>)
 8002ad4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	4a2f      	ldr	r2, [pc, #188]	; (8002b98 <HAL_DAC_Start_DMA+0x158>)
 8002adc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002aec:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 8002aee:	6a3b      	ldr	r3, [r7, #32]
 8002af0:	2b04      	cmp	r3, #4
 8002af2:	d009      	beq.n	8002b08 <HAL_DAC_Start_DMA+0xc8>
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	d00c      	beq.n	8002b12 <HAL_DAC_Start_DMA+0xd2>
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d000      	beq.n	8002afe <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002afc:	e00e      	b.n	8002b1c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	3314      	adds	r3, #20
 8002b04:	617b      	str	r3, [r7, #20]
        break;
 8002b06:	e009      	b.n	8002b1c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	3318      	adds	r3, #24
 8002b0e:	617b      	str	r3, [r7, #20]
        break;
 8002b10:	e004      	b.n	8002b1c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	331c      	adds	r3, #28
 8002b18:	617b      	str	r3, [r7, #20]
        break;
 8002b1a:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10f      	bne.n	8002b42 <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b30:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6898      	ldr	r0, [r3, #8]
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	f000 f9c8 	bl	8002ed0 <HAL_DMA_Start_IT>
 8002b40:	e00e      	b.n	8002b60 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002b50:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	68d8      	ldr	r0, [r3, #12]
 8002b56:	6879      	ldr	r1, [r7, #4]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	f000 f9b8 	bl	8002ed0 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6819      	ldr	r1, [r3, #0]
 8002b66:	2201      	movs	r2, #1
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	409a      	lsls	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	430a      	orrs	r2, r1
 8002b72:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	08002c5f 	.word	0x08002c5f
 8002b88:	08002c81 	.word	0x08002c81
 8002b8c:	08002c9d 	.word	0x08002c9d
 8002b90:	08002d07 	.word	0x08002d07
 8002b94:	08002d29 	.word	0x08002d29
 8002b98:	08002d45 	.word	0x08002d45

08002b9c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b087      	sub	sp, #28
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	795b      	ldrb	r3, [r3, #5]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d101      	bne.n	8002be4 <HAL_DAC_ConfigChannel+0x20>
 8002be0:	2302      	movs	r3, #2
 8002be2:	e036      	b.n	8002c52 <HAL_DAC_ConfigChannel+0x8e>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2201      	movs	r2, #1
 8002be8:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2202      	movs	r2, #2
 8002bee:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002bf8:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	43db      	mvns	r3, r3
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	4013      	ands	r3, r2
 8002c08:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6819      	ldr	r1, [r3, #0]
 8002c32:	22c0      	movs	r2, #192	; 0xc0
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	43da      	mvns	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	400a      	ands	r2, r1
 8002c42:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2201      	movs	r2, #1
 8002c48:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	371c      	adds	r7, #28
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b084      	sub	sp, #16
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6a:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f7fe fdd7 	bl	8001820 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2201      	movs	r2, #1
 8002c76:	711a      	strb	r2, [r3, #4]
}
 8002c78:	bf00      	nop
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8c:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f7ff ff84 	bl	8002b9c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002c94:	bf00      	nop
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca8:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	f043 0204 	orr.w	r2, r3, #4
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f7ff ff7a 	bl	8002bb0 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	711a      	strb	r2, [r3, #4]
}
 8002cc2:	bf00      	nop
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8002cd2:	bf00      	nop
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr

08002cde <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b083      	sub	sp, #12
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr

08002cf2 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b083      	sub	sp, #12
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr

08002d06 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b084      	sub	sp, #16
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d12:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f7ff ffd8 	bl	8002cca <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	711a      	strb	r2, [r3, #4]
}
 8002d20:	bf00      	nop
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d34:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f7ff ffd1 	bl	8002cde <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002d3c:	bf00      	nop
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d50:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	f043 0204 	orr.w	r2, r3, #4
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f7ff ffc7 	bl	8002cf2 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2201      	movs	r2, #1
 8002d68:	711a      	strb	r2, [r3, #4]
}
 8002d6a:	bf00      	nop
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
	...

08002d74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d80:	f7ff f93e 	bl	8002000 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e099      	b.n	8002ec4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 0201 	bic.w	r2, r2, #1
 8002dae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002db0:	e00f      	b.n	8002dd2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002db2:	f7ff f925 	bl	8002000 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b05      	cmp	r3, #5
 8002dbe:	d908      	bls.n	8002dd2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2203      	movs	r2, #3
 8002dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e078      	b.n	8002ec4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1e8      	bne.n	8002db2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	4b38      	ldr	r3, [pc, #224]	; (8002ecc <HAL_DMA_Init+0x158>)
 8002dec:	4013      	ands	r3, r2
 8002dee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	2b04      	cmp	r3, #4
 8002e2a:	d107      	bne.n	8002e3c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e34:	4313      	orrs	r3, r2
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	f023 0307 	bic.w	r3, r3, #7
 8002e52:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d117      	bne.n	8002e96 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00e      	beq.n	8002e96 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 fa6f 	bl	800335c <DMA_CheckFifoParam>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d008      	beq.n	8002e96 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2240      	movs	r2, #64	; 0x40
 8002e88:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002e92:	2301      	movs	r3, #1
 8002e94:	e016      	b.n	8002ec4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 fa26 	bl	80032f0 <DMA_CalcBaseAndBitshift>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eac:	223f      	movs	r2, #63	; 0x3f
 8002eae:	409a      	lsls	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3718      	adds	r7, #24
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	f010803f 	.word	0xf010803f

08002ed0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
 8002edc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d101      	bne.n	8002ef6 <HAL_DMA_Start_IT+0x26>
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	e040      	b.n	8002f78 <HAL_DMA_Start_IT+0xa8>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d12f      	bne.n	8002f6a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	68b9      	ldr	r1, [r7, #8]
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f000 f9b8 	bl	8003294 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f28:	223f      	movs	r2, #63	; 0x3f
 8002f2a:	409a      	lsls	r2, r3
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f042 0216 	orr.w	r2, r2, #22
 8002f3e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d007      	beq.n	8002f58 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0208 	orr.w	r2, r2, #8
 8002f56:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 0201 	orr.w	r2, r2, #1
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	e005      	b.n	8002f76 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f72:	2302      	movs	r3, #2
 8002f74:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3718      	adds	r7, #24
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f8c:	4b92      	ldr	r3, [pc, #584]	; (80031d8 <HAL_DMA_IRQHandler+0x258>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a92      	ldr	r2, [pc, #584]	; (80031dc <HAL_DMA_IRQHandler+0x25c>)
 8002f92:	fba2 2303 	umull	r2, r3, r2, r3
 8002f96:	0a9b      	lsrs	r3, r3, #10
 8002f98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002faa:	2208      	movs	r2, #8
 8002fac:	409a      	lsls	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d01a      	beq.n	8002fec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d013      	beq.n	8002fec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 0204 	bic.w	r2, r2, #4
 8002fd2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd8:	2208      	movs	r2, #8
 8002fda:	409a      	lsls	r2, r3
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe4:	f043 0201 	orr.w	r2, r3, #1
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	409a      	lsls	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d012      	beq.n	8003022 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00b      	beq.n	8003022 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300e:	2201      	movs	r2, #1
 8003010:	409a      	lsls	r2, r3
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301a:	f043 0202 	orr.w	r2, r3, #2
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003026:	2204      	movs	r2, #4
 8003028:	409a      	lsls	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	4013      	ands	r3, r2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d012      	beq.n	8003058 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00b      	beq.n	8003058 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003044:	2204      	movs	r2, #4
 8003046:	409a      	lsls	r2, r3
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003050:	f043 0204 	orr.w	r2, r3, #4
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800305c:	2210      	movs	r2, #16
 800305e:	409a      	lsls	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4013      	ands	r3, r2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d043      	beq.n	80030f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0308 	and.w	r3, r3, #8
 8003072:	2b00      	cmp	r3, #0
 8003074:	d03c      	beq.n	80030f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800307a:	2210      	movs	r2, #16
 800307c:	409a      	lsls	r2, r3
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d018      	beq.n	80030c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d108      	bne.n	80030b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d024      	beq.n	80030f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	4798      	blx	r3
 80030ae:	e01f      	b.n	80030f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d01b      	beq.n	80030f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	4798      	blx	r3
 80030c0:	e016      	b.n	80030f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d107      	bne.n	80030e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0208 	bic.w	r2, r2, #8
 80030de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d003      	beq.n	80030f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f4:	2220      	movs	r2, #32
 80030f6:	409a      	lsls	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4013      	ands	r3, r2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 808e 	beq.w	800321e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0310 	and.w	r3, r3, #16
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 8086 	beq.w	800321e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003116:	2220      	movs	r2, #32
 8003118:	409a      	lsls	r2, r3
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b05      	cmp	r3, #5
 8003128:	d136      	bne.n	8003198 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 0216 	bic.w	r2, r2, #22
 8003138:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	695a      	ldr	r2, [r3, #20]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003148:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	2b00      	cmp	r3, #0
 8003150:	d103      	bne.n	800315a <HAL_DMA_IRQHandler+0x1da>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003156:	2b00      	cmp	r3, #0
 8003158:	d007      	beq.n	800316a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 0208 	bic.w	r2, r2, #8
 8003168:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800316e:	223f      	movs	r2, #63	; 0x3f
 8003170:	409a      	lsls	r2, r3
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800318a:	2b00      	cmp	r3, #0
 800318c:	d07d      	beq.n	800328a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	4798      	blx	r3
        }
        return;
 8003196:	e078      	b.n	800328a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d01c      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d108      	bne.n	80031c6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d030      	beq.n	800321e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	4798      	blx	r3
 80031c4:	e02b      	b.n	800321e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d027      	beq.n	800321e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	4798      	blx	r3
 80031d6:	e022      	b.n	800321e <HAL_DMA_IRQHandler+0x29e>
 80031d8:	2000002c 	.word	0x2000002c
 80031dc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10f      	bne.n	800320e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 0210 	bic.w	r2, r2, #16
 80031fc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003222:	2b00      	cmp	r3, #0
 8003224:	d032      	beq.n	800328c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d022      	beq.n	8003278 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2205      	movs	r2, #5
 8003236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 0201 	bic.w	r2, r2, #1
 8003248:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	3301      	adds	r3, #1
 800324e:	60bb      	str	r3, [r7, #8]
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	429a      	cmp	r2, r3
 8003254:	d307      	bcc.n	8003266 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1f2      	bne.n	800324a <HAL_DMA_IRQHandler+0x2ca>
 8003264:	e000      	b.n	8003268 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003266:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800327c:	2b00      	cmp	r3, #0
 800327e:	d005      	beq.n	800328c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	4798      	blx	r3
 8003288:	e000      	b.n	800328c <HAL_DMA_IRQHandler+0x30c>
        return;
 800328a:	bf00      	nop
    }
  }
}
 800328c:	3718      	adds	r7, #24
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop

08003294 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
 80032a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80032b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	2b40      	cmp	r3, #64	; 0x40
 80032c0:	d108      	bne.n	80032d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80032d2:	e007      	b.n	80032e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68ba      	ldr	r2, [r7, #8]
 80032da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	60da      	str	r2, [r3, #12]
}
 80032e4:	bf00      	nop
 80032e6:	3714      	adds	r7, #20
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	3b10      	subs	r3, #16
 8003300:	4a14      	ldr	r2, [pc, #80]	; (8003354 <DMA_CalcBaseAndBitshift+0x64>)
 8003302:	fba2 2303 	umull	r2, r3, r2, r3
 8003306:	091b      	lsrs	r3, r3, #4
 8003308:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800330a:	4a13      	ldr	r2, [pc, #76]	; (8003358 <DMA_CalcBaseAndBitshift+0x68>)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	4413      	add	r3, r2
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	461a      	mov	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2b03      	cmp	r3, #3
 800331c:	d909      	bls.n	8003332 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003326:	f023 0303 	bic.w	r3, r3, #3
 800332a:	1d1a      	adds	r2, r3, #4
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	659a      	str	r2, [r3, #88]	; 0x58
 8003330:	e007      	b.n	8003342 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800333a:	f023 0303 	bic.w	r3, r3, #3
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003346:	4618      	mov	r0, r3
 8003348:	3714      	adds	r7, #20
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	aaaaaaab 	.word	0xaaaaaaab
 8003358:	08006b60 	.word	0x08006b60

0800335c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003364:	2300      	movs	r3, #0
 8003366:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d11f      	bne.n	80033b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	2b03      	cmp	r3, #3
 800337a:	d855      	bhi.n	8003428 <DMA_CheckFifoParam+0xcc>
 800337c:	a201      	add	r2, pc, #4	; (adr r2, 8003384 <DMA_CheckFifoParam+0x28>)
 800337e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003382:	bf00      	nop
 8003384:	08003395 	.word	0x08003395
 8003388:	080033a7 	.word	0x080033a7
 800338c:	08003395 	.word	0x08003395
 8003390:	08003429 	.word	0x08003429
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003398:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d045      	beq.n	800342c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033a4:	e042      	b.n	800342c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033ae:	d13f      	bne.n	8003430 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033b4:	e03c      	b.n	8003430 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033be:	d121      	bne.n	8003404 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	2b03      	cmp	r3, #3
 80033c4:	d836      	bhi.n	8003434 <DMA_CheckFifoParam+0xd8>
 80033c6:	a201      	add	r2, pc, #4	; (adr r2, 80033cc <DMA_CheckFifoParam+0x70>)
 80033c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033cc:	080033dd 	.word	0x080033dd
 80033d0:	080033e3 	.word	0x080033e3
 80033d4:	080033dd 	.word	0x080033dd
 80033d8:	080033f5 	.word	0x080033f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	73fb      	strb	r3, [r7, #15]
      break;
 80033e0:	e02f      	b.n	8003442 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d024      	beq.n	8003438 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033f2:	e021      	b.n	8003438 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033fc:	d11e      	bne.n	800343c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003402:	e01b      	b.n	800343c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	2b02      	cmp	r3, #2
 8003408:	d902      	bls.n	8003410 <DMA_CheckFifoParam+0xb4>
 800340a:	2b03      	cmp	r3, #3
 800340c:	d003      	beq.n	8003416 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800340e:	e018      	b.n	8003442 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	73fb      	strb	r3, [r7, #15]
      break;
 8003414:	e015      	b.n	8003442 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00e      	beq.n	8003440 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	73fb      	strb	r3, [r7, #15]
      break;
 8003426:	e00b      	b.n	8003440 <DMA_CheckFifoParam+0xe4>
      break;
 8003428:	bf00      	nop
 800342a:	e00a      	b.n	8003442 <DMA_CheckFifoParam+0xe6>
      break;
 800342c:	bf00      	nop
 800342e:	e008      	b.n	8003442 <DMA_CheckFifoParam+0xe6>
      break;
 8003430:	bf00      	nop
 8003432:	e006      	b.n	8003442 <DMA_CheckFifoParam+0xe6>
      break;
 8003434:	bf00      	nop
 8003436:	e004      	b.n	8003442 <DMA_CheckFifoParam+0xe6>
      break;
 8003438:	bf00      	nop
 800343a:	e002      	b.n	8003442 <DMA_CheckFifoParam+0xe6>
      break;   
 800343c:	bf00      	nop
 800343e:	e000      	b.n	8003442 <DMA_CheckFifoParam+0xe6>
      break;
 8003440:	bf00      	nop
    }
  } 
  
  return status; 
 8003442:	7bfb      	ldrb	r3, [r7, #15]
}
 8003444:	4618      	mov	r0, r3
 8003446:	3714      	adds	r7, #20
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003450:	b480      	push	{r7}
 8003452:	b089      	sub	sp, #36	; 0x24
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800345a:	2300      	movs	r3, #0
 800345c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800345e:	2300      	movs	r3, #0
 8003460:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003462:	2300      	movs	r3, #0
 8003464:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003466:	2300      	movs	r3, #0
 8003468:	61fb      	str	r3, [r7, #28]
 800346a:	e16b      	b.n	8003744 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800346c:	2201      	movs	r2, #1
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	4013      	ands	r3, r2
 800347e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	429a      	cmp	r2, r3
 8003486:	f040 815a 	bne.w	800373e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d00b      	beq.n	80034aa <HAL_GPIO_Init+0x5a>
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	2b02      	cmp	r3, #2
 8003498:	d007      	beq.n	80034aa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800349e:	2b11      	cmp	r3, #17
 80034a0:	d003      	beq.n	80034aa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2b12      	cmp	r3, #18
 80034a8:	d130      	bne.n	800350c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	2203      	movs	r2, #3
 80034b6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ba:	43db      	mvns	r3, r3
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	4013      	ands	r3, r2
 80034c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	68da      	ldr	r2, [r3, #12]
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	fa02 f303 	lsl.w	r3, r2, r3
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034e0:	2201      	movs	r2, #1
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	43db      	mvns	r3, r3
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	4013      	ands	r3, r2
 80034ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	091b      	lsrs	r3, r3, #4
 80034f6:	f003 0201 	and.w	r2, r3, #1
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	4313      	orrs	r3, r2
 8003504:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	2203      	movs	r2, #3
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	43db      	mvns	r3, r3
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	4013      	ands	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	4313      	orrs	r3, r2
 8003534:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2b02      	cmp	r3, #2
 8003542:	d003      	beq.n	800354c <HAL_GPIO_Init+0xfc>
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	2b12      	cmp	r3, #18
 800354a:	d123      	bne.n	8003594 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	08da      	lsrs	r2, r3, #3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3208      	adds	r2, #8
 8003554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003558:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	220f      	movs	r2, #15
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	43db      	mvns	r3, r3
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	4013      	ands	r3, r2
 800356e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	691a      	ldr	r2, [r3, #16]
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	f003 0307 	and.w	r3, r3, #7
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	4313      	orrs	r3, r2
 8003584:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	08da      	lsrs	r2, r3, #3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	3208      	adds	r2, #8
 800358e:	69b9      	ldr	r1, [r7, #24]
 8003590:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	2203      	movs	r2, #3
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	43db      	mvns	r3, r3
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	4013      	ands	r3, r2
 80035aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f003 0203 	and.w	r2, r3, #3
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	4313      	orrs	r3, r2
 80035c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f000 80b4 	beq.w	800373e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035d6:	2300      	movs	r3, #0
 80035d8:	60fb      	str	r3, [r7, #12]
 80035da:	4b5f      	ldr	r3, [pc, #380]	; (8003758 <HAL_GPIO_Init+0x308>)
 80035dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035de:	4a5e      	ldr	r2, [pc, #376]	; (8003758 <HAL_GPIO_Init+0x308>)
 80035e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035e4:	6453      	str	r3, [r2, #68]	; 0x44
 80035e6:	4b5c      	ldr	r3, [pc, #368]	; (8003758 <HAL_GPIO_Init+0x308>)
 80035e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ee:	60fb      	str	r3, [r7, #12]
 80035f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035f2:	4a5a      	ldr	r2, [pc, #360]	; (800375c <HAL_GPIO_Init+0x30c>)
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	089b      	lsrs	r3, r3, #2
 80035f8:	3302      	adds	r3, #2
 80035fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	f003 0303 	and.w	r3, r3, #3
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	220f      	movs	r2, #15
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	43db      	mvns	r3, r3
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	4013      	ands	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a51      	ldr	r2, [pc, #324]	; (8003760 <HAL_GPIO_Init+0x310>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d02b      	beq.n	8003676 <HAL_GPIO_Init+0x226>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a50      	ldr	r2, [pc, #320]	; (8003764 <HAL_GPIO_Init+0x314>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d025      	beq.n	8003672 <HAL_GPIO_Init+0x222>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a4f      	ldr	r2, [pc, #316]	; (8003768 <HAL_GPIO_Init+0x318>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d01f      	beq.n	800366e <HAL_GPIO_Init+0x21e>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a4e      	ldr	r2, [pc, #312]	; (800376c <HAL_GPIO_Init+0x31c>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d019      	beq.n	800366a <HAL_GPIO_Init+0x21a>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a4d      	ldr	r2, [pc, #308]	; (8003770 <HAL_GPIO_Init+0x320>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d013      	beq.n	8003666 <HAL_GPIO_Init+0x216>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a4c      	ldr	r2, [pc, #304]	; (8003774 <HAL_GPIO_Init+0x324>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d00d      	beq.n	8003662 <HAL_GPIO_Init+0x212>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a4b      	ldr	r2, [pc, #300]	; (8003778 <HAL_GPIO_Init+0x328>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d007      	beq.n	800365e <HAL_GPIO_Init+0x20e>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a4a      	ldr	r2, [pc, #296]	; (800377c <HAL_GPIO_Init+0x32c>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d101      	bne.n	800365a <HAL_GPIO_Init+0x20a>
 8003656:	2307      	movs	r3, #7
 8003658:	e00e      	b.n	8003678 <HAL_GPIO_Init+0x228>
 800365a:	2308      	movs	r3, #8
 800365c:	e00c      	b.n	8003678 <HAL_GPIO_Init+0x228>
 800365e:	2306      	movs	r3, #6
 8003660:	e00a      	b.n	8003678 <HAL_GPIO_Init+0x228>
 8003662:	2305      	movs	r3, #5
 8003664:	e008      	b.n	8003678 <HAL_GPIO_Init+0x228>
 8003666:	2304      	movs	r3, #4
 8003668:	e006      	b.n	8003678 <HAL_GPIO_Init+0x228>
 800366a:	2303      	movs	r3, #3
 800366c:	e004      	b.n	8003678 <HAL_GPIO_Init+0x228>
 800366e:	2302      	movs	r3, #2
 8003670:	e002      	b.n	8003678 <HAL_GPIO_Init+0x228>
 8003672:	2301      	movs	r3, #1
 8003674:	e000      	b.n	8003678 <HAL_GPIO_Init+0x228>
 8003676:	2300      	movs	r3, #0
 8003678:	69fa      	ldr	r2, [r7, #28]
 800367a:	f002 0203 	and.w	r2, r2, #3
 800367e:	0092      	lsls	r2, r2, #2
 8003680:	4093      	lsls	r3, r2
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	4313      	orrs	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003688:	4934      	ldr	r1, [pc, #208]	; (800375c <HAL_GPIO_Init+0x30c>)
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	089b      	lsrs	r3, r3, #2
 800368e:	3302      	adds	r3, #2
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003696:	4b3a      	ldr	r3, [pc, #232]	; (8003780 <HAL_GPIO_Init+0x330>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	43db      	mvns	r3, r3
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	4013      	ands	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036ba:	4a31      	ldr	r2, [pc, #196]	; (8003780 <HAL_GPIO_Init+0x330>)
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80036c0:	4b2f      	ldr	r3, [pc, #188]	; (8003780 <HAL_GPIO_Init+0x330>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	43db      	mvns	r3, r3
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	4013      	ands	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d003      	beq.n	80036e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036e4:	4a26      	ldr	r2, [pc, #152]	; (8003780 <HAL_GPIO_Init+0x330>)
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036ea:	4b25      	ldr	r3, [pc, #148]	; (8003780 <HAL_GPIO_Init+0x330>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	43db      	mvns	r3, r3
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	4013      	ands	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	4313      	orrs	r3, r2
 800370c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800370e:	4a1c      	ldr	r2, [pc, #112]	; (8003780 <HAL_GPIO_Init+0x330>)
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003714:	4b1a      	ldr	r3, [pc, #104]	; (8003780 <HAL_GPIO_Init+0x330>)
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	43db      	mvns	r3, r3
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	4013      	ands	r3, r2
 8003722:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d003      	beq.n	8003738 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	4313      	orrs	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003738:	4a11      	ldr	r2, [pc, #68]	; (8003780 <HAL_GPIO_Init+0x330>)
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	3301      	adds	r3, #1
 8003742:	61fb      	str	r3, [r7, #28]
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	2b0f      	cmp	r3, #15
 8003748:	f67f ae90 	bls.w	800346c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800374c:	bf00      	nop
 800374e:	3724      	adds	r7, #36	; 0x24
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr
 8003758:	40023800 	.word	0x40023800
 800375c:	40013800 	.word	0x40013800
 8003760:	40020000 	.word	0x40020000
 8003764:	40020400 	.word	0x40020400
 8003768:	40020800 	.word	0x40020800
 800376c:	40020c00 	.word	0x40020c00
 8003770:	40021000 	.word	0x40021000
 8003774:	40021400 	.word	0x40021400
 8003778:	40021800 	.word	0x40021800
 800377c:	40021c00 	.word	0x40021c00
 8003780:	40013c00 	.word	0x40013c00

08003784 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	460b      	mov	r3, r1
 800378e:	807b      	strh	r3, [r7, #2]
 8003790:	4613      	mov	r3, r2
 8003792:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003794:	787b      	ldrb	r3, [r7, #1]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800379a:	887a      	ldrh	r2, [r7, #2]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037a0:	e003      	b.n	80037aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037a2:	887b      	ldrh	r3, [r7, #2]
 80037a4:	041a      	lsls	r2, r3, #16
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	619a      	str	r2, [r3, #24]
}
 80037aa:	bf00      	nop
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
	...

080037b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e25b      	b.n	8003c82 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d075      	beq.n	80038c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037d6:	4ba3      	ldr	r3, [pc, #652]	; (8003a64 <HAL_RCC_OscConfig+0x2ac>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 030c 	and.w	r3, r3, #12
 80037de:	2b04      	cmp	r3, #4
 80037e0:	d00c      	beq.n	80037fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037e2:	4ba0      	ldr	r3, [pc, #640]	; (8003a64 <HAL_RCC_OscConfig+0x2ac>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037ea:	2b08      	cmp	r3, #8
 80037ec:	d112      	bne.n	8003814 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037ee:	4b9d      	ldr	r3, [pc, #628]	; (8003a64 <HAL_RCC_OscConfig+0x2ac>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037fa:	d10b      	bne.n	8003814 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037fc:	4b99      	ldr	r3, [pc, #612]	; (8003a64 <HAL_RCC_OscConfig+0x2ac>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d05b      	beq.n	80038c0 <HAL_RCC_OscConfig+0x108>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d157      	bne.n	80038c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e236      	b.n	8003c82 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800381c:	d106      	bne.n	800382c <HAL_RCC_OscConfig+0x74>
 800381e:	4b91      	ldr	r3, [pc, #580]	; (8003a64 <HAL_RCC_OscConfig+0x2ac>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a90      	ldr	r2, [pc, #576]	; (8003a64 <HAL_RCC_OscConfig+0x2ac>)
 8003824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003828:	6013      	str	r3, [r2, #0]
 800382a:	e01d      	b.n	8003868 <HAL_RCC_OscConfig+0xb0>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003834:	d10c      	bne.n	8003850 <HAL_RCC_OscConfig+0x98>
 8003836:	4b8b      	ldr	r3, [pc, #556]	; (8003a64 <HAL_RCC_OscConfig+0x2ac>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a8a      	ldr	r2, [pc, #552]	; (8003a64 <HAL_RCC_OscConfig+0x2ac>)
 800383c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003840:	6013      	str	r3, [r2, #0]
 8003842:	4b88      	ldr	r3, [pc, #544]	; (8003a64 <HAL_RCC_OscConfig+0x2ac>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a87      	ldr	r2, [pc, #540]	; (8003a64 <HAL_RCC_OscConfig+0x2ac>)
 8003848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800384c:	6013      	str	r3, [r2, #0]
 800384e:	e00b      	b.n	8003868 <HAL_RCC_OscConfig+0xb0>
 8003850:	4b84      	ldr	r3, [pc, #528]	; (8003a64 <HAL_RCC_OscConfig+0x2ac>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a83      	ldr	r2, [pc, #524]	; (8003a64 <HAL_RCC_OscConfig+0x2ac>)
 8003856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800385a:	6013      	str	r3, [r2, #0]
 800385c:	4b81      	ldr	r3, [pc, #516]	; (8003a64 <HAL_RCC_OscConfig+0x2ac>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a80      	ldr	r2, [pc, #512]	; (8003a64 <HAL_RCC_OscConfig+0x2ac>)
 8003862:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003866:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d013      	beq.n	8003898 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003870:	f7fe fbc6 	bl	8002000 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003878:	f7fe fbc2 	bl	8002000 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b64      	cmp	r3, #100	; 0x64
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e1fb      	b.n	8003c82 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800388a:	4b76      	ldr	r3, [pc, #472]	; (8003a64 <HAL_RCC_OscConfig+0x2ac>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0f0      	beq.n	8003878 <HAL_RCC_OscConfig+0xc0>
 8003896:	e014      	b.n	80038c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003898:	f7fe fbb2 	bl	8002000 <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038a0:	f7fe fbae 	bl	8002000 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b64      	cmp	r3, #100	; 0x64
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e1e7      	b.n	8003c82 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038b2:	4b6c      	ldr	r3, [pc, #432]	; (8003a64 <HAL_RCC_OscConfig+0x2ac>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1f0      	bne.n	80038a0 <HAL_RCC_OscConfig+0xe8>
 80038be:	e000      	b.n	80038c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d063      	beq.n	8003996 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038ce:	4b65      	ldr	r3, [pc, #404]	; (8003a64 <HAL_RCC_OscConfig+0x2ac>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 030c 	and.w	r3, r3, #12
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00b      	beq.n	80038f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038da:	4b62      	ldr	r3, [pc, #392]	; (8003a64 <HAL_RCC_OscConfig+0x2ac>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038e2:	2b08      	cmp	r3, #8
 80038e4:	d11c      	bne.n	8003920 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038e6:	4b5f      	ldr	r3, [pc, #380]	; (8003a64 <HAL_RCC_OscConfig+0x2ac>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d116      	bne.n	8003920 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038f2:	4b5c      	ldr	r3, [pc, #368]	; (8003a64 <HAL_RCC_OscConfig+0x2ac>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d005      	beq.n	800390a <HAL_RCC_OscConfig+0x152>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d001      	beq.n	800390a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e1bb      	b.n	8003c82 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800390a:	4b56      	ldr	r3, [pc, #344]	; (8003a64 <HAL_RCC_OscConfig+0x2ac>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	4952      	ldr	r1, [pc, #328]	; (8003a64 <HAL_RCC_OscConfig+0x2ac>)
 800391a:	4313      	orrs	r3, r2
 800391c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800391e:	e03a      	b.n	8003996 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d020      	beq.n	800396a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003928:	4b4f      	ldr	r3, [pc, #316]	; (8003a68 <HAL_RCC_OscConfig+0x2b0>)
 800392a:	2201      	movs	r2, #1
 800392c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392e:	f7fe fb67 	bl	8002000 <HAL_GetTick>
 8003932:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003934:	e008      	b.n	8003948 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003936:	f7fe fb63 	bl	8002000 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	2b02      	cmp	r3, #2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e19c      	b.n	8003c82 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003948:	4b46      	ldr	r3, [pc, #280]	; (8003a64 <HAL_RCC_OscConfig+0x2ac>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d0f0      	beq.n	8003936 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003954:	4b43      	ldr	r3, [pc, #268]	; (8003a64 <HAL_RCC_OscConfig+0x2ac>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	4940      	ldr	r1, [pc, #256]	; (8003a64 <HAL_RCC_OscConfig+0x2ac>)
 8003964:	4313      	orrs	r3, r2
 8003966:	600b      	str	r3, [r1, #0]
 8003968:	e015      	b.n	8003996 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800396a:	4b3f      	ldr	r3, [pc, #252]	; (8003a68 <HAL_RCC_OscConfig+0x2b0>)
 800396c:	2200      	movs	r2, #0
 800396e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003970:	f7fe fb46 	bl	8002000 <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003978:	f7fe fb42 	bl	8002000 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e17b      	b.n	8003c82 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800398a:	4b36      	ldr	r3, [pc, #216]	; (8003a64 <HAL_RCC_OscConfig+0x2ac>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1f0      	bne.n	8003978 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0308 	and.w	r3, r3, #8
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d030      	beq.n	8003a04 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d016      	beq.n	80039d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039aa:	4b30      	ldr	r3, [pc, #192]	; (8003a6c <HAL_RCC_OscConfig+0x2b4>)
 80039ac:	2201      	movs	r2, #1
 80039ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b0:	f7fe fb26 	bl	8002000 <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039b8:	f7fe fb22 	bl	8002000 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e15b      	b.n	8003c82 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ca:	4b26      	ldr	r3, [pc, #152]	; (8003a64 <HAL_RCC_OscConfig+0x2ac>)
 80039cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0f0      	beq.n	80039b8 <HAL_RCC_OscConfig+0x200>
 80039d6:	e015      	b.n	8003a04 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039d8:	4b24      	ldr	r3, [pc, #144]	; (8003a6c <HAL_RCC_OscConfig+0x2b4>)
 80039da:	2200      	movs	r2, #0
 80039dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039de:	f7fe fb0f 	bl	8002000 <HAL_GetTick>
 80039e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039e4:	e008      	b.n	80039f8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039e6:	f7fe fb0b 	bl	8002000 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d901      	bls.n	80039f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e144      	b.n	8003c82 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039f8:	4b1a      	ldr	r3, [pc, #104]	; (8003a64 <HAL_RCC_OscConfig+0x2ac>)
 80039fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1f0      	bne.n	80039e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f000 80a0 	beq.w	8003b52 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a12:	2300      	movs	r3, #0
 8003a14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a16:	4b13      	ldr	r3, [pc, #76]	; (8003a64 <HAL_RCC_OscConfig+0x2ac>)
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10f      	bne.n	8003a42 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a22:	2300      	movs	r3, #0
 8003a24:	60bb      	str	r3, [r7, #8]
 8003a26:	4b0f      	ldr	r3, [pc, #60]	; (8003a64 <HAL_RCC_OscConfig+0x2ac>)
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	4a0e      	ldr	r2, [pc, #56]	; (8003a64 <HAL_RCC_OscConfig+0x2ac>)
 8003a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a30:	6413      	str	r3, [r2, #64]	; 0x40
 8003a32:	4b0c      	ldr	r3, [pc, #48]	; (8003a64 <HAL_RCC_OscConfig+0x2ac>)
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a3a:	60bb      	str	r3, [r7, #8]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a42:	4b0b      	ldr	r3, [pc, #44]	; (8003a70 <HAL_RCC_OscConfig+0x2b8>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d121      	bne.n	8003a92 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a4e:	4b08      	ldr	r3, [pc, #32]	; (8003a70 <HAL_RCC_OscConfig+0x2b8>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a07      	ldr	r2, [pc, #28]	; (8003a70 <HAL_RCC_OscConfig+0x2b8>)
 8003a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a5a:	f7fe fad1 	bl	8002000 <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a60:	e011      	b.n	8003a86 <HAL_RCC_OscConfig+0x2ce>
 8003a62:	bf00      	nop
 8003a64:	40023800 	.word	0x40023800
 8003a68:	42470000 	.word	0x42470000
 8003a6c:	42470e80 	.word	0x42470e80
 8003a70:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a74:	f7fe fac4 	bl	8002000 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e0fd      	b.n	8003c82 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a86:	4b81      	ldr	r3, [pc, #516]	; (8003c8c <HAL_RCC_OscConfig+0x4d4>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0f0      	beq.n	8003a74 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d106      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x2f0>
 8003a9a:	4b7d      	ldr	r3, [pc, #500]	; (8003c90 <HAL_RCC_OscConfig+0x4d8>)
 8003a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9e:	4a7c      	ldr	r2, [pc, #496]	; (8003c90 <HAL_RCC_OscConfig+0x4d8>)
 8003aa0:	f043 0301 	orr.w	r3, r3, #1
 8003aa4:	6713      	str	r3, [r2, #112]	; 0x70
 8003aa6:	e01c      	b.n	8003ae2 <HAL_RCC_OscConfig+0x32a>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	2b05      	cmp	r3, #5
 8003aae:	d10c      	bne.n	8003aca <HAL_RCC_OscConfig+0x312>
 8003ab0:	4b77      	ldr	r3, [pc, #476]	; (8003c90 <HAL_RCC_OscConfig+0x4d8>)
 8003ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab4:	4a76      	ldr	r2, [pc, #472]	; (8003c90 <HAL_RCC_OscConfig+0x4d8>)
 8003ab6:	f043 0304 	orr.w	r3, r3, #4
 8003aba:	6713      	str	r3, [r2, #112]	; 0x70
 8003abc:	4b74      	ldr	r3, [pc, #464]	; (8003c90 <HAL_RCC_OscConfig+0x4d8>)
 8003abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac0:	4a73      	ldr	r2, [pc, #460]	; (8003c90 <HAL_RCC_OscConfig+0x4d8>)
 8003ac2:	f043 0301 	orr.w	r3, r3, #1
 8003ac6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ac8:	e00b      	b.n	8003ae2 <HAL_RCC_OscConfig+0x32a>
 8003aca:	4b71      	ldr	r3, [pc, #452]	; (8003c90 <HAL_RCC_OscConfig+0x4d8>)
 8003acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ace:	4a70      	ldr	r2, [pc, #448]	; (8003c90 <HAL_RCC_OscConfig+0x4d8>)
 8003ad0:	f023 0301 	bic.w	r3, r3, #1
 8003ad4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ad6:	4b6e      	ldr	r3, [pc, #440]	; (8003c90 <HAL_RCC_OscConfig+0x4d8>)
 8003ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ada:	4a6d      	ldr	r2, [pc, #436]	; (8003c90 <HAL_RCC_OscConfig+0x4d8>)
 8003adc:	f023 0304 	bic.w	r3, r3, #4
 8003ae0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d015      	beq.n	8003b16 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aea:	f7fe fa89 	bl	8002000 <HAL_GetTick>
 8003aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af0:	e00a      	b.n	8003b08 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003af2:	f7fe fa85 	bl	8002000 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e0bc      	b.n	8003c82 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b08:	4b61      	ldr	r3, [pc, #388]	; (8003c90 <HAL_RCC_OscConfig+0x4d8>)
 8003b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0ee      	beq.n	8003af2 <HAL_RCC_OscConfig+0x33a>
 8003b14:	e014      	b.n	8003b40 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b16:	f7fe fa73 	bl	8002000 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b1c:	e00a      	b.n	8003b34 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b1e:	f7fe fa6f 	bl	8002000 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e0a6      	b.n	8003c82 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b34:	4b56      	ldr	r3, [pc, #344]	; (8003c90 <HAL_RCC_OscConfig+0x4d8>)
 8003b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1ee      	bne.n	8003b1e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b40:	7dfb      	ldrb	r3, [r7, #23]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d105      	bne.n	8003b52 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b46:	4b52      	ldr	r3, [pc, #328]	; (8003c90 <HAL_RCC_OscConfig+0x4d8>)
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	4a51      	ldr	r2, [pc, #324]	; (8003c90 <HAL_RCC_OscConfig+0x4d8>)
 8003b4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b50:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 8092 	beq.w	8003c80 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b5c:	4b4c      	ldr	r3, [pc, #304]	; (8003c90 <HAL_RCC_OscConfig+0x4d8>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f003 030c 	and.w	r3, r3, #12
 8003b64:	2b08      	cmp	r3, #8
 8003b66:	d05c      	beq.n	8003c22 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d141      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b70:	4b48      	ldr	r3, [pc, #288]	; (8003c94 <HAL_RCC_OscConfig+0x4dc>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b76:	f7fe fa43 	bl	8002000 <HAL_GetTick>
 8003b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b7c:	e008      	b.n	8003b90 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b7e:	f7fe fa3f 	bl	8002000 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e078      	b.n	8003c82 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b90:	4b3f      	ldr	r3, [pc, #252]	; (8003c90 <HAL_RCC_OscConfig+0x4d8>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1f0      	bne.n	8003b7e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	69da      	ldr	r2, [r3, #28]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	431a      	orrs	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003baa:	019b      	lsls	r3, r3, #6
 8003bac:	431a      	orrs	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb2:	085b      	lsrs	r3, r3, #1
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	041b      	lsls	r3, r3, #16
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbe:	061b      	lsls	r3, r3, #24
 8003bc0:	4933      	ldr	r1, [pc, #204]	; (8003c90 <HAL_RCC_OscConfig+0x4d8>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bc6:	4b33      	ldr	r3, [pc, #204]	; (8003c94 <HAL_RCC_OscConfig+0x4dc>)
 8003bc8:	2201      	movs	r2, #1
 8003bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bcc:	f7fe fa18 	bl	8002000 <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bd2:	e008      	b.n	8003be6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bd4:	f7fe fa14 	bl	8002000 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e04d      	b.n	8003c82 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003be6:	4b2a      	ldr	r3, [pc, #168]	; (8003c90 <HAL_RCC_OscConfig+0x4d8>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d0f0      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x41c>
 8003bf2:	e045      	b.n	8003c80 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bf4:	4b27      	ldr	r3, [pc, #156]	; (8003c94 <HAL_RCC_OscConfig+0x4dc>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bfa:	f7fe fa01 	bl	8002000 <HAL_GetTick>
 8003bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c00:	e008      	b.n	8003c14 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c02:	f7fe f9fd 	bl	8002000 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d901      	bls.n	8003c14 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e036      	b.n	8003c82 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c14:	4b1e      	ldr	r3, [pc, #120]	; (8003c90 <HAL_RCC_OscConfig+0x4d8>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1f0      	bne.n	8003c02 <HAL_RCC_OscConfig+0x44a>
 8003c20:	e02e      	b.n	8003c80 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d101      	bne.n	8003c2e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e029      	b.n	8003c82 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c2e:	4b18      	ldr	r3, [pc, #96]	; (8003c90 <HAL_RCC_OscConfig+0x4d8>)
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	69db      	ldr	r3, [r3, #28]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d11c      	bne.n	8003c7c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d115      	bne.n	8003c7c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c56:	4013      	ands	r3, r2
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d10d      	bne.n	8003c7c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d106      	bne.n	8003c7c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d001      	beq.n	8003c80 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e000      	b.n	8003c82 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3718      	adds	r7, #24
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	40007000 	.word	0x40007000
 8003c90:	40023800 	.word	0x40023800
 8003c94:	42470060 	.word	0x42470060

08003c98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e0cc      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cac:	4b68      	ldr	r3, [pc, #416]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 030f 	and.w	r3, r3, #15
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d90c      	bls.n	8003cd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cba:	4b65      	ldr	r3, [pc, #404]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	b2d2      	uxtb	r2, r2
 8003cc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cc2:	4b63      	ldr	r3, [pc, #396]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 030f 	and.w	r3, r3, #15
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d001      	beq.n	8003cd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e0b8      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d020      	beq.n	8003d22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0304 	and.w	r3, r3, #4
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d005      	beq.n	8003cf8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cec:	4b59      	ldr	r3, [pc, #356]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	4a58      	ldr	r2, [pc, #352]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cf6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0308 	and.w	r3, r3, #8
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d005      	beq.n	8003d10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d04:	4b53      	ldr	r3, [pc, #332]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	4a52      	ldr	r2, [pc, #328]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d10:	4b50      	ldr	r3, [pc, #320]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	494d      	ldr	r1, [pc, #308]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d044      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d107      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d36:	4b47      	ldr	r3, [pc, #284]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d119      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e07f      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d003      	beq.n	8003d56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d52:	2b03      	cmp	r3, #3
 8003d54:	d107      	bne.n	8003d66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d56:	4b3f      	ldr	r3, [pc, #252]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d109      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e06f      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d66:	4b3b      	ldr	r3, [pc, #236]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e067      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d76:	4b37      	ldr	r3, [pc, #220]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f023 0203 	bic.w	r2, r3, #3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	4934      	ldr	r1, [pc, #208]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d88:	f7fe f93a 	bl	8002000 <HAL_GetTick>
 8003d8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d8e:	e00a      	b.n	8003da6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d90:	f7fe f936 	bl	8002000 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e04f      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003da6:	4b2b      	ldr	r3, [pc, #172]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 020c 	and.w	r2, r3, #12
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d1eb      	bne.n	8003d90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003db8:	4b25      	ldr	r3, [pc, #148]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 030f 	and.w	r3, r3, #15
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d20c      	bcs.n	8003de0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dc6:	4b22      	ldr	r3, [pc, #136]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	b2d2      	uxtb	r2, r2
 8003dcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dce:	4b20      	ldr	r3, [pc, #128]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 030f 	and.w	r3, r3, #15
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d001      	beq.n	8003de0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e032      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d008      	beq.n	8003dfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dec:	4b19      	ldr	r3, [pc, #100]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	4916      	ldr	r1, [pc, #88]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0308 	and.w	r3, r3, #8
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d009      	beq.n	8003e1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e0a:	4b12      	ldr	r3, [pc, #72]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	490e      	ldr	r1, [pc, #56]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e1e:	f000 f821 	bl	8003e64 <HAL_RCC_GetSysClockFreq>
 8003e22:	4601      	mov	r1, r0
 8003e24:	4b0b      	ldr	r3, [pc, #44]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	091b      	lsrs	r3, r3, #4
 8003e2a:	f003 030f 	and.w	r3, r3, #15
 8003e2e:	4a0a      	ldr	r2, [pc, #40]	; (8003e58 <HAL_RCC_ClockConfig+0x1c0>)
 8003e30:	5cd3      	ldrb	r3, [r2, r3]
 8003e32:	fa21 f303 	lsr.w	r3, r1, r3
 8003e36:	4a09      	ldr	r2, [pc, #36]	; (8003e5c <HAL_RCC_ClockConfig+0x1c4>)
 8003e38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e3a:	4b09      	ldr	r3, [pc, #36]	; (8003e60 <HAL_RCC_ClockConfig+0x1c8>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fe f89a 	bl	8001f78 <HAL_InitTick>

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	40023c00 	.word	0x40023c00
 8003e54:	40023800 	.word	0x40023800
 8003e58:	08006b48 	.word	0x08006b48
 8003e5c:	2000002c 	.word	0x2000002c
 8003e60:	20000030 	.word	0x20000030

08003e64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	607b      	str	r3, [r7, #4]
 8003e6e:	2300      	movs	r3, #0
 8003e70:	60fb      	str	r3, [r7, #12]
 8003e72:	2300      	movs	r3, #0
 8003e74:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003e76:	2300      	movs	r3, #0
 8003e78:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e7a:	4b63      	ldr	r3, [pc, #396]	; (8004008 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f003 030c 	and.w	r3, r3, #12
 8003e82:	2b04      	cmp	r3, #4
 8003e84:	d007      	beq.n	8003e96 <HAL_RCC_GetSysClockFreq+0x32>
 8003e86:	2b08      	cmp	r3, #8
 8003e88:	d008      	beq.n	8003e9c <HAL_RCC_GetSysClockFreq+0x38>
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f040 80b4 	bne.w	8003ff8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e90:	4b5e      	ldr	r3, [pc, #376]	; (800400c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003e92:	60bb      	str	r3, [r7, #8]
       break;
 8003e94:	e0b3      	b.n	8003ffe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e96:	4b5e      	ldr	r3, [pc, #376]	; (8004010 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003e98:	60bb      	str	r3, [r7, #8]
      break;
 8003e9a:	e0b0      	b.n	8003ffe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e9c:	4b5a      	ldr	r3, [pc, #360]	; (8004008 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ea4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ea6:	4b58      	ldr	r3, [pc, #352]	; (8004008 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d04a      	beq.n	8003f48 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eb2:	4b55      	ldr	r3, [pc, #340]	; (8004008 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	099b      	lsrs	r3, r3, #6
 8003eb8:	f04f 0400 	mov.w	r4, #0
 8003ebc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ec0:	f04f 0200 	mov.w	r2, #0
 8003ec4:	ea03 0501 	and.w	r5, r3, r1
 8003ec8:	ea04 0602 	and.w	r6, r4, r2
 8003ecc:	4629      	mov	r1, r5
 8003ece:	4632      	mov	r2, r6
 8003ed0:	f04f 0300 	mov.w	r3, #0
 8003ed4:	f04f 0400 	mov.w	r4, #0
 8003ed8:	0154      	lsls	r4, r2, #5
 8003eda:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ede:	014b      	lsls	r3, r1, #5
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	4622      	mov	r2, r4
 8003ee4:	1b49      	subs	r1, r1, r5
 8003ee6:	eb62 0206 	sbc.w	r2, r2, r6
 8003eea:	f04f 0300 	mov.w	r3, #0
 8003eee:	f04f 0400 	mov.w	r4, #0
 8003ef2:	0194      	lsls	r4, r2, #6
 8003ef4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ef8:	018b      	lsls	r3, r1, #6
 8003efa:	1a5b      	subs	r3, r3, r1
 8003efc:	eb64 0402 	sbc.w	r4, r4, r2
 8003f00:	f04f 0100 	mov.w	r1, #0
 8003f04:	f04f 0200 	mov.w	r2, #0
 8003f08:	00e2      	lsls	r2, r4, #3
 8003f0a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003f0e:	00d9      	lsls	r1, r3, #3
 8003f10:	460b      	mov	r3, r1
 8003f12:	4614      	mov	r4, r2
 8003f14:	195b      	adds	r3, r3, r5
 8003f16:	eb44 0406 	adc.w	r4, r4, r6
 8003f1a:	f04f 0100 	mov.w	r1, #0
 8003f1e:	f04f 0200 	mov.w	r2, #0
 8003f22:	0262      	lsls	r2, r4, #9
 8003f24:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003f28:	0259      	lsls	r1, r3, #9
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	4614      	mov	r4, r2
 8003f2e:	4618      	mov	r0, r3
 8003f30:	4621      	mov	r1, r4
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f04f 0400 	mov.w	r4, #0
 8003f38:	461a      	mov	r2, r3
 8003f3a:	4623      	mov	r3, r4
 8003f3c:	f7fc fe36 	bl	8000bac <__aeabi_uldivmod>
 8003f40:	4603      	mov	r3, r0
 8003f42:	460c      	mov	r4, r1
 8003f44:	60fb      	str	r3, [r7, #12]
 8003f46:	e049      	b.n	8003fdc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f48:	4b2f      	ldr	r3, [pc, #188]	; (8004008 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	099b      	lsrs	r3, r3, #6
 8003f4e:	f04f 0400 	mov.w	r4, #0
 8003f52:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003f56:	f04f 0200 	mov.w	r2, #0
 8003f5a:	ea03 0501 	and.w	r5, r3, r1
 8003f5e:	ea04 0602 	and.w	r6, r4, r2
 8003f62:	4629      	mov	r1, r5
 8003f64:	4632      	mov	r2, r6
 8003f66:	f04f 0300 	mov.w	r3, #0
 8003f6a:	f04f 0400 	mov.w	r4, #0
 8003f6e:	0154      	lsls	r4, r2, #5
 8003f70:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003f74:	014b      	lsls	r3, r1, #5
 8003f76:	4619      	mov	r1, r3
 8003f78:	4622      	mov	r2, r4
 8003f7a:	1b49      	subs	r1, r1, r5
 8003f7c:	eb62 0206 	sbc.w	r2, r2, r6
 8003f80:	f04f 0300 	mov.w	r3, #0
 8003f84:	f04f 0400 	mov.w	r4, #0
 8003f88:	0194      	lsls	r4, r2, #6
 8003f8a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003f8e:	018b      	lsls	r3, r1, #6
 8003f90:	1a5b      	subs	r3, r3, r1
 8003f92:	eb64 0402 	sbc.w	r4, r4, r2
 8003f96:	f04f 0100 	mov.w	r1, #0
 8003f9a:	f04f 0200 	mov.w	r2, #0
 8003f9e:	00e2      	lsls	r2, r4, #3
 8003fa0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003fa4:	00d9      	lsls	r1, r3, #3
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4614      	mov	r4, r2
 8003faa:	195b      	adds	r3, r3, r5
 8003fac:	eb44 0406 	adc.w	r4, r4, r6
 8003fb0:	f04f 0100 	mov.w	r1, #0
 8003fb4:	f04f 0200 	mov.w	r2, #0
 8003fb8:	02a2      	lsls	r2, r4, #10
 8003fba:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003fbe:	0299      	lsls	r1, r3, #10
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	4614      	mov	r4, r2
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	4621      	mov	r1, r4
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f04f 0400 	mov.w	r4, #0
 8003fce:	461a      	mov	r2, r3
 8003fd0:	4623      	mov	r3, r4
 8003fd2:	f7fc fdeb 	bl	8000bac <__aeabi_uldivmod>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	460c      	mov	r4, r1
 8003fda:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fdc:	4b0a      	ldr	r3, [pc, #40]	; (8004008 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	0c1b      	lsrs	r3, r3, #16
 8003fe2:	f003 0303 	and.w	r3, r3, #3
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	005b      	lsls	r3, r3, #1
 8003fea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff4:	60bb      	str	r3, [r7, #8]
      break;
 8003ff6:	e002      	b.n	8003ffe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ff8:	4b04      	ldr	r3, [pc, #16]	; (800400c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003ffa:	60bb      	str	r3, [r7, #8]
      break;
 8003ffc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ffe:	68bb      	ldr	r3, [r7, #8]
}
 8004000:	4618      	mov	r0, r3
 8004002:	3714      	adds	r7, #20
 8004004:	46bd      	mov	sp, r7
 8004006:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004008:	40023800 	.word	0x40023800
 800400c:	00f42400 	.word	0x00f42400
 8004010:	007a1200 	.word	0x007a1200

08004014 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004018:	4b03      	ldr	r3, [pc, #12]	; (8004028 <HAL_RCC_GetHCLKFreq+0x14>)
 800401a:	681b      	ldr	r3, [r3, #0]
}
 800401c:	4618      	mov	r0, r3
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	2000002c 	.word	0x2000002c

0800402c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004030:	f7ff fff0 	bl	8004014 <HAL_RCC_GetHCLKFreq>
 8004034:	4601      	mov	r1, r0
 8004036:	4b05      	ldr	r3, [pc, #20]	; (800404c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	0a9b      	lsrs	r3, r3, #10
 800403c:	f003 0307 	and.w	r3, r3, #7
 8004040:	4a03      	ldr	r2, [pc, #12]	; (8004050 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004042:	5cd3      	ldrb	r3, [r2, r3]
 8004044:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004048:	4618      	mov	r0, r3
 800404a:	bd80      	pop	{r7, pc}
 800404c:	40023800 	.word	0x40023800
 8004050:	08006b58 	.word	0x08006b58

08004054 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004058:	f7ff ffdc 	bl	8004014 <HAL_RCC_GetHCLKFreq>
 800405c:	4601      	mov	r1, r0
 800405e:	4b05      	ldr	r3, [pc, #20]	; (8004074 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	0b5b      	lsrs	r3, r3, #13
 8004064:	f003 0307 	and.w	r3, r3, #7
 8004068:	4a03      	ldr	r2, [pc, #12]	; (8004078 <HAL_RCC_GetPCLK2Freq+0x24>)
 800406a:	5cd3      	ldrb	r3, [r2, r3]
 800406c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004070:	4618      	mov	r0, r3
 8004072:	bd80      	pop	{r7, pc}
 8004074:	40023800 	.word	0x40023800
 8004078:	08006b58 	.word	0x08006b58

0800407c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e01d      	b.n	80040ca <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d106      	bne.n	80040a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7fd fdba 	bl	8001c1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2202      	movs	r2, #2
 80040ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	3304      	adds	r3, #4
 80040b8:	4619      	mov	r1, r3
 80040ba:	4610      	mov	r0, r2
 80040bc:	f000 fa1e 	bl	80044fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3708      	adds	r7, #8
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80040d2:	b480      	push	{r7}
 80040d4:	b085      	sub	sp, #20
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2202      	movs	r2, #2
 80040de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f003 0307 	and.w	r3, r3, #7
 80040ec:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2b06      	cmp	r3, #6
 80040f2:	d007      	beq.n	8004104 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f042 0201 	orr.w	r2, r2, #1
 8004102:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3714      	adds	r7, #20
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800411a:	b580      	push	{r7, lr}
 800411c:	b082      	sub	sp, #8
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b02      	cmp	r3, #2
 800412e:	d122      	bne.n	8004176 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b02      	cmp	r3, #2
 800413c:	d11b      	bne.n	8004176 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f06f 0202 	mvn.w	r2, #2
 8004146:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	f003 0303 	and.w	r3, r3, #3
 8004158:	2b00      	cmp	r3, #0
 800415a:	d003      	beq.n	8004164 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 f9af 	bl	80044c0 <HAL_TIM_IC_CaptureCallback>
 8004162:	e005      	b.n	8004170 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 f9a1 	bl	80044ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f9b2 	bl	80044d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	f003 0304 	and.w	r3, r3, #4
 8004180:	2b04      	cmp	r3, #4
 8004182:	d122      	bne.n	80041ca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	f003 0304 	and.w	r3, r3, #4
 800418e:	2b04      	cmp	r3, #4
 8004190:	d11b      	bne.n	80041ca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f06f 0204 	mvn.w	r2, #4
 800419a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2202      	movs	r2, #2
 80041a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d003      	beq.n	80041b8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 f985 	bl	80044c0 <HAL_TIM_IC_CaptureCallback>
 80041b6:	e005      	b.n	80041c4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 f977 	bl	80044ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f988 	bl	80044d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	f003 0308 	and.w	r3, r3, #8
 80041d4:	2b08      	cmp	r3, #8
 80041d6:	d122      	bne.n	800421e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	f003 0308 	and.w	r3, r3, #8
 80041e2:	2b08      	cmp	r3, #8
 80041e4:	d11b      	bne.n	800421e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f06f 0208 	mvn.w	r2, #8
 80041ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2204      	movs	r2, #4
 80041f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	69db      	ldr	r3, [r3, #28]
 80041fc:	f003 0303 	and.w	r3, r3, #3
 8004200:	2b00      	cmp	r3, #0
 8004202:	d003      	beq.n	800420c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 f95b 	bl	80044c0 <HAL_TIM_IC_CaptureCallback>
 800420a:	e005      	b.n	8004218 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 f94d 	bl	80044ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f95e 	bl	80044d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	f003 0310 	and.w	r3, r3, #16
 8004228:	2b10      	cmp	r3, #16
 800422a:	d122      	bne.n	8004272 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	f003 0310 	and.w	r3, r3, #16
 8004236:	2b10      	cmp	r3, #16
 8004238:	d11b      	bne.n	8004272 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f06f 0210 	mvn.w	r2, #16
 8004242:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2208      	movs	r2, #8
 8004248:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	69db      	ldr	r3, [r3, #28]
 8004250:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004254:	2b00      	cmp	r3, #0
 8004256:	d003      	beq.n	8004260 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f931 	bl	80044c0 <HAL_TIM_IC_CaptureCallback>
 800425e:	e005      	b.n	800426c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 f923 	bl	80044ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f934 	bl	80044d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b01      	cmp	r3, #1
 800427e:	d10e      	bne.n	800429e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b01      	cmp	r3, #1
 800428c:	d107      	bne.n	800429e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f06f 0201 	mvn.w	r2, #1
 8004296:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 f8fd 	bl	8004498 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a8:	2b80      	cmp	r3, #128	; 0x80
 80042aa:	d10e      	bne.n	80042ca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b6:	2b80      	cmp	r3, #128	; 0x80
 80042b8:	d107      	bne.n	80042ca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f000 fad9 	bl	800487c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d4:	2b40      	cmp	r3, #64	; 0x40
 80042d6:	d10e      	bne.n	80042f6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e2:	2b40      	cmp	r3, #64	; 0x40
 80042e4:	d107      	bne.n	80042f6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 f8f9 	bl	80044e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	f003 0320 	and.w	r3, r3, #32
 8004300:	2b20      	cmp	r3, #32
 8004302:	d10e      	bne.n	8004322 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	f003 0320 	and.w	r3, r3, #32
 800430e:	2b20      	cmp	r3, #32
 8004310:	d107      	bne.n	8004322 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f06f 0220 	mvn.w	r2, #32
 800431a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 faa3 	bl	8004868 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004322:	bf00      	nop
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b084      	sub	sp, #16
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
 8004332:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800433a:	2b01      	cmp	r3, #1
 800433c:	d101      	bne.n	8004342 <HAL_TIM_ConfigClockSource+0x18>
 800433e:	2302      	movs	r3, #2
 8004340:	e0a6      	b.n	8004490 <HAL_TIM_ConfigClockSource+0x166>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2202      	movs	r2, #2
 800434e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004360:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004368:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2b40      	cmp	r3, #64	; 0x40
 8004378:	d067      	beq.n	800444a <HAL_TIM_ConfigClockSource+0x120>
 800437a:	2b40      	cmp	r3, #64	; 0x40
 800437c:	d80b      	bhi.n	8004396 <HAL_TIM_ConfigClockSource+0x6c>
 800437e:	2b10      	cmp	r3, #16
 8004380:	d073      	beq.n	800446a <HAL_TIM_ConfigClockSource+0x140>
 8004382:	2b10      	cmp	r3, #16
 8004384:	d802      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x62>
 8004386:	2b00      	cmp	r3, #0
 8004388:	d06f      	beq.n	800446a <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800438a:	e078      	b.n	800447e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800438c:	2b20      	cmp	r3, #32
 800438e:	d06c      	beq.n	800446a <HAL_TIM_ConfigClockSource+0x140>
 8004390:	2b30      	cmp	r3, #48	; 0x30
 8004392:	d06a      	beq.n	800446a <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004394:	e073      	b.n	800447e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004396:	2b70      	cmp	r3, #112	; 0x70
 8004398:	d00d      	beq.n	80043b6 <HAL_TIM_ConfigClockSource+0x8c>
 800439a:	2b70      	cmp	r3, #112	; 0x70
 800439c:	d804      	bhi.n	80043a8 <HAL_TIM_ConfigClockSource+0x7e>
 800439e:	2b50      	cmp	r3, #80	; 0x50
 80043a0:	d033      	beq.n	800440a <HAL_TIM_ConfigClockSource+0xe0>
 80043a2:	2b60      	cmp	r3, #96	; 0x60
 80043a4:	d041      	beq.n	800442a <HAL_TIM_ConfigClockSource+0x100>
      break;
 80043a6:	e06a      	b.n	800447e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80043a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ac:	d066      	beq.n	800447c <HAL_TIM_ConfigClockSource+0x152>
 80043ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043b2:	d017      	beq.n	80043e4 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80043b4:	e063      	b.n	800447e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6818      	ldr	r0, [r3, #0]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	6899      	ldr	r1, [r3, #8]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	685a      	ldr	r2, [r3, #4]
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	f000 f9b3 	bl	8004730 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043d8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	609a      	str	r2, [r3, #8]
      break;
 80043e2:	e04c      	b.n	800447e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6818      	ldr	r0, [r3, #0]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	6899      	ldr	r1, [r3, #8]
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	f000 f99c 	bl	8004730 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	689a      	ldr	r2, [r3, #8]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004406:	609a      	str	r2, [r3, #8]
      break;
 8004408:	e039      	b.n	800447e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6818      	ldr	r0, [r3, #0]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	6859      	ldr	r1, [r3, #4]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	461a      	mov	r2, r3
 8004418:	f000 f910 	bl	800463c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2150      	movs	r1, #80	; 0x50
 8004422:	4618      	mov	r0, r3
 8004424:	f000 f969 	bl	80046fa <TIM_ITRx_SetConfig>
      break;
 8004428:	e029      	b.n	800447e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6818      	ldr	r0, [r3, #0]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	6859      	ldr	r1, [r3, #4]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	461a      	mov	r2, r3
 8004438:	f000 f92f 	bl	800469a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2160      	movs	r1, #96	; 0x60
 8004442:	4618      	mov	r0, r3
 8004444:	f000 f959 	bl	80046fa <TIM_ITRx_SetConfig>
      break;
 8004448:	e019      	b.n	800447e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6818      	ldr	r0, [r3, #0]
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	6859      	ldr	r1, [r3, #4]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	461a      	mov	r2, r3
 8004458:	f000 f8f0 	bl	800463c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2140      	movs	r1, #64	; 0x40
 8004462:	4618      	mov	r0, r3
 8004464:	f000 f949 	bl	80046fa <TIM_ITRx_SetConfig>
      break;
 8004468:	e009      	b.n	800447e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4619      	mov	r1, r3
 8004474:	4610      	mov	r0, r2
 8004476:	f000 f940 	bl	80046fa <TIM_ITRx_SetConfig>
      break;
 800447a:	e000      	b.n	800447e <HAL_TIM_ConfigClockSource+0x154>
      break;
 800447c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044c8:	bf00      	nop
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a40      	ldr	r2, [pc, #256]	; (8004610 <TIM_Base_SetConfig+0x114>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d013      	beq.n	800453c <TIM_Base_SetConfig+0x40>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800451a:	d00f      	beq.n	800453c <TIM_Base_SetConfig+0x40>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a3d      	ldr	r2, [pc, #244]	; (8004614 <TIM_Base_SetConfig+0x118>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d00b      	beq.n	800453c <TIM_Base_SetConfig+0x40>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a3c      	ldr	r2, [pc, #240]	; (8004618 <TIM_Base_SetConfig+0x11c>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d007      	beq.n	800453c <TIM_Base_SetConfig+0x40>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a3b      	ldr	r2, [pc, #236]	; (800461c <TIM_Base_SetConfig+0x120>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d003      	beq.n	800453c <TIM_Base_SetConfig+0x40>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a3a      	ldr	r2, [pc, #232]	; (8004620 <TIM_Base_SetConfig+0x124>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d108      	bne.n	800454e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004542:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	4313      	orrs	r3, r2
 800454c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a2f      	ldr	r2, [pc, #188]	; (8004610 <TIM_Base_SetConfig+0x114>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d02b      	beq.n	80045ae <TIM_Base_SetConfig+0xb2>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800455c:	d027      	beq.n	80045ae <TIM_Base_SetConfig+0xb2>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a2c      	ldr	r2, [pc, #176]	; (8004614 <TIM_Base_SetConfig+0x118>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d023      	beq.n	80045ae <TIM_Base_SetConfig+0xb2>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a2b      	ldr	r2, [pc, #172]	; (8004618 <TIM_Base_SetConfig+0x11c>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d01f      	beq.n	80045ae <TIM_Base_SetConfig+0xb2>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a2a      	ldr	r2, [pc, #168]	; (800461c <TIM_Base_SetConfig+0x120>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d01b      	beq.n	80045ae <TIM_Base_SetConfig+0xb2>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a29      	ldr	r2, [pc, #164]	; (8004620 <TIM_Base_SetConfig+0x124>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d017      	beq.n	80045ae <TIM_Base_SetConfig+0xb2>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a28      	ldr	r2, [pc, #160]	; (8004624 <TIM_Base_SetConfig+0x128>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d013      	beq.n	80045ae <TIM_Base_SetConfig+0xb2>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a27      	ldr	r2, [pc, #156]	; (8004628 <TIM_Base_SetConfig+0x12c>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d00f      	beq.n	80045ae <TIM_Base_SetConfig+0xb2>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a26      	ldr	r2, [pc, #152]	; (800462c <TIM_Base_SetConfig+0x130>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d00b      	beq.n	80045ae <TIM_Base_SetConfig+0xb2>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a25      	ldr	r2, [pc, #148]	; (8004630 <TIM_Base_SetConfig+0x134>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d007      	beq.n	80045ae <TIM_Base_SetConfig+0xb2>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a24      	ldr	r2, [pc, #144]	; (8004634 <TIM_Base_SetConfig+0x138>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d003      	beq.n	80045ae <TIM_Base_SetConfig+0xb2>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a23      	ldr	r2, [pc, #140]	; (8004638 <TIM_Base_SetConfig+0x13c>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d108      	bne.n	80045c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	4313      	orrs	r3, r2
 80045be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	689a      	ldr	r2, [r3, #8]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a0a      	ldr	r2, [pc, #40]	; (8004610 <TIM_Base_SetConfig+0x114>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d003      	beq.n	80045f4 <TIM_Base_SetConfig+0xf8>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a0c      	ldr	r2, [pc, #48]	; (8004620 <TIM_Base_SetConfig+0x124>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d103      	bne.n	80045fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	691a      	ldr	r2, [r3, #16]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	615a      	str	r2, [r3, #20]
}
 8004602:	bf00      	nop
 8004604:	3714      	adds	r7, #20
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	40010000 	.word	0x40010000
 8004614:	40000400 	.word	0x40000400
 8004618:	40000800 	.word	0x40000800
 800461c:	40000c00 	.word	0x40000c00
 8004620:	40010400 	.word	0x40010400
 8004624:	40014000 	.word	0x40014000
 8004628:	40014400 	.word	0x40014400
 800462c:	40014800 	.word	0x40014800
 8004630:	40001800 	.word	0x40001800
 8004634:	40001c00 	.word	0x40001c00
 8004638:	40002000 	.word	0x40002000

0800463c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800463c:	b480      	push	{r7}
 800463e:	b087      	sub	sp, #28
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6a1b      	ldr	r3, [r3, #32]
 800464c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	f023 0201 	bic.w	r2, r3, #1
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004666:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	011b      	lsls	r3, r3, #4
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	4313      	orrs	r3, r2
 8004670:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	f023 030a 	bic.w	r3, r3, #10
 8004678:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	4313      	orrs	r3, r2
 8004680:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	621a      	str	r2, [r3, #32]
}
 800468e:	bf00      	nop
 8004690:	371c      	adds	r7, #28
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr

0800469a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800469a:	b480      	push	{r7}
 800469c:	b087      	sub	sp, #28
 800469e:	af00      	add	r7, sp, #0
 80046a0:	60f8      	str	r0, [r7, #12]
 80046a2:	60b9      	str	r1, [r7, #8]
 80046a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	f023 0210 	bic.w	r2, r3, #16
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6a1b      	ldr	r3, [r3, #32]
 80046bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	031b      	lsls	r3, r3, #12
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	011b      	lsls	r3, r3, #4
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	4313      	orrs	r3, r2
 80046e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	621a      	str	r2, [r3, #32]
}
 80046ee:	bf00      	nop
 80046f0:	371c      	adds	r7, #28
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046fa:	b480      	push	{r7}
 80046fc:	b085      	sub	sp, #20
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
 8004702:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004710:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	4313      	orrs	r3, r2
 8004718:	f043 0307 	orr.w	r3, r3, #7
 800471c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	609a      	str	r2, [r3, #8]
}
 8004724:	bf00      	nop
 8004726:	3714      	adds	r7, #20
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004730:	b480      	push	{r7}
 8004732:	b087      	sub	sp, #28
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
 800473c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800474a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	021a      	lsls	r2, r3, #8
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	431a      	orrs	r2, r3
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	4313      	orrs	r3, r2
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	4313      	orrs	r3, r2
 800475c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	609a      	str	r2, [r3, #8]
}
 8004764:	bf00      	nop
 8004766:	371c      	adds	r7, #28
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004770:	b480      	push	{r7}
 8004772:	b085      	sub	sp, #20
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004780:	2b01      	cmp	r3, #1
 8004782:	d101      	bne.n	8004788 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004784:	2302      	movs	r3, #2
 8004786:	e05a      	b.n	800483e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2202      	movs	r2, #2
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a21      	ldr	r2, [pc, #132]	; (800484c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d022      	beq.n	8004812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047d4:	d01d      	beq.n	8004812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a1d      	ldr	r2, [pc, #116]	; (8004850 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d018      	beq.n	8004812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a1b      	ldr	r2, [pc, #108]	; (8004854 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d013      	beq.n	8004812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a1a      	ldr	r2, [pc, #104]	; (8004858 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d00e      	beq.n	8004812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a18      	ldr	r2, [pc, #96]	; (800485c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d009      	beq.n	8004812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a17      	ldr	r2, [pc, #92]	; (8004860 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d004      	beq.n	8004812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a15      	ldr	r2, [pc, #84]	; (8004864 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d10c      	bne.n	800482c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004818:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	4313      	orrs	r3, r2
 8004822:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3714      	adds	r7, #20
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	40010000 	.word	0x40010000
 8004850:	40000400 	.word	0x40000400
 8004854:	40000800 	.word	0x40000800
 8004858:	40000c00 	.word	0x40000c00
 800485c:	40010400 	.word	0x40010400
 8004860:	40014000 	.word	0x40014000
 8004864:	40001800 	.word	0x40001800

08004868 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e03f      	b.n	8004922 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d106      	bne.n	80048bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7fd f9ec 	bl	8001c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2224      	movs	r2, #36	; 0x24
 80048c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68da      	ldr	r2, [r3, #12]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 f95f 	bl	8004b98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	691a      	ldr	r2, [r3, #16]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	695a      	ldr	r2, [r3, #20]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68da      	ldr	r2, [r3, #12]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004908:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2220      	movs	r2, #32
 8004914:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2220      	movs	r2, #32
 800491c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3708      	adds	r7, #8
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
	...

0800492c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	4613      	mov	r3, r2
 8004938:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b20      	cmp	r3, #32
 8004944:	d153      	bne.n	80049ee <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d002      	beq.n	8004952 <HAL_UART_Transmit_DMA+0x26>
 800494c:	88fb      	ldrh	r3, [r7, #6]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e04c      	b.n	80049f0 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800495c:	2b01      	cmp	r3, #1
 800495e:	d101      	bne.n	8004964 <HAL_UART_Transmit_DMA+0x38>
 8004960:	2302      	movs	r3, #2
 8004962:	e045      	b.n	80049f0 <HAL_UART_Transmit_DMA+0xc4>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	88fa      	ldrh	r2, [r7, #6]
 8004976:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	88fa      	ldrh	r2, [r7, #6]
 800497c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2221      	movs	r2, #33	; 0x21
 8004988:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004990:	4a19      	ldr	r2, [pc, #100]	; (80049f8 <HAL_UART_Transmit_DMA+0xcc>)
 8004992:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004998:	4a18      	ldr	r2, [pc, #96]	; (80049fc <HAL_UART_Transmit_DMA+0xd0>)
 800499a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a0:	4a17      	ldr	r2, [pc, #92]	; (8004a00 <HAL_UART_Transmit_DMA+0xd4>)
 80049a2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a8:	2200      	movs	r2, #0
 80049aa:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80049ac:	f107 0308 	add.w	r3, r7, #8
 80049b0:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	6819      	ldr	r1, [r3, #0]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	3304      	adds	r3, #4
 80049c0:	461a      	mov	r2, r3
 80049c2:	88fb      	ldrh	r3, [r7, #6]
 80049c4:	f7fe fa84 	bl	8002ed0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049d0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	695a      	ldr	r2, [r3, #20]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80049e8:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80049ea:	2300      	movs	r3, #0
 80049ec:	e000      	b.n	80049f0 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80049ee:	2302      	movs	r3, #2
  }
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3718      	adds	r7, #24
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	08004a2d 	.word	0x08004a2d
 80049fc:	08004a7f 	.word	0x08004a7f
 8004a00:	08004a9b 	.word	0x08004a9b

08004a04 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a38:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d113      	bne.n	8004a70 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	695a      	ldr	r2, [r3, #20]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a5c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68da      	ldr	r2, [r3, #12]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a6c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004a6e:	e002      	b.n	8004a76 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f7fc ff23 	bl	80018bc <HAL_UART_TxCpltCallback>
}
 8004a76:	bf00      	nop
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b084      	sub	sp, #16
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f7ff ffb9 	bl	8004a04 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a92:	bf00      	nop
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b084      	sub	sp, #16
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aaa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab6:	2b80      	cmp	r3, #128	; 0x80
 8004ab8:	bf0c      	ite	eq
 8004aba:	2301      	moveq	r3, #1
 8004abc:	2300      	movne	r3, #0
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b21      	cmp	r3, #33	; 0x21
 8004acc:	d108      	bne.n	8004ae0 <UART_DMAError+0x46>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d005      	beq.n	8004ae0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004ada:	68b8      	ldr	r0, [r7, #8]
 8004adc:	f000 f827 	bl	8004b2e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aea:	2b40      	cmp	r3, #64	; 0x40
 8004aec:	bf0c      	ite	eq
 8004aee:	2301      	moveq	r3, #1
 8004af0:	2300      	movne	r3, #0
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b22      	cmp	r3, #34	; 0x22
 8004b00:	d108      	bne.n	8004b14 <UART_DMAError+0x7a>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d005      	beq.n	8004b14 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004b0e:	68b8      	ldr	r0, [r7, #8]
 8004b10:	f000 f823 	bl	8004b5a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b18:	f043 0210 	orr.w	r2, r3, #16
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b20:	68b8      	ldr	r0, [r7, #8]
 8004b22:	f7ff ff79 	bl	8004a18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b26:	bf00      	nop
 8004b28:	3710      	adds	r7, #16
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b083      	sub	sp, #12
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68da      	ldr	r2, [r3, #12]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004b44:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2220      	movs	r2, #32
 8004b4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8004b4e:	bf00      	nop
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b083      	sub	sp, #12
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68da      	ldr	r2, [r3, #12]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004b70:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	695a      	ldr	r2, [r3, #20]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f022 0201 	bic.w	r2, r2, #1
 8004b80:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2220      	movs	r2, #32
 8004b86:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004b8a:	bf00      	nop
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
	...

08004b98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b9c:	b085      	sub	sp, #20
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	68da      	ldr	r2, [r3, #12]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689a      	ldr	r2, [r3, #8]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004bda:	f023 030c 	bic.w	r3, r3, #12
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	6812      	ldr	r2, [r2, #0]
 8004be2:	68f9      	ldr	r1, [r7, #12]
 8004be4:	430b      	orrs	r3, r1
 8004be6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	699a      	ldr	r2, [r3, #24]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	69db      	ldr	r3, [r3, #28]
 8004c02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c06:	f040 818b 	bne.w	8004f20 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4ac1      	ldr	r2, [pc, #772]	; (8004f14 <UART_SetConfig+0x37c>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d005      	beq.n	8004c20 <UART_SetConfig+0x88>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4abf      	ldr	r2, [pc, #764]	; (8004f18 <UART_SetConfig+0x380>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	f040 80bd 	bne.w	8004d9a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c20:	f7ff fa18 	bl	8004054 <HAL_RCC_GetPCLK2Freq>
 8004c24:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	461d      	mov	r5, r3
 8004c2a:	f04f 0600 	mov.w	r6, #0
 8004c2e:	46a8      	mov	r8, r5
 8004c30:	46b1      	mov	r9, r6
 8004c32:	eb18 0308 	adds.w	r3, r8, r8
 8004c36:	eb49 0409 	adc.w	r4, r9, r9
 8004c3a:	4698      	mov	r8, r3
 8004c3c:	46a1      	mov	r9, r4
 8004c3e:	eb18 0805 	adds.w	r8, r8, r5
 8004c42:	eb49 0906 	adc.w	r9, r9, r6
 8004c46:	f04f 0100 	mov.w	r1, #0
 8004c4a:	f04f 0200 	mov.w	r2, #0
 8004c4e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004c52:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004c56:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004c5a:	4688      	mov	r8, r1
 8004c5c:	4691      	mov	r9, r2
 8004c5e:	eb18 0005 	adds.w	r0, r8, r5
 8004c62:	eb49 0106 	adc.w	r1, r9, r6
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	461d      	mov	r5, r3
 8004c6c:	f04f 0600 	mov.w	r6, #0
 8004c70:	196b      	adds	r3, r5, r5
 8004c72:	eb46 0406 	adc.w	r4, r6, r6
 8004c76:	461a      	mov	r2, r3
 8004c78:	4623      	mov	r3, r4
 8004c7a:	f7fb ff97 	bl	8000bac <__aeabi_uldivmod>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	460c      	mov	r4, r1
 8004c82:	461a      	mov	r2, r3
 8004c84:	4ba5      	ldr	r3, [pc, #660]	; (8004f1c <UART_SetConfig+0x384>)
 8004c86:	fba3 2302 	umull	r2, r3, r3, r2
 8004c8a:	095b      	lsrs	r3, r3, #5
 8004c8c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	461d      	mov	r5, r3
 8004c94:	f04f 0600 	mov.w	r6, #0
 8004c98:	46a9      	mov	r9, r5
 8004c9a:	46b2      	mov	sl, r6
 8004c9c:	eb19 0309 	adds.w	r3, r9, r9
 8004ca0:	eb4a 040a 	adc.w	r4, sl, sl
 8004ca4:	4699      	mov	r9, r3
 8004ca6:	46a2      	mov	sl, r4
 8004ca8:	eb19 0905 	adds.w	r9, r9, r5
 8004cac:	eb4a 0a06 	adc.w	sl, sl, r6
 8004cb0:	f04f 0100 	mov.w	r1, #0
 8004cb4:	f04f 0200 	mov.w	r2, #0
 8004cb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cbc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004cc0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004cc4:	4689      	mov	r9, r1
 8004cc6:	4692      	mov	sl, r2
 8004cc8:	eb19 0005 	adds.w	r0, r9, r5
 8004ccc:	eb4a 0106 	adc.w	r1, sl, r6
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	461d      	mov	r5, r3
 8004cd6:	f04f 0600 	mov.w	r6, #0
 8004cda:	196b      	adds	r3, r5, r5
 8004cdc:	eb46 0406 	adc.w	r4, r6, r6
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	4623      	mov	r3, r4
 8004ce4:	f7fb ff62 	bl	8000bac <__aeabi_uldivmod>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	460c      	mov	r4, r1
 8004cec:	461a      	mov	r2, r3
 8004cee:	4b8b      	ldr	r3, [pc, #556]	; (8004f1c <UART_SetConfig+0x384>)
 8004cf0:	fba3 1302 	umull	r1, r3, r3, r2
 8004cf4:	095b      	lsrs	r3, r3, #5
 8004cf6:	2164      	movs	r1, #100	; 0x64
 8004cf8:	fb01 f303 	mul.w	r3, r1, r3
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	3332      	adds	r3, #50	; 0x32
 8004d02:	4a86      	ldr	r2, [pc, #536]	; (8004f1c <UART_SetConfig+0x384>)
 8004d04:	fba2 2303 	umull	r2, r3, r2, r3
 8004d08:	095b      	lsrs	r3, r3, #5
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d10:	4498      	add	r8, r3
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	461d      	mov	r5, r3
 8004d16:	f04f 0600 	mov.w	r6, #0
 8004d1a:	46a9      	mov	r9, r5
 8004d1c:	46b2      	mov	sl, r6
 8004d1e:	eb19 0309 	adds.w	r3, r9, r9
 8004d22:	eb4a 040a 	adc.w	r4, sl, sl
 8004d26:	4699      	mov	r9, r3
 8004d28:	46a2      	mov	sl, r4
 8004d2a:	eb19 0905 	adds.w	r9, r9, r5
 8004d2e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004d32:	f04f 0100 	mov.w	r1, #0
 8004d36:	f04f 0200 	mov.w	r2, #0
 8004d3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d3e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d42:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d46:	4689      	mov	r9, r1
 8004d48:	4692      	mov	sl, r2
 8004d4a:	eb19 0005 	adds.w	r0, r9, r5
 8004d4e:	eb4a 0106 	adc.w	r1, sl, r6
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	461d      	mov	r5, r3
 8004d58:	f04f 0600 	mov.w	r6, #0
 8004d5c:	196b      	adds	r3, r5, r5
 8004d5e:	eb46 0406 	adc.w	r4, r6, r6
 8004d62:	461a      	mov	r2, r3
 8004d64:	4623      	mov	r3, r4
 8004d66:	f7fb ff21 	bl	8000bac <__aeabi_uldivmod>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	460c      	mov	r4, r1
 8004d6e:	461a      	mov	r2, r3
 8004d70:	4b6a      	ldr	r3, [pc, #424]	; (8004f1c <UART_SetConfig+0x384>)
 8004d72:	fba3 1302 	umull	r1, r3, r3, r2
 8004d76:	095b      	lsrs	r3, r3, #5
 8004d78:	2164      	movs	r1, #100	; 0x64
 8004d7a:	fb01 f303 	mul.w	r3, r1, r3
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	00db      	lsls	r3, r3, #3
 8004d82:	3332      	adds	r3, #50	; 0x32
 8004d84:	4a65      	ldr	r2, [pc, #404]	; (8004f1c <UART_SetConfig+0x384>)
 8004d86:	fba2 2303 	umull	r2, r3, r2, r3
 8004d8a:	095b      	lsrs	r3, r3, #5
 8004d8c:	f003 0207 	and.w	r2, r3, #7
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4442      	add	r2, r8
 8004d96:	609a      	str	r2, [r3, #8]
 8004d98:	e26f      	b.n	800527a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d9a:	f7ff f947 	bl	800402c <HAL_RCC_GetPCLK1Freq>
 8004d9e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	461d      	mov	r5, r3
 8004da4:	f04f 0600 	mov.w	r6, #0
 8004da8:	46a8      	mov	r8, r5
 8004daa:	46b1      	mov	r9, r6
 8004dac:	eb18 0308 	adds.w	r3, r8, r8
 8004db0:	eb49 0409 	adc.w	r4, r9, r9
 8004db4:	4698      	mov	r8, r3
 8004db6:	46a1      	mov	r9, r4
 8004db8:	eb18 0805 	adds.w	r8, r8, r5
 8004dbc:	eb49 0906 	adc.w	r9, r9, r6
 8004dc0:	f04f 0100 	mov.w	r1, #0
 8004dc4:	f04f 0200 	mov.w	r2, #0
 8004dc8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004dcc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004dd0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004dd4:	4688      	mov	r8, r1
 8004dd6:	4691      	mov	r9, r2
 8004dd8:	eb18 0005 	adds.w	r0, r8, r5
 8004ddc:	eb49 0106 	adc.w	r1, r9, r6
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	461d      	mov	r5, r3
 8004de6:	f04f 0600 	mov.w	r6, #0
 8004dea:	196b      	adds	r3, r5, r5
 8004dec:	eb46 0406 	adc.w	r4, r6, r6
 8004df0:	461a      	mov	r2, r3
 8004df2:	4623      	mov	r3, r4
 8004df4:	f7fb feda 	bl	8000bac <__aeabi_uldivmod>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	460c      	mov	r4, r1
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	4b47      	ldr	r3, [pc, #284]	; (8004f1c <UART_SetConfig+0x384>)
 8004e00:	fba3 2302 	umull	r2, r3, r3, r2
 8004e04:	095b      	lsrs	r3, r3, #5
 8004e06:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	461d      	mov	r5, r3
 8004e0e:	f04f 0600 	mov.w	r6, #0
 8004e12:	46a9      	mov	r9, r5
 8004e14:	46b2      	mov	sl, r6
 8004e16:	eb19 0309 	adds.w	r3, r9, r9
 8004e1a:	eb4a 040a 	adc.w	r4, sl, sl
 8004e1e:	4699      	mov	r9, r3
 8004e20:	46a2      	mov	sl, r4
 8004e22:	eb19 0905 	adds.w	r9, r9, r5
 8004e26:	eb4a 0a06 	adc.w	sl, sl, r6
 8004e2a:	f04f 0100 	mov.w	r1, #0
 8004e2e:	f04f 0200 	mov.w	r2, #0
 8004e32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e36:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e3a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e3e:	4689      	mov	r9, r1
 8004e40:	4692      	mov	sl, r2
 8004e42:	eb19 0005 	adds.w	r0, r9, r5
 8004e46:	eb4a 0106 	adc.w	r1, sl, r6
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	461d      	mov	r5, r3
 8004e50:	f04f 0600 	mov.w	r6, #0
 8004e54:	196b      	adds	r3, r5, r5
 8004e56:	eb46 0406 	adc.w	r4, r6, r6
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	4623      	mov	r3, r4
 8004e5e:	f7fb fea5 	bl	8000bac <__aeabi_uldivmod>
 8004e62:	4603      	mov	r3, r0
 8004e64:	460c      	mov	r4, r1
 8004e66:	461a      	mov	r2, r3
 8004e68:	4b2c      	ldr	r3, [pc, #176]	; (8004f1c <UART_SetConfig+0x384>)
 8004e6a:	fba3 1302 	umull	r1, r3, r3, r2
 8004e6e:	095b      	lsrs	r3, r3, #5
 8004e70:	2164      	movs	r1, #100	; 0x64
 8004e72:	fb01 f303 	mul.w	r3, r1, r3
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	00db      	lsls	r3, r3, #3
 8004e7a:	3332      	adds	r3, #50	; 0x32
 8004e7c:	4a27      	ldr	r2, [pc, #156]	; (8004f1c <UART_SetConfig+0x384>)
 8004e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e82:	095b      	lsrs	r3, r3, #5
 8004e84:	005b      	lsls	r3, r3, #1
 8004e86:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e8a:	4498      	add	r8, r3
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	461d      	mov	r5, r3
 8004e90:	f04f 0600 	mov.w	r6, #0
 8004e94:	46a9      	mov	r9, r5
 8004e96:	46b2      	mov	sl, r6
 8004e98:	eb19 0309 	adds.w	r3, r9, r9
 8004e9c:	eb4a 040a 	adc.w	r4, sl, sl
 8004ea0:	4699      	mov	r9, r3
 8004ea2:	46a2      	mov	sl, r4
 8004ea4:	eb19 0905 	adds.w	r9, r9, r5
 8004ea8:	eb4a 0a06 	adc.w	sl, sl, r6
 8004eac:	f04f 0100 	mov.w	r1, #0
 8004eb0:	f04f 0200 	mov.w	r2, #0
 8004eb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004eb8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ebc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ec0:	4689      	mov	r9, r1
 8004ec2:	4692      	mov	sl, r2
 8004ec4:	eb19 0005 	adds.w	r0, r9, r5
 8004ec8:	eb4a 0106 	adc.w	r1, sl, r6
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	461d      	mov	r5, r3
 8004ed2:	f04f 0600 	mov.w	r6, #0
 8004ed6:	196b      	adds	r3, r5, r5
 8004ed8:	eb46 0406 	adc.w	r4, r6, r6
 8004edc:	461a      	mov	r2, r3
 8004ede:	4623      	mov	r3, r4
 8004ee0:	f7fb fe64 	bl	8000bac <__aeabi_uldivmod>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	460c      	mov	r4, r1
 8004ee8:	461a      	mov	r2, r3
 8004eea:	4b0c      	ldr	r3, [pc, #48]	; (8004f1c <UART_SetConfig+0x384>)
 8004eec:	fba3 1302 	umull	r1, r3, r3, r2
 8004ef0:	095b      	lsrs	r3, r3, #5
 8004ef2:	2164      	movs	r1, #100	; 0x64
 8004ef4:	fb01 f303 	mul.w	r3, r1, r3
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	00db      	lsls	r3, r3, #3
 8004efc:	3332      	adds	r3, #50	; 0x32
 8004efe:	4a07      	ldr	r2, [pc, #28]	; (8004f1c <UART_SetConfig+0x384>)
 8004f00:	fba2 2303 	umull	r2, r3, r2, r3
 8004f04:	095b      	lsrs	r3, r3, #5
 8004f06:	f003 0207 	and.w	r2, r3, #7
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4442      	add	r2, r8
 8004f10:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004f12:	e1b2      	b.n	800527a <UART_SetConfig+0x6e2>
 8004f14:	40011000 	.word	0x40011000
 8004f18:	40011400 	.word	0x40011400
 8004f1c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4ad7      	ldr	r2, [pc, #860]	; (8005284 <UART_SetConfig+0x6ec>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d005      	beq.n	8004f36 <UART_SetConfig+0x39e>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4ad6      	ldr	r2, [pc, #856]	; (8005288 <UART_SetConfig+0x6f0>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	f040 80d1 	bne.w	80050d8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f36:	f7ff f88d 	bl	8004054 <HAL_RCC_GetPCLK2Freq>
 8004f3a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	469a      	mov	sl, r3
 8004f40:	f04f 0b00 	mov.w	fp, #0
 8004f44:	46d0      	mov	r8, sl
 8004f46:	46d9      	mov	r9, fp
 8004f48:	eb18 0308 	adds.w	r3, r8, r8
 8004f4c:	eb49 0409 	adc.w	r4, r9, r9
 8004f50:	4698      	mov	r8, r3
 8004f52:	46a1      	mov	r9, r4
 8004f54:	eb18 080a 	adds.w	r8, r8, sl
 8004f58:	eb49 090b 	adc.w	r9, r9, fp
 8004f5c:	f04f 0100 	mov.w	r1, #0
 8004f60:	f04f 0200 	mov.w	r2, #0
 8004f64:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004f68:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004f6c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004f70:	4688      	mov	r8, r1
 8004f72:	4691      	mov	r9, r2
 8004f74:	eb1a 0508 	adds.w	r5, sl, r8
 8004f78:	eb4b 0609 	adc.w	r6, fp, r9
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	4619      	mov	r1, r3
 8004f82:	f04f 0200 	mov.w	r2, #0
 8004f86:	f04f 0300 	mov.w	r3, #0
 8004f8a:	f04f 0400 	mov.w	r4, #0
 8004f8e:	0094      	lsls	r4, r2, #2
 8004f90:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004f94:	008b      	lsls	r3, r1, #2
 8004f96:	461a      	mov	r2, r3
 8004f98:	4623      	mov	r3, r4
 8004f9a:	4628      	mov	r0, r5
 8004f9c:	4631      	mov	r1, r6
 8004f9e:	f7fb fe05 	bl	8000bac <__aeabi_uldivmod>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	460c      	mov	r4, r1
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	4bb8      	ldr	r3, [pc, #736]	; (800528c <UART_SetConfig+0x6f4>)
 8004faa:	fba3 2302 	umull	r2, r3, r3, r2
 8004fae:	095b      	lsrs	r3, r3, #5
 8004fb0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	469b      	mov	fp, r3
 8004fb8:	f04f 0c00 	mov.w	ip, #0
 8004fbc:	46d9      	mov	r9, fp
 8004fbe:	46e2      	mov	sl, ip
 8004fc0:	eb19 0309 	adds.w	r3, r9, r9
 8004fc4:	eb4a 040a 	adc.w	r4, sl, sl
 8004fc8:	4699      	mov	r9, r3
 8004fca:	46a2      	mov	sl, r4
 8004fcc:	eb19 090b 	adds.w	r9, r9, fp
 8004fd0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004fd4:	f04f 0100 	mov.w	r1, #0
 8004fd8:	f04f 0200 	mov.w	r2, #0
 8004fdc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fe0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004fe4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004fe8:	4689      	mov	r9, r1
 8004fea:	4692      	mov	sl, r2
 8004fec:	eb1b 0509 	adds.w	r5, fp, r9
 8004ff0:	eb4c 060a 	adc.w	r6, ip, sl
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	f04f 0200 	mov.w	r2, #0
 8004ffe:	f04f 0300 	mov.w	r3, #0
 8005002:	f04f 0400 	mov.w	r4, #0
 8005006:	0094      	lsls	r4, r2, #2
 8005008:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800500c:	008b      	lsls	r3, r1, #2
 800500e:	461a      	mov	r2, r3
 8005010:	4623      	mov	r3, r4
 8005012:	4628      	mov	r0, r5
 8005014:	4631      	mov	r1, r6
 8005016:	f7fb fdc9 	bl	8000bac <__aeabi_uldivmod>
 800501a:	4603      	mov	r3, r0
 800501c:	460c      	mov	r4, r1
 800501e:	461a      	mov	r2, r3
 8005020:	4b9a      	ldr	r3, [pc, #616]	; (800528c <UART_SetConfig+0x6f4>)
 8005022:	fba3 1302 	umull	r1, r3, r3, r2
 8005026:	095b      	lsrs	r3, r3, #5
 8005028:	2164      	movs	r1, #100	; 0x64
 800502a:	fb01 f303 	mul.w	r3, r1, r3
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	011b      	lsls	r3, r3, #4
 8005032:	3332      	adds	r3, #50	; 0x32
 8005034:	4a95      	ldr	r2, [pc, #596]	; (800528c <UART_SetConfig+0x6f4>)
 8005036:	fba2 2303 	umull	r2, r3, r2, r3
 800503a:	095b      	lsrs	r3, r3, #5
 800503c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005040:	4498      	add	r8, r3
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	469b      	mov	fp, r3
 8005046:	f04f 0c00 	mov.w	ip, #0
 800504a:	46d9      	mov	r9, fp
 800504c:	46e2      	mov	sl, ip
 800504e:	eb19 0309 	adds.w	r3, r9, r9
 8005052:	eb4a 040a 	adc.w	r4, sl, sl
 8005056:	4699      	mov	r9, r3
 8005058:	46a2      	mov	sl, r4
 800505a:	eb19 090b 	adds.w	r9, r9, fp
 800505e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005062:	f04f 0100 	mov.w	r1, #0
 8005066:	f04f 0200 	mov.w	r2, #0
 800506a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800506e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005072:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005076:	4689      	mov	r9, r1
 8005078:	4692      	mov	sl, r2
 800507a:	eb1b 0509 	adds.w	r5, fp, r9
 800507e:	eb4c 060a 	adc.w	r6, ip, sl
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	4619      	mov	r1, r3
 8005088:	f04f 0200 	mov.w	r2, #0
 800508c:	f04f 0300 	mov.w	r3, #0
 8005090:	f04f 0400 	mov.w	r4, #0
 8005094:	0094      	lsls	r4, r2, #2
 8005096:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800509a:	008b      	lsls	r3, r1, #2
 800509c:	461a      	mov	r2, r3
 800509e:	4623      	mov	r3, r4
 80050a0:	4628      	mov	r0, r5
 80050a2:	4631      	mov	r1, r6
 80050a4:	f7fb fd82 	bl	8000bac <__aeabi_uldivmod>
 80050a8:	4603      	mov	r3, r0
 80050aa:	460c      	mov	r4, r1
 80050ac:	461a      	mov	r2, r3
 80050ae:	4b77      	ldr	r3, [pc, #476]	; (800528c <UART_SetConfig+0x6f4>)
 80050b0:	fba3 1302 	umull	r1, r3, r3, r2
 80050b4:	095b      	lsrs	r3, r3, #5
 80050b6:	2164      	movs	r1, #100	; 0x64
 80050b8:	fb01 f303 	mul.w	r3, r1, r3
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	011b      	lsls	r3, r3, #4
 80050c0:	3332      	adds	r3, #50	; 0x32
 80050c2:	4a72      	ldr	r2, [pc, #456]	; (800528c <UART_SetConfig+0x6f4>)
 80050c4:	fba2 2303 	umull	r2, r3, r2, r3
 80050c8:	095b      	lsrs	r3, r3, #5
 80050ca:	f003 020f 	and.w	r2, r3, #15
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4442      	add	r2, r8
 80050d4:	609a      	str	r2, [r3, #8]
 80050d6:	e0d0      	b.n	800527a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80050d8:	f7fe ffa8 	bl	800402c <HAL_RCC_GetPCLK1Freq>
 80050dc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	469a      	mov	sl, r3
 80050e2:	f04f 0b00 	mov.w	fp, #0
 80050e6:	46d0      	mov	r8, sl
 80050e8:	46d9      	mov	r9, fp
 80050ea:	eb18 0308 	adds.w	r3, r8, r8
 80050ee:	eb49 0409 	adc.w	r4, r9, r9
 80050f2:	4698      	mov	r8, r3
 80050f4:	46a1      	mov	r9, r4
 80050f6:	eb18 080a 	adds.w	r8, r8, sl
 80050fa:	eb49 090b 	adc.w	r9, r9, fp
 80050fe:	f04f 0100 	mov.w	r1, #0
 8005102:	f04f 0200 	mov.w	r2, #0
 8005106:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800510a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800510e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005112:	4688      	mov	r8, r1
 8005114:	4691      	mov	r9, r2
 8005116:	eb1a 0508 	adds.w	r5, sl, r8
 800511a:	eb4b 0609 	adc.w	r6, fp, r9
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	4619      	mov	r1, r3
 8005124:	f04f 0200 	mov.w	r2, #0
 8005128:	f04f 0300 	mov.w	r3, #0
 800512c:	f04f 0400 	mov.w	r4, #0
 8005130:	0094      	lsls	r4, r2, #2
 8005132:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005136:	008b      	lsls	r3, r1, #2
 8005138:	461a      	mov	r2, r3
 800513a:	4623      	mov	r3, r4
 800513c:	4628      	mov	r0, r5
 800513e:	4631      	mov	r1, r6
 8005140:	f7fb fd34 	bl	8000bac <__aeabi_uldivmod>
 8005144:	4603      	mov	r3, r0
 8005146:	460c      	mov	r4, r1
 8005148:	461a      	mov	r2, r3
 800514a:	4b50      	ldr	r3, [pc, #320]	; (800528c <UART_SetConfig+0x6f4>)
 800514c:	fba3 2302 	umull	r2, r3, r3, r2
 8005150:	095b      	lsrs	r3, r3, #5
 8005152:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	469b      	mov	fp, r3
 800515a:	f04f 0c00 	mov.w	ip, #0
 800515e:	46d9      	mov	r9, fp
 8005160:	46e2      	mov	sl, ip
 8005162:	eb19 0309 	adds.w	r3, r9, r9
 8005166:	eb4a 040a 	adc.w	r4, sl, sl
 800516a:	4699      	mov	r9, r3
 800516c:	46a2      	mov	sl, r4
 800516e:	eb19 090b 	adds.w	r9, r9, fp
 8005172:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005176:	f04f 0100 	mov.w	r1, #0
 800517a:	f04f 0200 	mov.w	r2, #0
 800517e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005182:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005186:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800518a:	4689      	mov	r9, r1
 800518c:	4692      	mov	sl, r2
 800518e:	eb1b 0509 	adds.w	r5, fp, r9
 8005192:	eb4c 060a 	adc.w	r6, ip, sl
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	4619      	mov	r1, r3
 800519c:	f04f 0200 	mov.w	r2, #0
 80051a0:	f04f 0300 	mov.w	r3, #0
 80051a4:	f04f 0400 	mov.w	r4, #0
 80051a8:	0094      	lsls	r4, r2, #2
 80051aa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80051ae:	008b      	lsls	r3, r1, #2
 80051b0:	461a      	mov	r2, r3
 80051b2:	4623      	mov	r3, r4
 80051b4:	4628      	mov	r0, r5
 80051b6:	4631      	mov	r1, r6
 80051b8:	f7fb fcf8 	bl	8000bac <__aeabi_uldivmod>
 80051bc:	4603      	mov	r3, r0
 80051be:	460c      	mov	r4, r1
 80051c0:	461a      	mov	r2, r3
 80051c2:	4b32      	ldr	r3, [pc, #200]	; (800528c <UART_SetConfig+0x6f4>)
 80051c4:	fba3 1302 	umull	r1, r3, r3, r2
 80051c8:	095b      	lsrs	r3, r3, #5
 80051ca:	2164      	movs	r1, #100	; 0x64
 80051cc:	fb01 f303 	mul.w	r3, r1, r3
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	011b      	lsls	r3, r3, #4
 80051d4:	3332      	adds	r3, #50	; 0x32
 80051d6:	4a2d      	ldr	r2, [pc, #180]	; (800528c <UART_SetConfig+0x6f4>)
 80051d8:	fba2 2303 	umull	r2, r3, r2, r3
 80051dc:	095b      	lsrs	r3, r3, #5
 80051de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051e2:	4498      	add	r8, r3
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	469b      	mov	fp, r3
 80051e8:	f04f 0c00 	mov.w	ip, #0
 80051ec:	46d9      	mov	r9, fp
 80051ee:	46e2      	mov	sl, ip
 80051f0:	eb19 0309 	adds.w	r3, r9, r9
 80051f4:	eb4a 040a 	adc.w	r4, sl, sl
 80051f8:	4699      	mov	r9, r3
 80051fa:	46a2      	mov	sl, r4
 80051fc:	eb19 090b 	adds.w	r9, r9, fp
 8005200:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005204:	f04f 0100 	mov.w	r1, #0
 8005208:	f04f 0200 	mov.w	r2, #0
 800520c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005210:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005214:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005218:	4689      	mov	r9, r1
 800521a:	4692      	mov	sl, r2
 800521c:	eb1b 0509 	adds.w	r5, fp, r9
 8005220:	eb4c 060a 	adc.w	r6, ip, sl
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	4619      	mov	r1, r3
 800522a:	f04f 0200 	mov.w	r2, #0
 800522e:	f04f 0300 	mov.w	r3, #0
 8005232:	f04f 0400 	mov.w	r4, #0
 8005236:	0094      	lsls	r4, r2, #2
 8005238:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800523c:	008b      	lsls	r3, r1, #2
 800523e:	461a      	mov	r2, r3
 8005240:	4623      	mov	r3, r4
 8005242:	4628      	mov	r0, r5
 8005244:	4631      	mov	r1, r6
 8005246:	f7fb fcb1 	bl	8000bac <__aeabi_uldivmod>
 800524a:	4603      	mov	r3, r0
 800524c:	460c      	mov	r4, r1
 800524e:	461a      	mov	r2, r3
 8005250:	4b0e      	ldr	r3, [pc, #56]	; (800528c <UART_SetConfig+0x6f4>)
 8005252:	fba3 1302 	umull	r1, r3, r3, r2
 8005256:	095b      	lsrs	r3, r3, #5
 8005258:	2164      	movs	r1, #100	; 0x64
 800525a:	fb01 f303 	mul.w	r3, r1, r3
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	011b      	lsls	r3, r3, #4
 8005262:	3332      	adds	r3, #50	; 0x32
 8005264:	4a09      	ldr	r2, [pc, #36]	; (800528c <UART_SetConfig+0x6f4>)
 8005266:	fba2 2303 	umull	r2, r3, r2, r3
 800526a:	095b      	lsrs	r3, r3, #5
 800526c:	f003 020f 	and.w	r2, r3, #15
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4442      	add	r2, r8
 8005276:	609a      	str	r2, [r3, #8]
}
 8005278:	e7ff      	b.n	800527a <UART_SetConfig+0x6e2>
 800527a:	bf00      	nop
 800527c:	3714      	adds	r7, #20
 800527e:	46bd      	mov	sp, r7
 8005280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005284:	40011000 	.word	0x40011000
 8005288:	40011400 	.word	0x40011400
 800528c:	51eb851f 	.word	0x51eb851f

08005290 <__errno>:
 8005290:	4b01      	ldr	r3, [pc, #4]	; (8005298 <__errno+0x8>)
 8005292:	6818      	ldr	r0, [r3, #0]
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	20000038 	.word	0x20000038

0800529c <__libc_init_array>:
 800529c:	b570      	push	{r4, r5, r6, lr}
 800529e:	4e0d      	ldr	r6, [pc, #52]	; (80052d4 <__libc_init_array+0x38>)
 80052a0:	4c0d      	ldr	r4, [pc, #52]	; (80052d8 <__libc_init_array+0x3c>)
 80052a2:	1ba4      	subs	r4, r4, r6
 80052a4:	10a4      	asrs	r4, r4, #2
 80052a6:	2500      	movs	r5, #0
 80052a8:	42a5      	cmp	r5, r4
 80052aa:	d109      	bne.n	80052c0 <__libc_init_array+0x24>
 80052ac:	4e0b      	ldr	r6, [pc, #44]	; (80052dc <__libc_init_array+0x40>)
 80052ae:	4c0c      	ldr	r4, [pc, #48]	; (80052e0 <__libc_init_array+0x44>)
 80052b0:	f001 fc38 	bl	8006b24 <_init>
 80052b4:	1ba4      	subs	r4, r4, r6
 80052b6:	10a4      	asrs	r4, r4, #2
 80052b8:	2500      	movs	r5, #0
 80052ba:	42a5      	cmp	r5, r4
 80052bc:	d105      	bne.n	80052ca <__libc_init_array+0x2e>
 80052be:	bd70      	pop	{r4, r5, r6, pc}
 80052c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052c4:	4798      	blx	r3
 80052c6:	3501      	adds	r5, #1
 80052c8:	e7ee      	b.n	80052a8 <__libc_init_array+0xc>
 80052ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052ce:	4798      	blx	r3
 80052d0:	3501      	adds	r5, #1
 80052d2:	e7f2      	b.n	80052ba <__libc_init_array+0x1e>
 80052d4:	08006d80 	.word	0x08006d80
 80052d8:	08006d80 	.word	0x08006d80
 80052dc:	08006d80 	.word	0x08006d80
 80052e0:	08006d84 	.word	0x08006d84

080052e4 <memset>:
 80052e4:	4402      	add	r2, r0
 80052e6:	4603      	mov	r3, r0
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d100      	bne.n	80052ee <memset+0xa>
 80052ec:	4770      	bx	lr
 80052ee:	f803 1b01 	strb.w	r1, [r3], #1
 80052f2:	e7f9      	b.n	80052e8 <memset+0x4>

080052f4 <siprintf>:
 80052f4:	b40e      	push	{r1, r2, r3}
 80052f6:	b500      	push	{lr}
 80052f8:	b09c      	sub	sp, #112	; 0x70
 80052fa:	ab1d      	add	r3, sp, #116	; 0x74
 80052fc:	9002      	str	r0, [sp, #8]
 80052fe:	9006      	str	r0, [sp, #24]
 8005300:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005304:	4809      	ldr	r0, [pc, #36]	; (800532c <siprintf+0x38>)
 8005306:	9107      	str	r1, [sp, #28]
 8005308:	9104      	str	r1, [sp, #16]
 800530a:	4909      	ldr	r1, [pc, #36]	; (8005330 <siprintf+0x3c>)
 800530c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005310:	9105      	str	r1, [sp, #20]
 8005312:	6800      	ldr	r0, [r0, #0]
 8005314:	9301      	str	r3, [sp, #4]
 8005316:	a902      	add	r1, sp, #8
 8005318:	f000 f866 	bl	80053e8 <_svfiprintf_r>
 800531c:	9b02      	ldr	r3, [sp, #8]
 800531e:	2200      	movs	r2, #0
 8005320:	701a      	strb	r2, [r3, #0]
 8005322:	b01c      	add	sp, #112	; 0x70
 8005324:	f85d eb04 	ldr.w	lr, [sp], #4
 8005328:	b003      	add	sp, #12
 800532a:	4770      	bx	lr
 800532c:	20000038 	.word	0x20000038
 8005330:	ffff0208 	.word	0xffff0208

08005334 <__ssputs_r>:
 8005334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005338:	688e      	ldr	r6, [r1, #8]
 800533a:	429e      	cmp	r6, r3
 800533c:	4682      	mov	sl, r0
 800533e:	460c      	mov	r4, r1
 8005340:	4690      	mov	r8, r2
 8005342:	4699      	mov	r9, r3
 8005344:	d837      	bhi.n	80053b6 <__ssputs_r+0x82>
 8005346:	898a      	ldrh	r2, [r1, #12]
 8005348:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800534c:	d031      	beq.n	80053b2 <__ssputs_r+0x7e>
 800534e:	6825      	ldr	r5, [r4, #0]
 8005350:	6909      	ldr	r1, [r1, #16]
 8005352:	1a6f      	subs	r7, r5, r1
 8005354:	6965      	ldr	r5, [r4, #20]
 8005356:	2302      	movs	r3, #2
 8005358:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800535c:	fb95 f5f3 	sdiv	r5, r5, r3
 8005360:	f109 0301 	add.w	r3, r9, #1
 8005364:	443b      	add	r3, r7
 8005366:	429d      	cmp	r5, r3
 8005368:	bf38      	it	cc
 800536a:	461d      	movcc	r5, r3
 800536c:	0553      	lsls	r3, r2, #21
 800536e:	d530      	bpl.n	80053d2 <__ssputs_r+0x9e>
 8005370:	4629      	mov	r1, r5
 8005372:	f000 fb2b 	bl	80059cc <_malloc_r>
 8005376:	4606      	mov	r6, r0
 8005378:	b950      	cbnz	r0, 8005390 <__ssputs_r+0x5c>
 800537a:	230c      	movs	r3, #12
 800537c:	f8ca 3000 	str.w	r3, [sl]
 8005380:	89a3      	ldrh	r3, [r4, #12]
 8005382:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005386:	81a3      	strh	r3, [r4, #12]
 8005388:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800538c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005390:	463a      	mov	r2, r7
 8005392:	6921      	ldr	r1, [r4, #16]
 8005394:	f000 faa8 	bl	80058e8 <memcpy>
 8005398:	89a3      	ldrh	r3, [r4, #12]
 800539a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800539e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053a2:	81a3      	strh	r3, [r4, #12]
 80053a4:	6126      	str	r6, [r4, #16]
 80053a6:	6165      	str	r5, [r4, #20]
 80053a8:	443e      	add	r6, r7
 80053aa:	1bed      	subs	r5, r5, r7
 80053ac:	6026      	str	r6, [r4, #0]
 80053ae:	60a5      	str	r5, [r4, #8]
 80053b0:	464e      	mov	r6, r9
 80053b2:	454e      	cmp	r6, r9
 80053b4:	d900      	bls.n	80053b8 <__ssputs_r+0x84>
 80053b6:	464e      	mov	r6, r9
 80053b8:	4632      	mov	r2, r6
 80053ba:	4641      	mov	r1, r8
 80053bc:	6820      	ldr	r0, [r4, #0]
 80053be:	f000 fa9e 	bl	80058fe <memmove>
 80053c2:	68a3      	ldr	r3, [r4, #8]
 80053c4:	1b9b      	subs	r3, r3, r6
 80053c6:	60a3      	str	r3, [r4, #8]
 80053c8:	6823      	ldr	r3, [r4, #0]
 80053ca:	441e      	add	r6, r3
 80053cc:	6026      	str	r6, [r4, #0]
 80053ce:	2000      	movs	r0, #0
 80053d0:	e7dc      	b.n	800538c <__ssputs_r+0x58>
 80053d2:	462a      	mov	r2, r5
 80053d4:	f000 fb54 	bl	8005a80 <_realloc_r>
 80053d8:	4606      	mov	r6, r0
 80053da:	2800      	cmp	r0, #0
 80053dc:	d1e2      	bne.n	80053a4 <__ssputs_r+0x70>
 80053de:	6921      	ldr	r1, [r4, #16]
 80053e0:	4650      	mov	r0, sl
 80053e2:	f000 faa5 	bl	8005930 <_free_r>
 80053e6:	e7c8      	b.n	800537a <__ssputs_r+0x46>

080053e8 <_svfiprintf_r>:
 80053e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ec:	461d      	mov	r5, r3
 80053ee:	898b      	ldrh	r3, [r1, #12]
 80053f0:	061f      	lsls	r7, r3, #24
 80053f2:	b09d      	sub	sp, #116	; 0x74
 80053f4:	4680      	mov	r8, r0
 80053f6:	460c      	mov	r4, r1
 80053f8:	4616      	mov	r6, r2
 80053fa:	d50f      	bpl.n	800541c <_svfiprintf_r+0x34>
 80053fc:	690b      	ldr	r3, [r1, #16]
 80053fe:	b96b      	cbnz	r3, 800541c <_svfiprintf_r+0x34>
 8005400:	2140      	movs	r1, #64	; 0x40
 8005402:	f000 fae3 	bl	80059cc <_malloc_r>
 8005406:	6020      	str	r0, [r4, #0]
 8005408:	6120      	str	r0, [r4, #16]
 800540a:	b928      	cbnz	r0, 8005418 <_svfiprintf_r+0x30>
 800540c:	230c      	movs	r3, #12
 800540e:	f8c8 3000 	str.w	r3, [r8]
 8005412:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005416:	e0c8      	b.n	80055aa <_svfiprintf_r+0x1c2>
 8005418:	2340      	movs	r3, #64	; 0x40
 800541a:	6163      	str	r3, [r4, #20]
 800541c:	2300      	movs	r3, #0
 800541e:	9309      	str	r3, [sp, #36]	; 0x24
 8005420:	2320      	movs	r3, #32
 8005422:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005426:	2330      	movs	r3, #48	; 0x30
 8005428:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800542c:	9503      	str	r5, [sp, #12]
 800542e:	f04f 0b01 	mov.w	fp, #1
 8005432:	4637      	mov	r7, r6
 8005434:	463d      	mov	r5, r7
 8005436:	f815 3b01 	ldrb.w	r3, [r5], #1
 800543a:	b10b      	cbz	r3, 8005440 <_svfiprintf_r+0x58>
 800543c:	2b25      	cmp	r3, #37	; 0x25
 800543e:	d13e      	bne.n	80054be <_svfiprintf_r+0xd6>
 8005440:	ebb7 0a06 	subs.w	sl, r7, r6
 8005444:	d00b      	beq.n	800545e <_svfiprintf_r+0x76>
 8005446:	4653      	mov	r3, sl
 8005448:	4632      	mov	r2, r6
 800544a:	4621      	mov	r1, r4
 800544c:	4640      	mov	r0, r8
 800544e:	f7ff ff71 	bl	8005334 <__ssputs_r>
 8005452:	3001      	adds	r0, #1
 8005454:	f000 80a4 	beq.w	80055a0 <_svfiprintf_r+0x1b8>
 8005458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800545a:	4453      	add	r3, sl
 800545c:	9309      	str	r3, [sp, #36]	; 0x24
 800545e:	783b      	ldrb	r3, [r7, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	f000 809d 	beq.w	80055a0 <_svfiprintf_r+0x1b8>
 8005466:	2300      	movs	r3, #0
 8005468:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800546c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005470:	9304      	str	r3, [sp, #16]
 8005472:	9307      	str	r3, [sp, #28]
 8005474:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005478:	931a      	str	r3, [sp, #104]	; 0x68
 800547a:	462f      	mov	r7, r5
 800547c:	2205      	movs	r2, #5
 800547e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005482:	4850      	ldr	r0, [pc, #320]	; (80055c4 <_svfiprintf_r+0x1dc>)
 8005484:	f7fa fea4 	bl	80001d0 <memchr>
 8005488:	9b04      	ldr	r3, [sp, #16]
 800548a:	b9d0      	cbnz	r0, 80054c2 <_svfiprintf_r+0xda>
 800548c:	06d9      	lsls	r1, r3, #27
 800548e:	bf44      	itt	mi
 8005490:	2220      	movmi	r2, #32
 8005492:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005496:	071a      	lsls	r2, r3, #28
 8005498:	bf44      	itt	mi
 800549a:	222b      	movmi	r2, #43	; 0x2b
 800549c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80054a0:	782a      	ldrb	r2, [r5, #0]
 80054a2:	2a2a      	cmp	r2, #42	; 0x2a
 80054a4:	d015      	beq.n	80054d2 <_svfiprintf_r+0xea>
 80054a6:	9a07      	ldr	r2, [sp, #28]
 80054a8:	462f      	mov	r7, r5
 80054aa:	2000      	movs	r0, #0
 80054ac:	250a      	movs	r5, #10
 80054ae:	4639      	mov	r1, r7
 80054b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054b4:	3b30      	subs	r3, #48	; 0x30
 80054b6:	2b09      	cmp	r3, #9
 80054b8:	d94d      	bls.n	8005556 <_svfiprintf_r+0x16e>
 80054ba:	b1b8      	cbz	r0, 80054ec <_svfiprintf_r+0x104>
 80054bc:	e00f      	b.n	80054de <_svfiprintf_r+0xf6>
 80054be:	462f      	mov	r7, r5
 80054c0:	e7b8      	b.n	8005434 <_svfiprintf_r+0x4c>
 80054c2:	4a40      	ldr	r2, [pc, #256]	; (80055c4 <_svfiprintf_r+0x1dc>)
 80054c4:	1a80      	subs	r0, r0, r2
 80054c6:	fa0b f000 	lsl.w	r0, fp, r0
 80054ca:	4318      	orrs	r0, r3
 80054cc:	9004      	str	r0, [sp, #16]
 80054ce:	463d      	mov	r5, r7
 80054d0:	e7d3      	b.n	800547a <_svfiprintf_r+0x92>
 80054d2:	9a03      	ldr	r2, [sp, #12]
 80054d4:	1d11      	adds	r1, r2, #4
 80054d6:	6812      	ldr	r2, [r2, #0]
 80054d8:	9103      	str	r1, [sp, #12]
 80054da:	2a00      	cmp	r2, #0
 80054dc:	db01      	blt.n	80054e2 <_svfiprintf_r+0xfa>
 80054de:	9207      	str	r2, [sp, #28]
 80054e0:	e004      	b.n	80054ec <_svfiprintf_r+0x104>
 80054e2:	4252      	negs	r2, r2
 80054e4:	f043 0302 	orr.w	r3, r3, #2
 80054e8:	9207      	str	r2, [sp, #28]
 80054ea:	9304      	str	r3, [sp, #16]
 80054ec:	783b      	ldrb	r3, [r7, #0]
 80054ee:	2b2e      	cmp	r3, #46	; 0x2e
 80054f0:	d10c      	bne.n	800550c <_svfiprintf_r+0x124>
 80054f2:	787b      	ldrb	r3, [r7, #1]
 80054f4:	2b2a      	cmp	r3, #42	; 0x2a
 80054f6:	d133      	bne.n	8005560 <_svfiprintf_r+0x178>
 80054f8:	9b03      	ldr	r3, [sp, #12]
 80054fa:	1d1a      	adds	r2, r3, #4
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	9203      	str	r2, [sp, #12]
 8005500:	2b00      	cmp	r3, #0
 8005502:	bfb8      	it	lt
 8005504:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005508:	3702      	adds	r7, #2
 800550a:	9305      	str	r3, [sp, #20]
 800550c:	4d2e      	ldr	r5, [pc, #184]	; (80055c8 <_svfiprintf_r+0x1e0>)
 800550e:	7839      	ldrb	r1, [r7, #0]
 8005510:	2203      	movs	r2, #3
 8005512:	4628      	mov	r0, r5
 8005514:	f7fa fe5c 	bl	80001d0 <memchr>
 8005518:	b138      	cbz	r0, 800552a <_svfiprintf_r+0x142>
 800551a:	2340      	movs	r3, #64	; 0x40
 800551c:	1b40      	subs	r0, r0, r5
 800551e:	fa03 f000 	lsl.w	r0, r3, r0
 8005522:	9b04      	ldr	r3, [sp, #16]
 8005524:	4303      	orrs	r3, r0
 8005526:	3701      	adds	r7, #1
 8005528:	9304      	str	r3, [sp, #16]
 800552a:	7839      	ldrb	r1, [r7, #0]
 800552c:	4827      	ldr	r0, [pc, #156]	; (80055cc <_svfiprintf_r+0x1e4>)
 800552e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005532:	2206      	movs	r2, #6
 8005534:	1c7e      	adds	r6, r7, #1
 8005536:	f7fa fe4b 	bl	80001d0 <memchr>
 800553a:	2800      	cmp	r0, #0
 800553c:	d038      	beq.n	80055b0 <_svfiprintf_r+0x1c8>
 800553e:	4b24      	ldr	r3, [pc, #144]	; (80055d0 <_svfiprintf_r+0x1e8>)
 8005540:	bb13      	cbnz	r3, 8005588 <_svfiprintf_r+0x1a0>
 8005542:	9b03      	ldr	r3, [sp, #12]
 8005544:	3307      	adds	r3, #7
 8005546:	f023 0307 	bic.w	r3, r3, #7
 800554a:	3308      	adds	r3, #8
 800554c:	9303      	str	r3, [sp, #12]
 800554e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005550:	444b      	add	r3, r9
 8005552:	9309      	str	r3, [sp, #36]	; 0x24
 8005554:	e76d      	b.n	8005432 <_svfiprintf_r+0x4a>
 8005556:	fb05 3202 	mla	r2, r5, r2, r3
 800555a:	2001      	movs	r0, #1
 800555c:	460f      	mov	r7, r1
 800555e:	e7a6      	b.n	80054ae <_svfiprintf_r+0xc6>
 8005560:	2300      	movs	r3, #0
 8005562:	3701      	adds	r7, #1
 8005564:	9305      	str	r3, [sp, #20]
 8005566:	4619      	mov	r1, r3
 8005568:	250a      	movs	r5, #10
 800556a:	4638      	mov	r0, r7
 800556c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005570:	3a30      	subs	r2, #48	; 0x30
 8005572:	2a09      	cmp	r2, #9
 8005574:	d903      	bls.n	800557e <_svfiprintf_r+0x196>
 8005576:	2b00      	cmp	r3, #0
 8005578:	d0c8      	beq.n	800550c <_svfiprintf_r+0x124>
 800557a:	9105      	str	r1, [sp, #20]
 800557c:	e7c6      	b.n	800550c <_svfiprintf_r+0x124>
 800557e:	fb05 2101 	mla	r1, r5, r1, r2
 8005582:	2301      	movs	r3, #1
 8005584:	4607      	mov	r7, r0
 8005586:	e7f0      	b.n	800556a <_svfiprintf_r+0x182>
 8005588:	ab03      	add	r3, sp, #12
 800558a:	9300      	str	r3, [sp, #0]
 800558c:	4622      	mov	r2, r4
 800558e:	4b11      	ldr	r3, [pc, #68]	; (80055d4 <_svfiprintf_r+0x1ec>)
 8005590:	a904      	add	r1, sp, #16
 8005592:	4640      	mov	r0, r8
 8005594:	f3af 8000 	nop.w
 8005598:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800559c:	4681      	mov	r9, r0
 800559e:	d1d6      	bne.n	800554e <_svfiprintf_r+0x166>
 80055a0:	89a3      	ldrh	r3, [r4, #12]
 80055a2:	065b      	lsls	r3, r3, #25
 80055a4:	f53f af35 	bmi.w	8005412 <_svfiprintf_r+0x2a>
 80055a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055aa:	b01d      	add	sp, #116	; 0x74
 80055ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055b0:	ab03      	add	r3, sp, #12
 80055b2:	9300      	str	r3, [sp, #0]
 80055b4:	4622      	mov	r2, r4
 80055b6:	4b07      	ldr	r3, [pc, #28]	; (80055d4 <_svfiprintf_r+0x1ec>)
 80055b8:	a904      	add	r1, sp, #16
 80055ba:	4640      	mov	r0, r8
 80055bc:	f000 f882 	bl	80056c4 <_printf_i>
 80055c0:	e7ea      	b.n	8005598 <_svfiprintf_r+0x1b0>
 80055c2:	bf00      	nop
 80055c4:	08006b68 	.word	0x08006b68
 80055c8:	08006b6e 	.word	0x08006b6e
 80055cc:	08006b72 	.word	0x08006b72
 80055d0:	00000000 	.word	0x00000000
 80055d4:	08005335 	.word	0x08005335

080055d8 <_printf_common>:
 80055d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055dc:	4691      	mov	r9, r2
 80055de:	461f      	mov	r7, r3
 80055e0:	688a      	ldr	r2, [r1, #8]
 80055e2:	690b      	ldr	r3, [r1, #16]
 80055e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055e8:	4293      	cmp	r3, r2
 80055ea:	bfb8      	it	lt
 80055ec:	4613      	movlt	r3, r2
 80055ee:	f8c9 3000 	str.w	r3, [r9]
 80055f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055f6:	4606      	mov	r6, r0
 80055f8:	460c      	mov	r4, r1
 80055fa:	b112      	cbz	r2, 8005602 <_printf_common+0x2a>
 80055fc:	3301      	adds	r3, #1
 80055fe:	f8c9 3000 	str.w	r3, [r9]
 8005602:	6823      	ldr	r3, [r4, #0]
 8005604:	0699      	lsls	r1, r3, #26
 8005606:	bf42      	ittt	mi
 8005608:	f8d9 3000 	ldrmi.w	r3, [r9]
 800560c:	3302      	addmi	r3, #2
 800560e:	f8c9 3000 	strmi.w	r3, [r9]
 8005612:	6825      	ldr	r5, [r4, #0]
 8005614:	f015 0506 	ands.w	r5, r5, #6
 8005618:	d107      	bne.n	800562a <_printf_common+0x52>
 800561a:	f104 0a19 	add.w	sl, r4, #25
 800561e:	68e3      	ldr	r3, [r4, #12]
 8005620:	f8d9 2000 	ldr.w	r2, [r9]
 8005624:	1a9b      	subs	r3, r3, r2
 8005626:	42ab      	cmp	r3, r5
 8005628:	dc28      	bgt.n	800567c <_printf_common+0xa4>
 800562a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800562e:	6822      	ldr	r2, [r4, #0]
 8005630:	3300      	adds	r3, #0
 8005632:	bf18      	it	ne
 8005634:	2301      	movne	r3, #1
 8005636:	0692      	lsls	r2, r2, #26
 8005638:	d42d      	bmi.n	8005696 <_printf_common+0xbe>
 800563a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800563e:	4639      	mov	r1, r7
 8005640:	4630      	mov	r0, r6
 8005642:	47c0      	blx	r8
 8005644:	3001      	adds	r0, #1
 8005646:	d020      	beq.n	800568a <_printf_common+0xb2>
 8005648:	6823      	ldr	r3, [r4, #0]
 800564a:	68e5      	ldr	r5, [r4, #12]
 800564c:	f8d9 2000 	ldr.w	r2, [r9]
 8005650:	f003 0306 	and.w	r3, r3, #6
 8005654:	2b04      	cmp	r3, #4
 8005656:	bf08      	it	eq
 8005658:	1aad      	subeq	r5, r5, r2
 800565a:	68a3      	ldr	r3, [r4, #8]
 800565c:	6922      	ldr	r2, [r4, #16]
 800565e:	bf0c      	ite	eq
 8005660:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005664:	2500      	movne	r5, #0
 8005666:	4293      	cmp	r3, r2
 8005668:	bfc4      	itt	gt
 800566a:	1a9b      	subgt	r3, r3, r2
 800566c:	18ed      	addgt	r5, r5, r3
 800566e:	f04f 0900 	mov.w	r9, #0
 8005672:	341a      	adds	r4, #26
 8005674:	454d      	cmp	r5, r9
 8005676:	d11a      	bne.n	80056ae <_printf_common+0xd6>
 8005678:	2000      	movs	r0, #0
 800567a:	e008      	b.n	800568e <_printf_common+0xb6>
 800567c:	2301      	movs	r3, #1
 800567e:	4652      	mov	r2, sl
 8005680:	4639      	mov	r1, r7
 8005682:	4630      	mov	r0, r6
 8005684:	47c0      	blx	r8
 8005686:	3001      	adds	r0, #1
 8005688:	d103      	bne.n	8005692 <_printf_common+0xba>
 800568a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800568e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005692:	3501      	adds	r5, #1
 8005694:	e7c3      	b.n	800561e <_printf_common+0x46>
 8005696:	18e1      	adds	r1, r4, r3
 8005698:	1c5a      	adds	r2, r3, #1
 800569a:	2030      	movs	r0, #48	; 0x30
 800569c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056a0:	4422      	add	r2, r4
 80056a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056aa:	3302      	adds	r3, #2
 80056ac:	e7c5      	b.n	800563a <_printf_common+0x62>
 80056ae:	2301      	movs	r3, #1
 80056b0:	4622      	mov	r2, r4
 80056b2:	4639      	mov	r1, r7
 80056b4:	4630      	mov	r0, r6
 80056b6:	47c0      	blx	r8
 80056b8:	3001      	adds	r0, #1
 80056ba:	d0e6      	beq.n	800568a <_printf_common+0xb2>
 80056bc:	f109 0901 	add.w	r9, r9, #1
 80056c0:	e7d8      	b.n	8005674 <_printf_common+0x9c>
	...

080056c4 <_printf_i>:
 80056c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80056c8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80056cc:	460c      	mov	r4, r1
 80056ce:	7e09      	ldrb	r1, [r1, #24]
 80056d0:	b085      	sub	sp, #20
 80056d2:	296e      	cmp	r1, #110	; 0x6e
 80056d4:	4617      	mov	r7, r2
 80056d6:	4606      	mov	r6, r0
 80056d8:	4698      	mov	r8, r3
 80056da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80056dc:	f000 80b3 	beq.w	8005846 <_printf_i+0x182>
 80056e0:	d822      	bhi.n	8005728 <_printf_i+0x64>
 80056e2:	2963      	cmp	r1, #99	; 0x63
 80056e4:	d036      	beq.n	8005754 <_printf_i+0x90>
 80056e6:	d80a      	bhi.n	80056fe <_printf_i+0x3a>
 80056e8:	2900      	cmp	r1, #0
 80056ea:	f000 80b9 	beq.w	8005860 <_printf_i+0x19c>
 80056ee:	2958      	cmp	r1, #88	; 0x58
 80056f0:	f000 8083 	beq.w	80057fa <_printf_i+0x136>
 80056f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056f8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80056fc:	e032      	b.n	8005764 <_printf_i+0xa0>
 80056fe:	2964      	cmp	r1, #100	; 0x64
 8005700:	d001      	beq.n	8005706 <_printf_i+0x42>
 8005702:	2969      	cmp	r1, #105	; 0x69
 8005704:	d1f6      	bne.n	80056f4 <_printf_i+0x30>
 8005706:	6820      	ldr	r0, [r4, #0]
 8005708:	6813      	ldr	r3, [r2, #0]
 800570a:	0605      	lsls	r5, r0, #24
 800570c:	f103 0104 	add.w	r1, r3, #4
 8005710:	d52a      	bpl.n	8005768 <_printf_i+0xa4>
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	6011      	str	r1, [r2, #0]
 8005716:	2b00      	cmp	r3, #0
 8005718:	da03      	bge.n	8005722 <_printf_i+0x5e>
 800571a:	222d      	movs	r2, #45	; 0x2d
 800571c:	425b      	negs	r3, r3
 800571e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005722:	486f      	ldr	r0, [pc, #444]	; (80058e0 <_printf_i+0x21c>)
 8005724:	220a      	movs	r2, #10
 8005726:	e039      	b.n	800579c <_printf_i+0xd8>
 8005728:	2973      	cmp	r1, #115	; 0x73
 800572a:	f000 809d 	beq.w	8005868 <_printf_i+0x1a4>
 800572e:	d808      	bhi.n	8005742 <_printf_i+0x7e>
 8005730:	296f      	cmp	r1, #111	; 0x6f
 8005732:	d020      	beq.n	8005776 <_printf_i+0xb2>
 8005734:	2970      	cmp	r1, #112	; 0x70
 8005736:	d1dd      	bne.n	80056f4 <_printf_i+0x30>
 8005738:	6823      	ldr	r3, [r4, #0]
 800573a:	f043 0320 	orr.w	r3, r3, #32
 800573e:	6023      	str	r3, [r4, #0]
 8005740:	e003      	b.n	800574a <_printf_i+0x86>
 8005742:	2975      	cmp	r1, #117	; 0x75
 8005744:	d017      	beq.n	8005776 <_printf_i+0xb2>
 8005746:	2978      	cmp	r1, #120	; 0x78
 8005748:	d1d4      	bne.n	80056f4 <_printf_i+0x30>
 800574a:	2378      	movs	r3, #120	; 0x78
 800574c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005750:	4864      	ldr	r0, [pc, #400]	; (80058e4 <_printf_i+0x220>)
 8005752:	e055      	b.n	8005800 <_printf_i+0x13c>
 8005754:	6813      	ldr	r3, [r2, #0]
 8005756:	1d19      	adds	r1, r3, #4
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	6011      	str	r1, [r2, #0]
 800575c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005760:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005764:	2301      	movs	r3, #1
 8005766:	e08c      	b.n	8005882 <_printf_i+0x1be>
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	6011      	str	r1, [r2, #0]
 800576c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005770:	bf18      	it	ne
 8005772:	b21b      	sxthne	r3, r3
 8005774:	e7cf      	b.n	8005716 <_printf_i+0x52>
 8005776:	6813      	ldr	r3, [r2, #0]
 8005778:	6825      	ldr	r5, [r4, #0]
 800577a:	1d18      	adds	r0, r3, #4
 800577c:	6010      	str	r0, [r2, #0]
 800577e:	0628      	lsls	r0, r5, #24
 8005780:	d501      	bpl.n	8005786 <_printf_i+0xc2>
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	e002      	b.n	800578c <_printf_i+0xc8>
 8005786:	0668      	lsls	r0, r5, #25
 8005788:	d5fb      	bpl.n	8005782 <_printf_i+0xbe>
 800578a:	881b      	ldrh	r3, [r3, #0]
 800578c:	4854      	ldr	r0, [pc, #336]	; (80058e0 <_printf_i+0x21c>)
 800578e:	296f      	cmp	r1, #111	; 0x6f
 8005790:	bf14      	ite	ne
 8005792:	220a      	movne	r2, #10
 8005794:	2208      	moveq	r2, #8
 8005796:	2100      	movs	r1, #0
 8005798:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800579c:	6865      	ldr	r5, [r4, #4]
 800579e:	60a5      	str	r5, [r4, #8]
 80057a0:	2d00      	cmp	r5, #0
 80057a2:	f2c0 8095 	blt.w	80058d0 <_printf_i+0x20c>
 80057a6:	6821      	ldr	r1, [r4, #0]
 80057a8:	f021 0104 	bic.w	r1, r1, #4
 80057ac:	6021      	str	r1, [r4, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d13d      	bne.n	800582e <_printf_i+0x16a>
 80057b2:	2d00      	cmp	r5, #0
 80057b4:	f040 808e 	bne.w	80058d4 <_printf_i+0x210>
 80057b8:	4665      	mov	r5, ip
 80057ba:	2a08      	cmp	r2, #8
 80057bc:	d10b      	bne.n	80057d6 <_printf_i+0x112>
 80057be:	6823      	ldr	r3, [r4, #0]
 80057c0:	07db      	lsls	r3, r3, #31
 80057c2:	d508      	bpl.n	80057d6 <_printf_i+0x112>
 80057c4:	6923      	ldr	r3, [r4, #16]
 80057c6:	6862      	ldr	r2, [r4, #4]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	bfde      	ittt	le
 80057cc:	2330      	movle	r3, #48	; 0x30
 80057ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80057d2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80057d6:	ebac 0305 	sub.w	r3, ip, r5
 80057da:	6123      	str	r3, [r4, #16]
 80057dc:	f8cd 8000 	str.w	r8, [sp]
 80057e0:	463b      	mov	r3, r7
 80057e2:	aa03      	add	r2, sp, #12
 80057e4:	4621      	mov	r1, r4
 80057e6:	4630      	mov	r0, r6
 80057e8:	f7ff fef6 	bl	80055d8 <_printf_common>
 80057ec:	3001      	adds	r0, #1
 80057ee:	d14d      	bne.n	800588c <_printf_i+0x1c8>
 80057f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057f4:	b005      	add	sp, #20
 80057f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80057fa:	4839      	ldr	r0, [pc, #228]	; (80058e0 <_printf_i+0x21c>)
 80057fc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005800:	6813      	ldr	r3, [r2, #0]
 8005802:	6821      	ldr	r1, [r4, #0]
 8005804:	1d1d      	adds	r5, r3, #4
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	6015      	str	r5, [r2, #0]
 800580a:	060a      	lsls	r2, r1, #24
 800580c:	d50b      	bpl.n	8005826 <_printf_i+0x162>
 800580e:	07ca      	lsls	r2, r1, #31
 8005810:	bf44      	itt	mi
 8005812:	f041 0120 	orrmi.w	r1, r1, #32
 8005816:	6021      	strmi	r1, [r4, #0]
 8005818:	b91b      	cbnz	r3, 8005822 <_printf_i+0x15e>
 800581a:	6822      	ldr	r2, [r4, #0]
 800581c:	f022 0220 	bic.w	r2, r2, #32
 8005820:	6022      	str	r2, [r4, #0]
 8005822:	2210      	movs	r2, #16
 8005824:	e7b7      	b.n	8005796 <_printf_i+0xd2>
 8005826:	064d      	lsls	r5, r1, #25
 8005828:	bf48      	it	mi
 800582a:	b29b      	uxthmi	r3, r3
 800582c:	e7ef      	b.n	800580e <_printf_i+0x14a>
 800582e:	4665      	mov	r5, ip
 8005830:	fbb3 f1f2 	udiv	r1, r3, r2
 8005834:	fb02 3311 	mls	r3, r2, r1, r3
 8005838:	5cc3      	ldrb	r3, [r0, r3]
 800583a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800583e:	460b      	mov	r3, r1
 8005840:	2900      	cmp	r1, #0
 8005842:	d1f5      	bne.n	8005830 <_printf_i+0x16c>
 8005844:	e7b9      	b.n	80057ba <_printf_i+0xf6>
 8005846:	6813      	ldr	r3, [r2, #0]
 8005848:	6825      	ldr	r5, [r4, #0]
 800584a:	6961      	ldr	r1, [r4, #20]
 800584c:	1d18      	adds	r0, r3, #4
 800584e:	6010      	str	r0, [r2, #0]
 8005850:	0628      	lsls	r0, r5, #24
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	d501      	bpl.n	800585a <_printf_i+0x196>
 8005856:	6019      	str	r1, [r3, #0]
 8005858:	e002      	b.n	8005860 <_printf_i+0x19c>
 800585a:	066a      	lsls	r2, r5, #25
 800585c:	d5fb      	bpl.n	8005856 <_printf_i+0x192>
 800585e:	8019      	strh	r1, [r3, #0]
 8005860:	2300      	movs	r3, #0
 8005862:	6123      	str	r3, [r4, #16]
 8005864:	4665      	mov	r5, ip
 8005866:	e7b9      	b.n	80057dc <_printf_i+0x118>
 8005868:	6813      	ldr	r3, [r2, #0]
 800586a:	1d19      	adds	r1, r3, #4
 800586c:	6011      	str	r1, [r2, #0]
 800586e:	681d      	ldr	r5, [r3, #0]
 8005870:	6862      	ldr	r2, [r4, #4]
 8005872:	2100      	movs	r1, #0
 8005874:	4628      	mov	r0, r5
 8005876:	f7fa fcab 	bl	80001d0 <memchr>
 800587a:	b108      	cbz	r0, 8005880 <_printf_i+0x1bc>
 800587c:	1b40      	subs	r0, r0, r5
 800587e:	6060      	str	r0, [r4, #4]
 8005880:	6863      	ldr	r3, [r4, #4]
 8005882:	6123      	str	r3, [r4, #16]
 8005884:	2300      	movs	r3, #0
 8005886:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800588a:	e7a7      	b.n	80057dc <_printf_i+0x118>
 800588c:	6923      	ldr	r3, [r4, #16]
 800588e:	462a      	mov	r2, r5
 8005890:	4639      	mov	r1, r7
 8005892:	4630      	mov	r0, r6
 8005894:	47c0      	blx	r8
 8005896:	3001      	adds	r0, #1
 8005898:	d0aa      	beq.n	80057f0 <_printf_i+0x12c>
 800589a:	6823      	ldr	r3, [r4, #0]
 800589c:	079b      	lsls	r3, r3, #30
 800589e:	d413      	bmi.n	80058c8 <_printf_i+0x204>
 80058a0:	68e0      	ldr	r0, [r4, #12]
 80058a2:	9b03      	ldr	r3, [sp, #12]
 80058a4:	4298      	cmp	r0, r3
 80058a6:	bfb8      	it	lt
 80058a8:	4618      	movlt	r0, r3
 80058aa:	e7a3      	b.n	80057f4 <_printf_i+0x130>
 80058ac:	2301      	movs	r3, #1
 80058ae:	464a      	mov	r2, r9
 80058b0:	4639      	mov	r1, r7
 80058b2:	4630      	mov	r0, r6
 80058b4:	47c0      	blx	r8
 80058b6:	3001      	adds	r0, #1
 80058b8:	d09a      	beq.n	80057f0 <_printf_i+0x12c>
 80058ba:	3501      	adds	r5, #1
 80058bc:	68e3      	ldr	r3, [r4, #12]
 80058be:	9a03      	ldr	r2, [sp, #12]
 80058c0:	1a9b      	subs	r3, r3, r2
 80058c2:	42ab      	cmp	r3, r5
 80058c4:	dcf2      	bgt.n	80058ac <_printf_i+0x1e8>
 80058c6:	e7eb      	b.n	80058a0 <_printf_i+0x1dc>
 80058c8:	2500      	movs	r5, #0
 80058ca:	f104 0919 	add.w	r9, r4, #25
 80058ce:	e7f5      	b.n	80058bc <_printf_i+0x1f8>
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d1ac      	bne.n	800582e <_printf_i+0x16a>
 80058d4:	7803      	ldrb	r3, [r0, #0]
 80058d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058de:	e76c      	b.n	80057ba <_printf_i+0xf6>
 80058e0:	08006b79 	.word	0x08006b79
 80058e4:	08006b8a 	.word	0x08006b8a

080058e8 <memcpy>:
 80058e8:	b510      	push	{r4, lr}
 80058ea:	1e43      	subs	r3, r0, #1
 80058ec:	440a      	add	r2, r1
 80058ee:	4291      	cmp	r1, r2
 80058f0:	d100      	bne.n	80058f4 <memcpy+0xc>
 80058f2:	bd10      	pop	{r4, pc}
 80058f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058fc:	e7f7      	b.n	80058ee <memcpy+0x6>

080058fe <memmove>:
 80058fe:	4288      	cmp	r0, r1
 8005900:	b510      	push	{r4, lr}
 8005902:	eb01 0302 	add.w	r3, r1, r2
 8005906:	d807      	bhi.n	8005918 <memmove+0x1a>
 8005908:	1e42      	subs	r2, r0, #1
 800590a:	4299      	cmp	r1, r3
 800590c:	d00a      	beq.n	8005924 <memmove+0x26>
 800590e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005912:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005916:	e7f8      	b.n	800590a <memmove+0xc>
 8005918:	4283      	cmp	r3, r0
 800591a:	d9f5      	bls.n	8005908 <memmove+0xa>
 800591c:	1881      	adds	r1, r0, r2
 800591e:	1ad2      	subs	r2, r2, r3
 8005920:	42d3      	cmn	r3, r2
 8005922:	d100      	bne.n	8005926 <memmove+0x28>
 8005924:	bd10      	pop	{r4, pc}
 8005926:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800592a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800592e:	e7f7      	b.n	8005920 <memmove+0x22>

08005930 <_free_r>:
 8005930:	b538      	push	{r3, r4, r5, lr}
 8005932:	4605      	mov	r5, r0
 8005934:	2900      	cmp	r1, #0
 8005936:	d045      	beq.n	80059c4 <_free_r+0x94>
 8005938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800593c:	1f0c      	subs	r4, r1, #4
 800593e:	2b00      	cmp	r3, #0
 8005940:	bfb8      	it	lt
 8005942:	18e4      	addlt	r4, r4, r3
 8005944:	f000 f8d2 	bl	8005aec <__malloc_lock>
 8005948:	4a1f      	ldr	r2, [pc, #124]	; (80059c8 <_free_r+0x98>)
 800594a:	6813      	ldr	r3, [r2, #0]
 800594c:	4610      	mov	r0, r2
 800594e:	b933      	cbnz	r3, 800595e <_free_r+0x2e>
 8005950:	6063      	str	r3, [r4, #4]
 8005952:	6014      	str	r4, [r2, #0]
 8005954:	4628      	mov	r0, r5
 8005956:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800595a:	f000 b8c8 	b.w	8005aee <__malloc_unlock>
 800595e:	42a3      	cmp	r3, r4
 8005960:	d90c      	bls.n	800597c <_free_r+0x4c>
 8005962:	6821      	ldr	r1, [r4, #0]
 8005964:	1862      	adds	r2, r4, r1
 8005966:	4293      	cmp	r3, r2
 8005968:	bf04      	itt	eq
 800596a:	681a      	ldreq	r2, [r3, #0]
 800596c:	685b      	ldreq	r3, [r3, #4]
 800596e:	6063      	str	r3, [r4, #4]
 8005970:	bf04      	itt	eq
 8005972:	1852      	addeq	r2, r2, r1
 8005974:	6022      	streq	r2, [r4, #0]
 8005976:	6004      	str	r4, [r0, #0]
 8005978:	e7ec      	b.n	8005954 <_free_r+0x24>
 800597a:	4613      	mov	r3, r2
 800597c:	685a      	ldr	r2, [r3, #4]
 800597e:	b10a      	cbz	r2, 8005984 <_free_r+0x54>
 8005980:	42a2      	cmp	r2, r4
 8005982:	d9fa      	bls.n	800597a <_free_r+0x4a>
 8005984:	6819      	ldr	r1, [r3, #0]
 8005986:	1858      	adds	r0, r3, r1
 8005988:	42a0      	cmp	r0, r4
 800598a:	d10b      	bne.n	80059a4 <_free_r+0x74>
 800598c:	6820      	ldr	r0, [r4, #0]
 800598e:	4401      	add	r1, r0
 8005990:	1858      	adds	r0, r3, r1
 8005992:	4282      	cmp	r2, r0
 8005994:	6019      	str	r1, [r3, #0]
 8005996:	d1dd      	bne.n	8005954 <_free_r+0x24>
 8005998:	6810      	ldr	r0, [r2, #0]
 800599a:	6852      	ldr	r2, [r2, #4]
 800599c:	605a      	str	r2, [r3, #4]
 800599e:	4401      	add	r1, r0
 80059a0:	6019      	str	r1, [r3, #0]
 80059a2:	e7d7      	b.n	8005954 <_free_r+0x24>
 80059a4:	d902      	bls.n	80059ac <_free_r+0x7c>
 80059a6:	230c      	movs	r3, #12
 80059a8:	602b      	str	r3, [r5, #0]
 80059aa:	e7d3      	b.n	8005954 <_free_r+0x24>
 80059ac:	6820      	ldr	r0, [r4, #0]
 80059ae:	1821      	adds	r1, r4, r0
 80059b0:	428a      	cmp	r2, r1
 80059b2:	bf04      	itt	eq
 80059b4:	6811      	ldreq	r1, [r2, #0]
 80059b6:	6852      	ldreq	r2, [r2, #4]
 80059b8:	6062      	str	r2, [r4, #4]
 80059ba:	bf04      	itt	eq
 80059bc:	1809      	addeq	r1, r1, r0
 80059be:	6021      	streq	r1, [r4, #0]
 80059c0:	605c      	str	r4, [r3, #4]
 80059c2:	e7c7      	b.n	8005954 <_free_r+0x24>
 80059c4:	bd38      	pop	{r3, r4, r5, pc}
 80059c6:	bf00      	nop
 80059c8:	20012100 	.word	0x20012100

080059cc <_malloc_r>:
 80059cc:	b570      	push	{r4, r5, r6, lr}
 80059ce:	1ccd      	adds	r5, r1, #3
 80059d0:	f025 0503 	bic.w	r5, r5, #3
 80059d4:	3508      	adds	r5, #8
 80059d6:	2d0c      	cmp	r5, #12
 80059d8:	bf38      	it	cc
 80059da:	250c      	movcc	r5, #12
 80059dc:	2d00      	cmp	r5, #0
 80059de:	4606      	mov	r6, r0
 80059e0:	db01      	blt.n	80059e6 <_malloc_r+0x1a>
 80059e2:	42a9      	cmp	r1, r5
 80059e4:	d903      	bls.n	80059ee <_malloc_r+0x22>
 80059e6:	230c      	movs	r3, #12
 80059e8:	6033      	str	r3, [r6, #0]
 80059ea:	2000      	movs	r0, #0
 80059ec:	bd70      	pop	{r4, r5, r6, pc}
 80059ee:	f000 f87d 	bl	8005aec <__malloc_lock>
 80059f2:	4a21      	ldr	r2, [pc, #132]	; (8005a78 <_malloc_r+0xac>)
 80059f4:	6814      	ldr	r4, [r2, #0]
 80059f6:	4621      	mov	r1, r4
 80059f8:	b991      	cbnz	r1, 8005a20 <_malloc_r+0x54>
 80059fa:	4c20      	ldr	r4, [pc, #128]	; (8005a7c <_malloc_r+0xb0>)
 80059fc:	6823      	ldr	r3, [r4, #0]
 80059fe:	b91b      	cbnz	r3, 8005a08 <_malloc_r+0x3c>
 8005a00:	4630      	mov	r0, r6
 8005a02:	f000 f863 	bl	8005acc <_sbrk_r>
 8005a06:	6020      	str	r0, [r4, #0]
 8005a08:	4629      	mov	r1, r5
 8005a0a:	4630      	mov	r0, r6
 8005a0c:	f000 f85e 	bl	8005acc <_sbrk_r>
 8005a10:	1c43      	adds	r3, r0, #1
 8005a12:	d124      	bne.n	8005a5e <_malloc_r+0x92>
 8005a14:	230c      	movs	r3, #12
 8005a16:	6033      	str	r3, [r6, #0]
 8005a18:	4630      	mov	r0, r6
 8005a1a:	f000 f868 	bl	8005aee <__malloc_unlock>
 8005a1e:	e7e4      	b.n	80059ea <_malloc_r+0x1e>
 8005a20:	680b      	ldr	r3, [r1, #0]
 8005a22:	1b5b      	subs	r3, r3, r5
 8005a24:	d418      	bmi.n	8005a58 <_malloc_r+0x8c>
 8005a26:	2b0b      	cmp	r3, #11
 8005a28:	d90f      	bls.n	8005a4a <_malloc_r+0x7e>
 8005a2a:	600b      	str	r3, [r1, #0]
 8005a2c:	50cd      	str	r5, [r1, r3]
 8005a2e:	18cc      	adds	r4, r1, r3
 8005a30:	4630      	mov	r0, r6
 8005a32:	f000 f85c 	bl	8005aee <__malloc_unlock>
 8005a36:	f104 000b 	add.w	r0, r4, #11
 8005a3a:	1d23      	adds	r3, r4, #4
 8005a3c:	f020 0007 	bic.w	r0, r0, #7
 8005a40:	1ac3      	subs	r3, r0, r3
 8005a42:	d0d3      	beq.n	80059ec <_malloc_r+0x20>
 8005a44:	425a      	negs	r2, r3
 8005a46:	50e2      	str	r2, [r4, r3]
 8005a48:	e7d0      	b.n	80059ec <_malloc_r+0x20>
 8005a4a:	428c      	cmp	r4, r1
 8005a4c:	684b      	ldr	r3, [r1, #4]
 8005a4e:	bf16      	itet	ne
 8005a50:	6063      	strne	r3, [r4, #4]
 8005a52:	6013      	streq	r3, [r2, #0]
 8005a54:	460c      	movne	r4, r1
 8005a56:	e7eb      	b.n	8005a30 <_malloc_r+0x64>
 8005a58:	460c      	mov	r4, r1
 8005a5a:	6849      	ldr	r1, [r1, #4]
 8005a5c:	e7cc      	b.n	80059f8 <_malloc_r+0x2c>
 8005a5e:	1cc4      	adds	r4, r0, #3
 8005a60:	f024 0403 	bic.w	r4, r4, #3
 8005a64:	42a0      	cmp	r0, r4
 8005a66:	d005      	beq.n	8005a74 <_malloc_r+0xa8>
 8005a68:	1a21      	subs	r1, r4, r0
 8005a6a:	4630      	mov	r0, r6
 8005a6c:	f000 f82e 	bl	8005acc <_sbrk_r>
 8005a70:	3001      	adds	r0, #1
 8005a72:	d0cf      	beq.n	8005a14 <_malloc_r+0x48>
 8005a74:	6025      	str	r5, [r4, #0]
 8005a76:	e7db      	b.n	8005a30 <_malloc_r+0x64>
 8005a78:	20012100 	.word	0x20012100
 8005a7c:	20012104 	.word	0x20012104

08005a80 <_realloc_r>:
 8005a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a82:	4607      	mov	r7, r0
 8005a84:	4614      	mov	r4, r2
 8005a86:	460e      	mov	r6, r1
 8005a88:	b921      	cbnz	r1, 8005a94 <_realloc_r+0x14>
 8005a8a:	4611      	mov	r1, r2
 8005a8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005a90:	f7ff bf9c 	b.w	80059cc <_malloc_r>
 8005a94:	b922      	cbnz	r2, 8005aa0 <_realloc_r+0x20>
 8005a96:	f7ff ff4b 	bl	8005930 <_free_r>
 8005a9a:	4625      	mov	r5, r4
 8005a9c:	4628      	mov	r0, r5
 8005a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005aa0:	f000 f826 	bl	8005af0 <_malloc_usable_size_r>
 8005aa4:	42a0      	cmp	r0, r4
 8005aa6:	d20f      	bcs.n	8005ac8 <_realloc_r+0x48>
 8005aa8:	4621      	mov	r1, r4
 8005aaa:	4638      	mov	r0, r7
 8005aac:	f7ff ff8e 	bl	80059cc <_malloc_r>
 8005ab0:	4605      	mov	r5, r0
 8005ab2:	2800      	cmp	r0, #0
 8005ab4:	d0f2      	beq.n	8005a9c <_realloc_r+0x1c>
 8005ab6:	4631      	mov	r1, r6
 8005ab8:	4622      	mov	r2, r4
 8005aba:	f7ff ff15 	bl	80058e8 <memcpy>
 8005abe:	4631      	mov	r1, r6
 8005ac0:	4638      	mov	r0, r7
 8005ac2:	f7ff ff35 	bl	8005930 <_free_r>
 8005ac6:	e7e9      	b.n	8005a9c <_realloc_r+0x1c>
 8005ac8:	4635      	mov	r5, r6
 8005aca:	e7e7      	b.n	8005a9c <_realloc_r+0x1c>

08005acc <_sbrk_r>:
 8005acc:	b538      	push	{r3, r4, r5, lr}
 8005ace:	4c06      	ldr	r4, [pc, #24]	; (8005ae8 <_sbrk_r+0x1c>)
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	4605      	mov	r5, r0
 8005ad4:	4608      	mov	r0, r1
 8005ad6:	6023      	str	r3, [r4, #0]
 8005ad8:	f7fc f9b6 	bl	8001e48 <_sbrk>
 8005adc:	1c43      	adds	r3, r0, #1
 8005ade:	d102      	bne.n	8005ae6 <_sbrk_r+0x1a>
 8005ae0:	6823      	ldr	r3, [r4, #0]
 8005ae2:	b103      	cbz	r3, 8005ae6 <_sbrk_r+0x1a>
 8005ae4:	602b      	str	r3, [r5, #0]
 8005ae6:	bd38      	pop	{r3, r4, r5, pc}
 8005ae8:	20016484 	.word	0x20016484

08005aec <__malloc_lock>:
 8005aec:	4770      	bx	lr

08005aee <__malloc_unlock>:
 8005aee:	4770      	bx	lr

08005af0 <_malloc_usable_size_r>:
 8005af0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005af4:	1f18      	subs	r0, r3, #4
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	bfbc      	itt	lt
 8005afa:	580b      	ldrlt	r3, [r1, r0]
 8005afc:	18c0      	addlt	r0, r0, r3
 8005afe:	4770      	bx	lr

08005b00 <sin>:
 8005b00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005b02:	ec51 0b10 	vmov	r0, r1, d0
 8005b06:	4a20      	ldr	r2, [pc, #128]	; (8005b88 <sin+0x88>)
 8005b08:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	dc07      	bgt.n	8005b20 <sin+0x20>
 8005b10:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8005b80 <sin+0x80>
 8005b14:	2000      	movs	r0, #0
 8005b16:	f000 fe37 	bl	8006788 <__kernel_sin>
 8005b1a:	ec51 0b10 	vmov	r0, r1, d0
 8005b1e:	e007      	b.n	8005b30 <sin+0x30>
 8005b20:	4a1a      	ldr	r2, [pc, #104]	; (8005b8c <sin+0x8c>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	dd09      	ble.n	8005b3a <sin+0x3a>
 8005b26:	ee10 2a10 	vmov	r2, s0
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	f7fa fba4 	bl	8000278 <__aeabi_dsub>
 8005b30:	ec41 0b10 	vmov	d0, r0, r1
 8005b34:	b005      	add	sp, #20
 8005b36:	f85d fb04 	ldr.w	pc, [sp], #4
 8005b3a:	4668      	mov	r0, sp
 8005b3c:	f000 f828 	bl	8005b90 <__ieee754_rem_pio2>
 8005b40:	f000 0003 	and.w	r0, r0, #3
 8005b44:	2801      	cmp	r0, #1
 8005b46:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005b4a:	ed9d 0b00 	vldr	d0, [sp]
 8005b4e:	d004      	beq.n	8005b5a <sin+0x5a>
 8005b50:	2802      	cmp	r0, #2
 8005b52:	d005      	beq.n	8005b60 <sin+0x60>
 8005b54:	b970      	cbnz	r0, 8005b74 <sin+0x74>
 8005b56:	2001      	movs	r0, #1
 8005b58:	e7dd      	b.n	8005b16 <sin+0x16>
 8005b5a:	f000 fa0d 	bl	8005f78 <__kernel_cos>
 8005b5e:	e7dc      	b.n	8005b1a <sin+0x1a>
 8005b60:	2001      	movs	r0, #1
 8005b62:	f000 fe11 	bl	8006788 <__kernel_sin>
 8005b66:	ec53 2b10 	vmov	r2, r3, d0
 8005b6a:	ee10 0a10 	vmov	r0, s0
 8005b6e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005b72:	e7dd      	b.n	8005b30 <sin+0x30>
 8005b74:	f000 fa00 	bl	8005f78 <__kernel_cos>
 8005b78:	e7f5      	b.n	8005b66 <sin+0x66>
 8005b7a:	bf00      	nop
 8005b7c:	f3af 8000 	nop.w
	...
 8005b88:	3fe921fb 	.word	0x3fe921fb
 8005b8c:	7fefffff 	.word	0x7fefffff

08005b90 <__ieee754_rem_pio2>:
 8005b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b94:	ec57 6b10 	vmov	r6, r7, d0
 8005b98:	4bc3      	ldr	r3, [pc, #780]	; (8005ea8 <__ieee754_rem_pio2+0x318>)
 8005b9a:	b08d      	sub	sp, #52	; 0x34
 8005b9c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8005ba0:	4598      	cmp	r8, r3
 8005ba2:	4604      	mov	r4, r0
 8005ba4:	9704      	str	r7, [sp, #16]
 8005ba6:	dc07      	bgt.n	8005bb8 <__ieee754_rem_pio2+0x28>
 8005ba8:	2200      	movs	r2, #0
 8005baa:	2300      	movs	r3, #0
 8005bac:	ed84 0b00 	vstr	d0, [r4]
 8005bb0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005bb4:	2500      	movs	r5, #0
 8005bb6:	e027      	b.n	8005c08 <__ieee754_rem_pio2+0x78>
 8005bb8:	4bbc      	ldr	r3, [pc, #752]	; (8005eac <__ieee754_rem_pio2+0x31c>)
 8005bba:	4598      	cmp	r8, r3
 8005bbc:	dc75      	bgt.n	8005caa <__ieee754_rem_pio2+0x11a>
 8005bbe:	9b04      	ldr	r3, [sp, #16]
 8005bc0:	4dbb      	ldr	r5, [pc, #748]	; (8005eb0 <__ieee754_rem_pio2+0x320>)
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	ee10 0a10 	vmov	r0, s0
 8005bc8:	a3a9      	add	r3, pc, #676	; (adr r3, 8005e70 <__ieee754_rem_pio2+0x2e0>)
 8005bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bce:	4639      	mov	r1, r7
 8005bd0:	dd36      	ble.n	8005c40 <__ieee754_rem_pio2+0xb0>
 8005bd2:	f7fa fb51 	bl	8000278 <__aeabi_dsub>
 8005bd6:	45a8      	cmp	r8, r5
 8005bd8:	4606      	mov	r6, r0
 8005bda:	460f      	mov	r7, r1
 8005bdc:	d018      	beq.n	8005c10 <__ieee754_rem_pio2+0x80>
 8005bde:	a3a6      	add	r3, pc, #664	; (adr r3, 8005e78 <__ieee754_rem_pio2+0x2e8>)
 8005be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be4:	f7fa fb48 	bl	8000278 <__aeabi_dsub>
 8005be8:	4602      	mov	r2, r0
 8005bea:	460b      	mov	r3, r1
 8005bec:	e9c4 2300 	strd	r2, r3, [r4]
 8005bf0:	4630      	mov	r0, r6
 8005bf2:	4639      	mov	r1, r7
 8005bf4:	f7fa fb40 	bl	8000278 <__aeabi_dsub>
 8005bf8:	a39f      	add	r3, pc, #636	; (adr r3, 8005e78 <__ieee754_rem_pio2+0x2e8>)
 8005bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfe:	f7fa fb3b 	bl	8000278 <__aeabi_dsub>
 8005c02:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005c06:	2501      	movs	r5, #1
 8005c08:	4628      	mov	r0, r5
 8005c0a:	b00d      	add	sp, #52	; 0x34
 8005c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c10:	a39b      	add	r3, pc, #620	; (adr r3, 8005e80 <__ieee754_rem_pio2+0x2f0>)
 8005c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c16:	f7fa fb2f 	bl	8000278 <__aeabi_dsub>
 8005c1a:	a39b      	add	r3, pc, #620	; (adr r3, 8005e88 <__ieee754_rem_pio2+0x2f8>)
 8005c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c20:	4606      	mov	r6, r0
 8005c22:	460f      	mov	r7, r1
 8005c24:	f7fa fb28 	bl	8000278 <__aeabi_dsub>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	e9c4 2300 	strd	r2, r3, [r4]
 8005c30:	4630      	mov	r0, r6
 8005c32:	4639      	mov	r1, r7
 8005c34:	f7fa fb20 	bl	8000278 <__aeabi_dsub>
 8005c38:	a393      	add	r3, pc, #588	; (adr r3, 8005e88 <__ieee754_rem_pio2+0x2f8>)
 8005c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3e:	e7de      	b.n	8005bfe <__ieee754_rem_pio2+0x6e>
 8005c40:	f7fa fb1c 	bl	800027c <__adddf3>
 8005c44:	45a8      	cmp	r8, r5
 8005c46:	4606      	mov	r6, r0
 8005c48:	460f      	mov	r7, r1
 8005c4a:	d016      	beq.n	8005c7a <__ieee754_rem_pio2+0xea>
 8005c4c:	a38a      	add	r3, pc, #552	; (adr r3, 8005e78 <__ieee754_rem_pio2+0x2e8>)
 8005c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c52:	f7fa fb13 	bl	800027c <__adddf3>
 8005c56:	4602      	mov	r2, r0
 8005c58:	460b      	mov	r3, r1
 8005c5a:	e9c4 2300 	strd	r2, r3, [r4]
 8005c5e:	4630      	mov	r0, r6
 8005c60:	4639      	mov	r1, r7
 8005c62:	f7fa fb09 	bl	8000278 <__aeabi_dsub>
 8005c66:	a384      	add	r3, pc, #528	; (adr r3, 8005e78 <__ieee754_rem_pio2+0x2e8>)
 8005c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6c:	f7fa fb06 	bl	800027c <__adddf3>
 8005c70:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005c74:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005c78:	e7c6      	b.n	8005c08 <__ieee754_rem_pio2+0x78>
 8005c7a:	a381      	add	r3, pc, #516	; (adr r3, 8005e80 <__ieee754_rem_pio2+0x2f0>)
 8005c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c80:	f7fa fafc 	bl	800027c <__adddf3>
 8005c84:	a380      	add	r3, pc, #512	; (adr r3, 8005e88 <__ieee754_rem_pio2+0x2f8>)
 8005c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c8a:	4606      	mov	r6, r0
 8005c8c:	460f      	mov	r7, r1
 8005c8e:	f7fa faf5 	bl	800027c <__adddf3>
 8005c92:	4602      	mov	r2, r0
 8005c94:	460b      	mov	r3, r1
 8005c96:	e9c4 2300 	strd	r2, r3, [r4]
 8005c9a:	4630      	mov	r0, r6
 8005c9c:	4639      	mov	r1, r7
 8005c9e:	f7fa faeb 	bl	8000278 <__aeabi_dsub>
 8005ca2:	a379      	add	r3, pc, #484	; (adr r3, 8005e88 <__ieee754_rem_pio2+0x2f8>)
 8005ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca8:	e7e0      	b.n	8005c6c <__ieee754_rem_pio2+0xdc>
 8005caa:	4b82      	ldr	r3, [pc, #520]	; (8005eb4 <__ieee754_rem_pio2+0x324>)
 8005cac:	4598      	cmp	r8, r3
 8005cae:	f300 80d0 	bgt.w	8005e52 <__ieee754_rem_pio2+0x2c2>
 8005cb2:	f000 fe23 	bl	80068fc <fabs>
 8005cb6:	ec57 6b10 	vmov	r6, r7, d0
 8005cba:	ee10 0a10 	vmov	r0, s0
 8005cbe:	a374      	add	r3, pc, #464	; (adr r3, 8005e90 <__ieee754_rem_pio2+0x300>)
 8005cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc4:	4639      	mov	r1, r7
 8005cc6:	f7fa fc8f 	bl	80005e8 <__aeabi_dmul>
 8005cca:	2200      	movs	r2, #0
 8005ccc:	4b7a      	ldr	r3, [pc, #488]	; (8005eb8 <__ieee754_rem_pio2+0x328>)
 8005cce:	f7fa fad5 	bl	800027c <__adddf3>
 8005cd2:	f7fa ff23 	bl	8000b1c <__aeabi_d2iz>
 8005cd6:	4605      	mov	r5, r0
 8005cd8:	f7fa fc1c 	bl	8000514 <__aeabi_i2d>
 8005cdc:	a364      	add	r3, pc, #400	; (adr r3, 8005e70 <__ieee754_rem_pio2+0x2e0>)
 8005cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ce6:	f7fa fc7f 	bl	80005e8 <__aeabi_dmul>
 8005cea:	4602      	mov	r2, r0
 8005cec:	460b      	mov	r3, r1
 8005cee:	4630      	mov	r0, r6
 8005cf0:	4639      	mov	r1, r7
 8005cf2:	f7fa fac1 	bl	8000278 <__aeabi_dsub>
 8005cf6:	a360      	add	r3, pc, #384	; (adr r3, 8005e78 <__ieee754_rem_pio2+0x2e8>)
 8005cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfc:	4682      	mov	sl, r0
 8005cfe:	468b      	mov	fp, r1
 8005d00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d04:	f7fa fc70 	bl	80005e8 <__aeabi_dmul>
 8005d08:	2d1f      	cmp	r5, #31
 8005d0a:	4606      	mov	r6, r0
 8005d0c:	460f      	mov	r7, r1
 8005d0e:	dc0c      	bgt.n	8005d2a <__ieee754_rem_pio2+0x19a>
 8005d10:	1e6a      	subs	r2, r5, #1
 8005d12:	4b6a      	ldr	r3, [pc, #424]	; (8005ebc <__ieee754_rem_pio2+0x32c>)
 8005d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d18:	4543      	cmp	r3, r8
 8005d1a:	d006      	beq.n	8005d2a <__ieee754_rem_pio2+0x19a>
 8005d1c:	4632      	mov	r2, r6
 8005d1e:	463b      	mov	r3, r7
 8005d20:	4650      	mov	r0, sl
 8005d22:	4659      	mov	r1, fp
 8005d24:	f7fa faa8 	bl	8000278 <__aeabi_dsub>
 8005d28:	e00e      	b.n	8005d48 <__ieee754_rem_pio2+0x1b8>
 8005d2a:	4632      	mov	r2, r6
 8005d2c:	463b      	mov	r3, r7
 8005d2e:	4650      	mov	r0, sl
 8005d30:	4659      	mov	r1, fp
 8005d32:	f7fa faa1 	bl	8000278 <__aeabi_dsub>
 8005d36:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005d3a:	9305      	str	r3, [sp, #20]
 8005d3c:	9a05      	ldr	r2, [sp, #20]
 8005d3e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	2b10      	cmp	r3, #16
 8005d46:	dc02      	bgt.n	8005d4e <__ieee754_rem_pio2+0x1be>
 8005d48:	e9c4 0100 	strd	r0, r1, [r4]
 8005d4c:	e039      	b.n	8005dc2 <__ieee754_rem_pio2+0x232>
 8005d4e:	a34c      	add	r3, pc, #304	; (adr r3, 8005e80 <__ieee754_rem_pio2+0x2f0>)
 8005d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d58:	f7fa fc46 	bl	80005e8 <__aeabi_dmul>
 8005d5c:	4606      	mov	r6, r0
 8005d5e:	460f      	mov	r7, r1
 8005d60:	4602      	mov	r2, r0
 8005d62:	460b      	mov	r3, r1
 8005d64:	4650      	mov	r0, sl
 8005d66:	4659      	mov	r1, fp
 8005d68:	f7fa fa86 	bl	8000278 <__aeabi_dsub>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	460b      	mov	r3, r1
 8005d70:	4680      	mov	r8, r0
 8005d72:	4689      	mov	r9, r1
 8005d74:	4650      	mov	r0, sl
 8005d76:	4659      	mov	r1, fp
 8005d78:	f7fa fa7e 	bl	8000278 <__aeabi_dsub>
 8005d7c:	4632      	mov	r2, r6
 8005d7e:	463b      	mov	r3, r7
 8005d80:	f7fa fa7a 	bl	8000278 <__aeabi_dsub>
 8005d84:	a340      	add	r3, pc, #256	; (adr r3, 8005e88 <__ieee754_rem_pio2+0x2f8>)
 8005d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8a:	4606      	mov	r6, r0
 8005d8c:	460f      	mov	r7, r1
 8005d8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d92:	f7fa fc29 	bl	80005e8 <__aeabi_dmul>
 8005d96:	4632      	mov	r2, r6
 8005d98:	463b      	mov	r3, r7
 8005d9a:	f7fa fa6d 	bl	8000278 <__aeabi_dsub>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	460b      	mov	r3, r1
 8005da2:	4606      	mov	r6, r0
 8005da4:	460f      	mov	r7, r1
 8005da6:	4640      	mov	r0, r8
 8005da8:	4649      	mov	r1, r9
 8005daa:	f7fa fa65 	bl	8000278 <__aeabi_dsub>
 8005dae:	9a05      	ldr	r2, [sp, #20]
 8005db0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	2b31      	cmp	r3, #49	; 0x31
 8005db8:	dc20      	bgt.n	8005dfc <__ieee754_rem_pio2+0x26c>
 8005dba:	e9c4 0100 	strd	r0, r1, [r4]
 8005dbe:	46c2      	mov	sl, r8
 8005dc0:	46cb      	mov	fp, r9
 8005dc2:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005dc6:	4650      	mov	r0, sl
 8005dc8:	4642      	mov	r2, r8
 8005dca:	464b      	mov	r3, r9
 8005dcc:	4659      	mov	r1, fp
 8005dce:	f7fa fa53 	bl	8000278 <__aeabi_dsub>
 8005dd2:	463b      	mov	r3, r7
 8005dd4:	4632      	mov	r2, r6
 8005dd6:	f7fa fa4f 	bl	8000278 <__aeabi_dsub>
 8005dda:	9b04      	ldr	r3, [sp, #16]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005de2:	f6bf af11 	bge.w	8005c08 <__ieee754_rem_pio2+0x78>
 8005de6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005dea:	6063      	str	r3, [r4, #4]
 8005dec:	f8c4 8000 	str.w	r8, [r4]
 8005df0:	60a0      	str	r0, [r4, #8]
 8005df2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005df6:	60e3      	str	r3, [r4, #12]
 8005df8:	426d      	negs	r5, r5
 8005dfa:	e705      	b.n	8005c08 <__ieee754_rem_pio2+0x78>
 8005dfc:	a326      	add	r3, pc, #152	; (adr r3, 8005e98 <__ieee754_rem_pio2+0x308>)
 8005dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e06:	f7fa fbef 	bl	80005e8 <__aeabi_dmul>
 8005e0a:	4606      	mov	r6, r0
 8005e0c:	460f      	mov	r7, r1
 8005e0e:	4602      	mov	r2, r0
 8005e10:	460b      	mov	r3, r1
 8005e12:	4640      	mov	r0, r8
 8005e14:	4649      	mov	r1, r9
 8005e16:	f7fa fa2f 	bl	8000278 <__aeabi_dsub>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	4682      	mov	sl, r0
 8005e20:	468b      	mov	fp, r1
 8005e22:	4640      	mov	r0, r8
 8005e24:	4649      	mov	r1, r9
 8005e26:	f7fa fa27 	bl	8000278 <__aeabi_dsub>
 8005e2a:	4632      	mov	r2, r6
 8005e2c:	463b      	mov	r3, r7
 8005e2e:	f7fa fa23 	bl	8000278 <__aeabi_dsub>
 8005e32:	a31b      	add	r3, pc, #108	; (adr r3, 8005ea0 <__ieee754_rem_pio2+0x310>)
 8005e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e38:	4606      	mov	r6, r0
 8005e3a:	460f      	mov	r7, r1
 8005e3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e40:	f7fa fbd2 	bl	80005e8 <__aeabi_dmul>
 8005e44:	4632      	mov	r2, r6
 8005e46:	463b      	mov	r3, r7
 8005e48:	f7fa fa16 	bl	8000278 <__aeabi_dsub>
 8005e4c:	4606      	mov	r6, r0
 8005e4e:	460f      	mov	r7, r1
 8005e50:	e764      	b.n	8005d1c <__ieee754_rem_pio2+0x18c>
 8005e52:	4b1b      	ldr	r3, [pc, #108]	; (8005ec0 <__ieee754_rem_pio2+0x330>)
 8005e54:	4598      	cmp	r8, r3
 8005e56:	dd35      	ble.n	8005ec4 <__ieee754_rem_pio2+0x334>
 8005e58:	ee10 2a10 	vmov	r2, s0
 8005e5c:	463b      	mov	r3, r7
 8005e5e:	4630      	mov	r0, r6
 8005e60:	4639      	mov	r1, r7
 8005e62:	f7fa fa09 	bl	8000278 <__aeabi_dsub>
 8005e66:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005e6a:	e9c4 0100 	strd	r0, r1, [r4]
 8005e6e:	e6a1      	b.n	8005bb4 <__ieee754_rem_pio2+0x24>
 8005e70:	54400000 	.word	0x54400000
 8005e74:	3ff921fb 	.word	0x3ff921fb
 8005e78:	1a626331 	.word	0x1a626331
 8005e7c:	3dd0b461 	.word	0x3dd0b461
 8005e80:	1a600000 	.word	0x1a600000
 8005e84:	3dd0b461 	.word	0x3dd0b461
 8005e88:	2e037073 	.word	0x2e037073
 8005e8c:	3ba3198a 	.word	0x3ba3198a
 8005e90:	6dc9c883 	.word	0x6dc9c883
 8005e94:	3fe45f30 	.word	0x3fe45f30
 8005e98:	2e000000 	.word	0x2e000000
 8005e9c:	3ba3198a 	.word	0x3ba3198a
 8005ea0:	252049c1 	.word	0x252049c1
 8005ea4:	397b839a 	.word	0x397b839a
 8005ea8:	3fe921fb 	.word	0x3fe921fb
 8005eac:	4002d97b 	.word	0x4002d97b
 8005eb0:	3ff921fb 	.word	0x3ff921fb
 8005eb4:	413921fb 	.word	0x413921fb
 8005eb8:	3fe00000 	.word	0x3fe00000
 8005ebc:	08006b9c 	.word	0x08006b9c
 8005ec0:	7fefffff 	.word	0x7fefffff
 8005ec4:	ea4f 5528 	mov.w	r5, r8, asr #20
 8005ec8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8005ecc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8005ed0:	4630      	mov	r0, r6
 8005ed2:	460f      	mov	r7, r1
 8005ed4:	f7fa fe22 	bl	8000b1c <__aeabi_d2iz>
 8005ed8:	f7fa fb1c 	bl	8000514 <__aeabi_i2d>
 8005edc:	4602      	mov	r2, r0
 8005ede:	460b      	mov	r3, r1
 8005ee0:	4630      	mov	r0, r6
 8005ee2:	4639      	mov	r1, r7
 8005ee4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005ee8:	f7fa f9c6 	bl	8000278 <__aeabi_dsub>
 8005eec:	2200      	movs	r2, #0
 8005eee:	4b1f      	ldr	r3, [pc, #124]	; (8005f6c <__ieee754_rem_pio2+0x3dc>)
 8005ef0:	f7fa fb7a 	bl	80005e8 <__aeabi_dmul>
 8005ef4:	460f      	mov	r7, r1
 8005ef6:	4606      	mov	r6, r0
 8005ef8:	f7fa fe10 	bl	8000b1c <__aeabi_d2iz>
 8005efc:	f7fa fb0a 	bl	8000514 <__aeabi_i2d>
 8005f00:	4602      	mov	r2, r0
 8005f02:	460b      	mov	r3, r1
 8005f04:	4630      	mov	r0, r6
 8005f06:	4639      	mov	r1, r7
 8005f08:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005f0c:	f7fa f9b4 	bl	8000278 <__aeabi_dsub>
 8005f10:	2200      	movs	r2, #0
 8005f12:	4b16      	ldr	r3, [pc, #88]	; (8005f6c <__ieee754_rem_pio2+0x3dc>)
 8005f14:	f7fa fb68 	bl	80005e8 <__aeabi_dmul>
 8005f18:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005f1c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8005f20:	f04f 0803 	mov.w	r8, #3
 8005f24:	2600      	movs	r6, #0
 8005f26:	2700      	movs	r7, #0
 8005f28:	4632      	mov	r2, r6
 8005f2a:	463b      	mov	r3, r7
 8005f2c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8005f30:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8005f34:	f7fa fdc0 	bl	8000ab8 <__aeabi_dcmpeq>
 8005f38:	b9b0      	cbnz	r0, 8005f68 <__ieee754_rem_pio2+0x3d8>
 8005f3a:	4b0d      	ldr	r3, [pc, #52]	; (8005f70 <__ieee754_rem_pio2+0x3e0>)
 8005f3c:	9301      	str	r3, [sp, #4]
 8005f3e:	2302      	movs	r3, #2
 8005f40:	9300      	str	r3, [sp, #0]
 8005f42:	462a      	mov	r2, r5
 8005f44:	4643      	mov	r3, r8
 8005f46:	4621      	mov	r1, r4
 8005f48:	a806      	add	r0, sp, #24
 8005f4a:	f000 f8dd 	bl	8006108 <__kernel_rem_pio2>
 8005f4e:	9b04      	ldr	r3, [sp, #16]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	4605      	mov	r5, r0
 8005f54:	f6bf ae58 	bge.w	8005c08 <__ieee754_rem_pio2+0x78>
 8005f58:	6863      	ldr	r3, [r4, #4]
 8005f5a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005f5e:	6063      	str	r3, [r4, #4]
 8005f60:	68e3      	ldr	r3, [r4, #12]
 8005f62:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005f66:	e746      	b.n	8005df6 <__ieee754_rem_pio2+0x266>
 8005f68:	46d0      	mov	r8, sl
 8005f6a:	e7dd      	b.n	8005f28 <__ieee754_rem_pio2+0x398>
 8005f6c:	41700000 	.word	0x41700000
 8005f70:	08006c1c 	.word	0x08006c1c
 8005f74:	00000000 	.word	0x00000000

08005f78 <__kernel_cos>:
 8005f78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f7c:	ec59 8b10 	vmov	r8, r9, d0
 8005f80:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8005f84:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8005f88:	ed2d 8b02 	vpush	{d8}
 8005f8c:	eeb0 8a41 	vmov.f32	s16, s2
 8005f90:	eef0 8a61 	vmov.f32	s17, s3
 8005f94:	da07      	bge.n	8005fa6 <__kernel_cos+0x2e>
 8005f96:	ee10 0a10 	vmov	r0, s0
 8005f9a:	4649      	mov	r1, r9
 8005f9c:	f7fa fdbe 	bl	8000b1c <__aeabi_d2iz>
 8005fa0:	2800      	cmp	r0, #0
 8005fa2:	f000 8089 	beq.w	80060b8 <__kernel_cos+0x140>
 8005fa6:	4642      	mov	r2, r8
 8005fa8:	464b      	mov	r3, r9
 8005faa:	4640      	mov	r0, r8
 8005fac:	4649      	mov	r1, r9
 8005fae:	f7fa fb1b 	bl	80005e8 <__aeabi_dmul>
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	4b4e      	ldr	r3, [pc, #312]	; (80060f0 <__kernel_cos+0x178>)
 8005fb6:	4604      	mov	r4, r0
 8005fb8:	460d      	mov	r5, r1
 8005fba:	f7fa fb15 	bl	80005e8 <__aeabi_dmul>
 8005fbe:	a340      	add	r3, pc, #256	; (adr r3, 80060c0 <__kernel_cos+0x148>)
 8005fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc4:	4682      	mov	sl, r0
 8005fc6:	468b      	mov	fp, r1
 8005fc8:	4620      	mov	r0, r4
 8005fca:	4629      	mov	r1, r5
 8005fcc:	f7fa fb0c 	bl	80005e8 <__aeabi_dmul>
 8005fd0:	a33d      	add	r3, pc, #244	; (adr r3, 80060c8 <__kernel_cos+0x150>)
 8005fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd6:	f7fa f951 	bl	800027c <__adddf3>
 8005fda:	4622      	mov	r2, r4
 8005fdc:	462b      	mov	r3, r5
 8005fde:	f7fa fb03 	bl	80005e8 <__aeabi_dmul>
 8005fe2:	a33b      	add	r3, pc, #236	; (adr r3, 80060d0 <__kernel_cos+0x158>)
 8005fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe8:	f7fa f946 	bl	8000278 <__aeabi_dsub>
 8005fec:	4622      	mov	r2, r4
 8005fee:	462b      	mov	r3, r5
 8005ff0:	f7fa fafa 	bl	80005e8 <__aeabi_dmul>
 8005ff4:	a338      	add	r3, pc, #224	; (adr r3, 80060d8 <__kernel_cos+0x160>)
 8005ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ffa:	f7fa f93f 	bl	800027c <__adddf3>
 8005ffe:	4622      	mov	r2, r4
 8006000:	462b      	mov	r3, r5
 8006002:	f7fa faf1 	bl	80005e8 <__aeabi_dmul>
 8006006:	a336      	add	r3, pc, #216	; (adr r3, 80060e0 <__kernel_cos+0x168>)
 8006008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600c:	f7fa f934 	bl	8000278 <__aeabi_dsub>
 8006010:	4622      	mov	r2, r4
 8006012:	462b      	mov	r3, r5
 8006014:	f7fa fae8 	bl	80005e8 <__aeabi_dmul>
 8006018:	a333      	add	r3, pc, #204	; (adr r3, 80060e8 <__kernel_cos+0x170>)
 800601a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601e:	f7fa f92d 	bl	800027c <__adddf3>
 8006022:	4622      	mov	r2, r4
 8006024:	462b      	mov	r3, r5
 8006026:	f7fa fadf 	bl	80005e8 <__aeabi_dmul>
 800602a:	4622      	mov	r2, r4
 800602c:	462b      	mov	r3, r5
 800602e:	f7fa fadb 	bl	80005e8 <__aeabi_dmul>
 8006032:	ec53 2b18 	vmov	r2, r3, d8
 8006036:	4604      	mov	r4, r0
 8006038:	460d      	mov	r5, r1
 800603a:	4640      	mov	r0, r8
 800603c:	4649      	mov	r1, r9
 800603e:	f7fa fad3 	bl	80005e8 <__aeabi_dmul>
 8006042:	460b      	mov	r3, r1
 8006044:	4602      	mov	r2, r0
 8006046:	4629      	mov	r1, r5
 8006048:	4620      	mov	r0, r4
 800604a:	f7fa f915 	bl	8000278 <__aeabi_dsub>
 800604e:	4b29      	ldr	r3, [pc, #164]	; (80060f4 <__kernel_cos+0x17c>)
 8006050:	429e      	cmp	r6, r3
 8006052:	4680      	mov	r8, r0
 8006054:	4689      	mov	r9, r1
 8006056:	dc11      	bgt.n	800607c <__kernel_cos+0x104>
 8006058:	4602      	mov	r2, r0
 800605a:	460b      	mov	r3, r1
 800605c:	4650      	mov	r0, sl
 800605e:	4659      	mov	r1, fp
 8006060:	f7fa f90a 	bl	8000278 <__aeabi_dsub>
 8006064:	460b      	mov	r3, r1
 8006066:	4924      	ldr	r1, [pc, #144]	; (80060f8 <__kernel_cos+0x180>)
 8006068:	4602      	mov	r2, r0
 800606a:	2000      	movs	r0, #0
 800606c:	f7fa f904 	bl	8000278 <__aeabi_dsub>
 8006070:	ecbd 8b02 	vpop	{d8}
 8006074:	ec41 0b10 	vmov	d0, r0, r1
 8006078:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800607c:	4b1f      	ldr	r3, [pc, #124]	; (80060fc <__kernel_cos+0x184>)
 800607e:	491e      	ldr	r1, [pc, #120]	; (80060f8 <__kernel_cos+0x180>)
 8006080:	429e      	cmp	r6, r3
 8006082:	bfcc      	ite	gt
 8006084:	4d1e      	ldrgt	r5, [pc, #120]	; (8006100 <__kernel_cos+0x188>)
 8006086:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800608a:	2400      	movs	r4, #0
 800608c:	4622      	mov	r2, r4
 800608e:	462b      	mov	r3, r5
 8006090:	2000      	movs	r0, #0
 8006092:	f7fa f8f1 	bl	8000278 <__aeabi_dsub>
 8006096:	4622      	mov	r2, r4
 8006098:	4606      	mov	r6, r0
 800609a:	460f      	mov	r7, r1
 800609c:	462b      	mov	r3, r5
 800609e:	4650      	mov	r0, sl
 80060a0:	4659      	mov	r1, fp
 80060a2:	f7fa f8e9 	bl	8000278 <__aeabi_dsub>
 80060a6:	4642      	mov	r2, r8
 80060a8:	464b      	mov	r3, r9
 80060aa:	f7fa f8e5 	bl	8000278 <__aeabi_dsub>
 80060ae:	4602      	mov	r2, r0
 80060b0:	460b      	mov	r3, r1
 80060b2:	4630      	mov	r0, r6
 80060b4:	4639      	mov	r1, r7
 80060b6:	e7d9      	b.n	800606c <__kernel_cos+0xf4>
 80060b8:	2000      	movs	r0, #0
 80060ba:	490f      	ldr	r1, [pc, #60]	; (80060f8 <__kernel_cos+0x180>)
 80060bc:	e7d8      	b.n	8006070 <__kernel_cos+0xf8>
 80060be:	bf00      	nop
 80060c0:	be8838d4 	.word	0xbe8838d4
 80060c4:	bda8fae9 	.word	0xbda8fae9
 80060c8:	bdb4b1c4 	.word	0xbdb4b1c4
 80060cc:	3e21ee9e 	.word	0x3e21ee9e
 80060d0:	809c52ad 	.word	0x809c52ad
 80060d4:	3e927e4f 	.word	0x3e927e4f
 80060d8:	19cb1590 	.word	0x19cb1590
 80060dc:	3efa01a0 	.word	0x3efa01a0
 80060e0:	16c15177 	.word	0x16c15177
 80060e4:	3f56c16c 	.word	0x3f56c16c
 80060e8:	5555554c 	.word	0x5555554c
 80060ec:	3fa55555 	.word	0x3fa55555
 80060f0:	3fe00000 	.word	0x3fe00000
 80060f4:	3fd33332 	.word	0x3fd33332
 80060f8:	3ff00000 	.word	0x3ff00000
 80060fc:	3fe90000 	.word	0x3fe90000
 8006100:	3fd20000 	.word	0x3fd20000
 8006104:	00000000 	.word	0x00000000

08006108 <__kernel_rem_pio2>:
 8006108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800610c:	ed2d 8b02 	vpush	{d8}
 8006110:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8006114:	1ed4      	subs	r4, r2, #3
 8006116:	9308      	str	r3, [sp, #32]
 8006118:	9101      	str	r1, [sp, #4]
 800611a:	4bc5      	ldr	r3, [pc, #788]	; (8006430 <__kernel_rem_pio2+0x328>)
 800611c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800611e:	9009      	str	r0, [sp, #36]	; 0x24
 8006120:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006124:	9304      	str	r3, [sp, #16]
 8006126:	9b08      	ldr	r3, [sp, #32]
 8006128:	3b01      	subs	r3, #1
 800612a:	9307      	str	r3, [sp, #28]
 800612c:	2318      	movs	r3, #24
 800612e:	fb94 f4f3 	sdiv	r4, r4, r3
 8006132:	f06f 0317 	mvn.w	r3, #23
 8006136:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800613a:	fb04 3303 	mla	r3, r4, r3, r3
 800613e:	eb03 0a02 	add.w	sl, r3, r2
 8006142:	9b04      	ldr	r3, [sp, #16]
 8006144:	9a07      	ldr	r2, [sp, #28]
 8006146:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8006420 <__kernel_rem_pio2+0x318>
 800614a:	eb03 0802 	add.w	r8, r3, r2
 800614e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006150:	1aa7      	subs	r7, r4, r2
 8006152:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006156:	ae22      	add	r6, sp, #136	; 0x88
 8006158:	2500      	movs	r5, #0
 800615a:	4545      	cmp	r5, r8
 800615c:	dd13      	ble.n	8006186 <__kernel_rem_pio2+0x7e>
 800615e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8006420 <__kernel_rem_pio2+0x318>
 8006162:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8006166:	2600      	movs	r6, #0
 8006168:	9b04      	ldr	r3, [sp, #16]
 800616a:	429e      	cmp	r6, r3
 800616c:	dc32      	bgt.n	80061d4 <__kernel_rem_pio2+0xcc>
 800616e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006170:	9302      	str	r3, [sp, #8]
 8006172:	9b08      	ldr	r3, [sp, #32]
 8006174:	199d      	adds	r5, r3, r6
 8006176:	ab22      	add	r3, sp, #136	; 0x88
 8006178:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800617c:	9306      	str	r3, [sp, #24]
 800617e:	ec59 8b18 	vmov	r8, r9, d8
 8006182:	2700      	movs	r7, #0
 8006184:	e01f      	b.n	80061c6 <__kernel_rem_pio2+0xbe>
 8006186:	42ef      	cmn	r7, r5
 8006188:	d407      	bmi.n	800619a <__kernel_rem_pio2+0x92>
 800618a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800618e:	f7fa f9c1 	bl	8000514 <__aeabi_i2d>
 8006192:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006196:	3501      	adds	r5, #1
 8006198:	e7df      	b.n	800615a <__kernel_rem_pio2+0x52>
 800619a:	ec51 0b18 	vmov	r0, r1, d8
 800619e:	e7f8      	b.n	8006192 <__kernel_rem_pio2+0x8a>
 80061a0:	9906      	ldr	r1, [sp, #24]
 80061a2:	9d02      	ldr	r5, [sp, #8]
 80061a4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80061a8:	9106      	str	r1, [sp, #24]
 80061aa:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80061ae:	9502      	str	r5, [sp, #8]
 80061b0:	f7fa fa1a 	bl	80005e8 <__aeabi_dmul>
 80061b4:	4602      	mov	r2, r0
 80061b6:	460b      	mov	r3, r1
 80061b8:	4640      	mov	r0, r8
 80061ba:	4649      	mov	r1, r9
 80061bc:	f7fa f85e 	bl	800027c <__adddf3>
 80061c0:	3701      	adds	r7, #1
 80061c2:	4680      	mov	r8, r0
 80061c4:	4689      	mov	r9, r1
 80061c6:	9b07      	ldr	r3, [sp, #28]
 80061c8:	429f      	cmp	r7, r3
 80061ca:	dde9      	ble.n	80061a0 <__kernel_rem_pio2+0x98>
 80061cc:	e8eb 8902 	strd	r8, r9, [fp], #8
 80061d0:	3601      	adds	r6, #1
 80061d2:	e7c9      	b.n	8006168 <__kernel_rem_pio2+0x60>
 80061d4:	9b04      	ldr	r3, [sp, #16]
 80061d6:	aa0e      	add	r2, sp, #56	; 0x38
 80061d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80061dc:	930c      	str	r3, [sp, #48]	; 0x30
 80061de:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80061e0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80061e4:	9c04      	ldr	r4, [sp, #16]
 80061e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80061e8:	ab9a      	add	r3, sp, #616	; 0x268
 80061ea:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80061ee:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80061f2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80061f6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80061fa:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80061fe:	ab9a      	add	r3, sp, #616	; 0x268
 8006200:	445b      	add	r3, fp
 8006202:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8006206:	2500      	movs	r5, #0
 8006208:	1b63      	subs	r3, r4, r5
 800620a:	2b00      	cmp	r3, #0
 800620c:	dc78      	bgt.n	8006300 <__kernel_rem_pio2+0x1f8>
 800620e:	4650      	mov	r0, sl
 8006210:	ec49 8b10 	vmov	d0, r8, r9
 8006214:	f000 fc00 	bl	8006a18 <scalbn>
 8006218:	ec57 6b10 	vmov	r6, r7, d0
 800621c:	2200      	movs	r2, #0
 800621e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006222:	ee10 0a10 	vmov	r0, s0
 8006226:	4639      	mov	r1, r7
 8006228:	f7fa f9de 	bl	80005e8 <__aeabi_dmul>
 800622c:	ec41 0b10 	vmov	d0, r0, r1
 8006230:	f000 fb6e 	bl	8006910 <floor>
 8006234:	2200      	movs	r2, #0
 8006236:	ec51 0b10 	vmov	r0, r1, d0
 800623a:	4b7e      	ldr	r3, [pc, #504]	; (8006434 <__kernel_rem_pio2+0x32c>)
 800623c:	f7fa f9d4 	bl	80005e8 <__aeabi_dmul>
 8006240:	4602      	mov	r2, r0
 8006242:	460b      	mov	r3, r1
 8006244:	4630      	mov	r0, r6
 8006246:	4639      	mov	r1, r7
 8006248:	f7fa f816 	bl	8000278 <__aeabi_dsub>
 800624c:	460f      	mov	r7, r1
 800624e:	4606      	mov	r6, r0
 8006250:	f7fa fc64 	bl	8000b1c <__aeabi_d2iz>
 8006254:	9006      	str	r0, [sp, #24]
 8006256:	f7fa f95d 	bl	8000514 <__aeabi_i2d>
 800625a:	4602      	mov	r2, r0
 800625c:	460b      	mov	r3, r1
 800625e:	4630      	mov	r0, r6
 8006260:	4639      	mov	r1, r7
 8006262:	f7fa f809 	bl	8000278 <__aeabi_dsub>
 8006266:	f1ba 0f00 	cmp.w	sl, #0
 800626a:	4606      	mov	r6, r0
 800626c:	460f      	mov	r7, r1
 800626e:	dd6c      	ble.n	800634a <__kernel_rem_pio2+0x242>
 8006270:	1e62      	subs	r2, r4, #1
 8006272:	ab0e      	add	r3, sp, #56	; 0x38
 8006274:	f1ca 0118 	rsb	r1, sl, #24
 8006278:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800627c:	9d06      	ldr	r5, [sp, #24]
 800627e:	fa40 f301 	asr.w	r3, r0, r1
 8006282:	441d      	add	r5, r3
 8006284:	408b      	lsls	r3, r1
 8006286:	1ac0      	subs	r0, r0, r3
 8006288:	ab0e      	add	r3, sp, #56	; 0x38
 800628a:	9506      	str	r5, [sp, #24]
 800628c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8006290:	f1ca 0317 	rsb	r3, sl, #23
 8006294:	fa40 f303 	asr.w	r3, r0, r3
 8006298:	9302      	str	r3, [sp, #8]
 800629a:	9b02      	ldr	r3, [sp, #8]
 800629c:	2b00      	cmp	r3, #0
 800629e:	dd62      	ble.n	8006366 <__kernel_rem_pio2+0x25e>
 80062a0:	9b06      	ldr	r3, [sp, #24]
 80062a2:	2200      	movs	r2, #0
 80062a4:	3301      	adds	r3, #1
 80062a6:	9306      	str	r3, [sp, #24]
 80062a8:	4615      	mov	r5, r2
 80062aa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80062ae:	4294      	cmp	r4, r2
 80062b0:	f300 8095 	bgt.w	80063de <__kernel_rem_pio2+0x2d6>
 80062b4:	f1ba 0f00 	cmp.w	sl, #0
 80062b8:	dd07      	ble.n	80062ca <__kernel_rem_pio2+0x1c2>
 80062ba:	f1ba 0f01 	cmp.w	sl, #1
 80062be:	f000 80a2 	beq.w	8006406 <__kernel_rem_pio2+0x2fe>
 80062c2:	f1ba 0f02 	cmp.w	sl, #2
 80062c6:	f000 80c1 	beq.w	800644c <__kernel_rem_pio2+0x344>
 80062ca:	9b02      	ldr	r3, [sp, #8]
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d14a      	bne.n	8006366 <__kernel_rem_pio2+0x25e>
 80062d0:	4632      	mov	r2, r6
 80062d2:	463b      	mov	r3, r7
 80062d4:	2000      	movs	r0, #0
 80062d6:	4958      	ldr	r1, [pc, #352]	; (8006438 <__kernel_rem_pio2+0x330>)
 80062d8:	f7f9 ffce 	bl	8000278 <__aeabi_dsub>
 80062dc:	4606      	mov	r6, r0
 80062de:	460f      	mov	r7, r1
 80062e0:	2d00      	cmp	r5, #0
 80062e2:	d040      	beq.n	8006366 <__kernel_rem_pio2+0x25e>
 80062e4:	4650      	mov	r0, sl
 80062e6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8006428 <__kernel_rem_pio2+0x320>
 80062ea:	f000 fb95 	bl	8006a18 <scalbn>
 80062ee:	4630      	mov	r0, r6
 80062f0:	4639      	mov	r1, r7
 80062f2:	ec53 2b10 	vmov	r2, r3, d0
 80062f6:	f7f9 ffbf 	bl	8000278 <__aeabi_dsub>
 80062fa:	4606      	mov	r6, r0
 80062fc:	460f      	mov	r7, r1
 80062fe:	e032      	b.n	8006366 <__kernel_rem_pio2+0x25e>
 8006300:	2200      	movs	r2, #0
 8006302:	4b4e      	ldr	r3, [pc, #312]	; (800643c <__kernel_rem_pio2+0x334>)
 8006304:	4640      	mov	r0, r8
 8006306:	4649      	mov	r1, r9
 8006308:	f7fa f96e 	bl	80005e8 <__aeabi_dmul>
 800630c:	f7fa fc06 	bl	8000b1c <__aeabi_d2iz>
 8006310:	f7fa f900 	bl	8000514 <__aeabi_i2d>
 8006314:	2200      	movs	r2, #0
 8006316:	4b4a      	ldr	r3, [pc, #296]	; (8006440 <__kernel_rem_pio2+0x338>)
 8006318:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800631c:	f7fa f964 	bl	80005e8 <__aeabi_dmul>
 8006320:	4602      	mov	r2, r0
 8006322:	460b      	mov	r3, r1
 8006324:	4640      	mov	r0, r8
 8006326:	4649      	mov	r1, r9
 8006328:	f7f9 ffa6 	bl	8000278 <__aeabi_dsub>
 800632c:	f7fa fbf6 	bl	8000b1c <__aeabi_d2iz>
 8006330:	ab0e      	add	r3, sp, #56	; 0x38
 8006332:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8006336:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800633a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800633e:	f7f9 ff9d 	bl	800027c <__adddf3>
 8006342:	3501      	adds	r5, #1
 8006344:	4680      	mov	r8, r0
 8006346:	4689      	mov	r9, r1
 8006348:	e75e      	b.n	8006208 <__kernel_rem_pio2+0x100>
 800634a:	d105      	bne.n	8006358 <__kernel_rem_pio2+0x250>
 800634c:	1e63      	subs	r3, r4, #1
 800634e:	aa0e      	add	r2, sp, #56	; 0x38
 8006350:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006354:	15c3      	asrs	r3, r0, #23
 8006356:	e79f      	b.n	8006298 <__kernel_rem_pio2+0x190>
 8006358:	2200      	movs	r2, #0
 800635a:	4b3a      	ldr	r3, [pc, #232]	; (8006444 <__kernel_rem_pio2+0x33c>)
 800635c:	f7fa fbca 	bl	8000af4 <__aeabi_dcmpge>
 8006360:	2800      	cmp	r0, #0
 8006362:	d139      	bne.n	80063d8 <__kernel_rem_pio2+0x2d0>
 8006364:	9002      	str	r0, [sp, #8]
 8006366:	2200      	movs	r2, #0
 8006368:	2300      	movs	r3, #0
 800636a:	4630      	mov	r0, r6
 800636c:	4639      	mov	r1, r7
 800636e:	f7fa fba3 	bl	8000ab8 <__aeabi_dcmpeq>
 8006372:	2800      	cmp	r0, #0
 8006374:	f000 80c7 	beq.w	8006506 <__kernel_rem_pio2+0x3fe>
 8006378:	1e65      	subs	r5, r4, #1
 800637a:	462b      	mov	r3, r5
 800637c:	2200      	movs	r2, #0
 800637e:	9904      	ldr	r1, [sp, #16]
 8006380:	428b      	cmp	r3, r1
 8006382:	da6a      	bge.n	800645a <__kernel_rem_pio2+0x352>
 8006384:	2a00      	cmp	r2, #0
 8006386:	f000 8088 	beq.w	800649a <__kernel_rem_pio2+0x392>
 800638a:	ab0e      	add	r3, sp, #56	; 0x38
 800638c:	f1aa 0a18 	sub.w	sl, sl, #24
 8006390:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8006394:	2b00      	cmp	r3, #0
 8006396:	f000 80b4 	beq.w	8006502 <__kernel_rem_pio2+0x3fa>
 800639a:	4650      	mov	r0, sl
 800639c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8006428 <__kernel_rem_pio2+0x320>
 80063a0:	f000 fb3a 	bl	8006a18 <scalbn>
 80063a4:	00ec      	lsls	r4, r5, #3
 80063a6:	ab72      	add	r3, sp, #456	; 0x1c8
 80063a8:	191e      	adds	r6, r3, r4
 80063aa:	ec59 8b10 	vmov	r8, r9, d0
 80063ae:	f106 0a08 	add.w	sl, r6, #8
 80063b2:	462f      	mov	r7, r5
 80063b4:	2f00      	cmp	r7, #0
 80063b6:	f280 80df 	bge.w	8006578 <__kernel_rem_pio2+0x470>
 80063ba:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8006420 <__kernel_rem_pio2+0x318>
 80063be:	f04f 0a00 	mov.w	sl, #0
 80063c2:	eba5 030a 	sub.w	r3, r5, sl
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	f2c0 810a 	blt.w	80065e0 <__kernel_rem_pio2+0x4d8>
 80063cc:	f8df b078 	ldr.w	fp, [pc, #120]	; 8006448 <__kernel_rem_pio2+0x340>
 80063d0:	ec59 8b18 	vmov	r8, r9, d8
 80063d4:	2700      	movs	r7, #0
 80063d6:	e0f5      	b.n	80065c4 <__kernel_rem_pio2+0x4bc>
 80063d8:	2302      	movs	r3, #2
 80063da:	9302      	str	r3, [sp, #8]
 80063dc:	e760      	b.n	80062a0 <__kernel_rem_pio2+0x198>
 80063de:	ab0e      	add	r3, sp, #56	; 0x38
 80063e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063e4:	b94d      	cbnz	r5, 80063fa <__kernel_rem_pio2+0x2f2>
 80063e6:	b12b      	cbz	r3, 80063f4 <__kernel_rem_pio2+0x2ec>
 80063e8:	a80e      	add	r0, sp, #56	; 0x38
 80063ea:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80063ee:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80063f2:	2301      	movs	r3, #1
 80063f4:	3201      	adds	r2, #1
 80063f6:	461d      	mov	r5, r3
 80063f8:	e759      	b.n	80062ae <__kernel_rem_pio2+0x1a6>
 80063fa:	a80e      	add	r0, sp, #56	; 0x38
 80063fc:	1acb      	subs	r3, r1, r3
 80063fe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8006402:	462b      	mov	r3, r5
 8006404:	e7f6      	b.n	80063f4 <__kernel_rem_pio2+0x2ec>
 8006406:	1e62      	subs	r2, r4, #1
 8006408:	ab0e      	add	r3, sp, #56	; 0x38
 800640a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800640e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006412:	a90e      	add	r1, sp, #56	; 0x38
 8006414:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006418:	e757      	b.n	80062ca <__kernel_rem_pio2+0x1c2>
 800641a:	bf00      	nop
 800641c:	f3af 8000 	nop.w
	...
 800642c:	3ff00000 	.word	0x3ff00000
 8006430:	08006d68 	.word	0x08006d68
 8006434:	40200000 	.word	0x40200000
 8006438:	3ff00000 	.word	0x3ff00000
 800643c:	3e700000 	.word	0x3e700000
 8006440:	41700000 	.word	0x41700000
 8006444:	3fe00000 	.word	0x3fe00000
 8006448:	08006d28 	.word	0x08006d28
 800644c:	1e62      	subs	r2, r4, #1
 800644e:	ab0e      	add	r3, sp, #56	; 0x38
 8006450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006454:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006458:	e7db      	b.n	8006412 <__kernel_rem_pio2+0x30a>
 800645a:	a90e      	add	r1, sp, #56	; 0x38
 800645c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006460:	3b01      	subs	r3, #1
 8006462:	430a      	orrs	r2, r1
 8006464:	e78b      	b.n	800637e <__kernel_rem_pio2+0x276>
 8006466:	3301      	adds	r3, #1
 8006468:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800646c:	2900      	cmp	r1, #0
 800646e:	d0fa      	beq.n	8006466 <__kernel_rem_pio2+0x35e>
 8006470:	9a08      	ldr	r2, [sp, #32]
 8006472:	4422      	add	r2, r4
 8006474:	00d2      	lsls	r2, r2, #3
 8006476:	a922      	add	r1, sp, #136	; 0x88
 8006478:	18e3      	adds	r3, r4, r3
 800647a:	9206      	str	r2, [sp, #24]
 800647c:	440a      	add	r2, r1
 800647e:	9302      	str	r3, [sp, #8]
 8006480:	f10b 0108 	add.w	r1, fp, #8
 8006484:	f102 0308 	add.w	r3, r2, #8
 8006488:	1c66      	adds	r6, r4, #1
 800648a:	910a      	str	r1, [sp, #40]	; 0x28
 800648c:	2500      	movs	r5, #0
 800648e:	930d      	str	r3, [sp, #52]	; 0x34
 8006490:	9b02      	ldr	r3, [sp, #8]
 8006492:	42b3      	cmp	r3, r6
 8006494:	da04      	bge.n	80064a0 <__kernel_rem_pio2+0x398>
 8006496:	461c      	mov	r4, r3
 8006498:	e6a6      	b.n	80061e8 <__kernel_rem_pio2+0xe0>
 800649a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800649c:	2301      	movs	r3, #1
 800649e:	e7e3      	b.n	8006468 <__kernel_rem_pio2+0x360>
 80064a0:	9b06      	ldr	r3, [sp, #24]
 80064a2:	18ef      	adds	r7, r5, r3
 80064a4:	ab22      	add	r3, sp, #136	; 0x88
 80064a6:	441f      	add	r7, r3
 80064a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064aa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80064ae:	f7fa f831 	bl	8000514 <__aeabi_i2d>
 80064b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064b4:	461c      	mov	r4, r3
 80064b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064b8:	e9c7 0100 	strd	r0, r1, [r7]
 80064bc:	eb03 0b05 	add.w	fp, r3, r5
 80064c0:	2700      	movs	r7, #0
 80064c2:	f04f 0800 	mov.w	r8, #0
 80064c6:	f04f 0900 	mov.w	r9, #0
 80064ca:	9b07      	ldr	r3, [sp, #28]
 80064cc:	429f      	cmp	r7, r3
 80064ce:	dd08      	ble.n	80064e2 <__kernel_rem_pio2+0x3da>
 80064d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064d2:	aa72      	add	r2, sp, #456	; 0x1c8
 80064d4:	18eb      	adds	r3, r5, r3
 80064d6:	4413      	add	r3, r2
 80064d8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80064dc:	3601      	adds	r6, #1
 80064de:	3508      	adds	r5, #8
 80064e0:	e7d6      	b.n	8006490 <__kernel_rem_pio2+0x388>
 80064e2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80064e6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80064ea:	f7fa f87d 	bl	80005e8 <__aeabi_dmul>
 80064ee:	4602      	mov	r2, r0
 80064f0:	460b      	mov	r3, r1
 80064f2:	4640      	mov	r0, r8
 80064f4:	4649      	mov	r1, r9
 80064f6:	f7f9 fec1 	bl	800027c <__adddf3>
 80064fa:	3701      	adds	r7, #1
 80064fc:	4680      	mov	r8, r0
 80064fe:	4689      	mov	r9, r1
 8006500:	e7e3      	b.n	80064ca <__kernel_rem_pio2+0x3c2>
 8006502:	3d01      	subs	r5, #1
 8006504:	e741      	b.n	800638a <__kernel_rem_pio2+0x282>
 8006506:	f1ca 0000 	rsb	r0, sl, #0
 800650a:	ec47 6b10 	vmov	d0, r6, r7
 800650e:	f000 fa83 	bl	8006a18 <scalbn>
 8006512:	ec57 6b10 	vmov	r6, r7, d0
 8006516:	2200      	movs	r2, #0
 8006518:	4b99      	ldr	r3, [pc, #612]	; (8006780 <__kernel_rem_pio2+0x678>)
 800651a:	ee10 0a10 	vmov	r0, s0
 800651e:	4639      	mov	r1, r7
 8006520:	f7fa fae8 	bl	8000af4 <__aeabi_dcmpge>
 8006524:	b1f8      	cbz	r0, 8006566 <__kernel_rem_pio2+0x45e>
 8006526:	2200      	movs	r2, #0
 8006528:	4b96      	ldr	r3, [pc, #600]	; (8006784 <__kernel_rem_pio2+0x67c>)
 800652a:	4630      	mov	r0, r6
 800652c:	4639      	mov	r1, r7
 800652e:	f7fa f85b 	bl	80005e8 <__aeabi_dmul>
 8006532:	f7fa faf3 	bl	8000b1c <__aeabi_d2iz>
 8006536:	4680      	mov	r8, r0
 8006538:	f7f9 ffec 	bl	8000514 <__aeabi_i2d>
 800653c:	2200      	movs	r2, #0
 800653e:	4b90      	ldr	r3, [pc, #576]	; (8006780 <__kernel_rem_pio2+0x678>)
 8006540:	f7fa f852 	bl	80005e8 <__aeabi_dmul>
 8006544:	460b      	mov	r3, r1
 8006546:	4602      	mov	r2, r0
 8006548:	4639      	mov	r1, r7
 800654a:	4630      	mov	r0, r6
 800654c:	f7f9 fe94 	bl	8000278 <__aeabi_dsub>
 8006550:	f7fa fae4 	bl	8000b1c <__aeabi_d2iz>
 8006554:	1c65      	adds	r5, r4, #1
 8006556:	ab0e      	add	r3, sp, #56	; 0x38
 8006558:	f10a 0a18 	add.w	sl, sl, #24
 800655c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006560:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8006564:	e719      	b.n	800639a <__kernel_rem_pio2+0x292>
 8006566:	4630      	mov	r0, r6
 8006568:	4639      	mov	r1, r7
 800656a:	f7fa fad7 	bl	8000b1c <__aeabi_d2iz>
 800656e:	ab0e      	add	r3, sp, #56	; 0x38
 8006570:	4625      	mov	r5, r4
 8006572:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006576:	e710      	b.n	800639a <__kernel_rem_pio2+0x292>
 8006578:	ab0e      	add	r3, sp, #56	; 0x38
 800657a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800657e:	f7f9 ffc9 	bl	8000514 <__aeabi_i2d>
 8006582:	4642      	mov	r2, r8
 8006584:	464b      	mov	r3, r9
 8006586:	f7fa f82f 	bl	80005e8 <__aeabi_dmul>
 800658a:	2200      	movs	r2, #0
 800658c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8006590:	4b7c      	ldr	r3, [pc, #496]	; (8006784 <__kernel_rem_pio2+0x67c>)
 8006592:	4640      	mov	r0, r8
 8006594:	4649      	mov	r1, r9
 8006596:	f7fa f827 	bl	80005e8 <__aeabi_dmul>
 800659a:	3f01      	subs	r7, #1
 800659c:	4680      	mov	r8, r0
 800659e:	4689      	mov	r9, r1
 80065a0:	e708      	b.n	80063b4 <__kernel_rem_pio2+0x2ac>
 80065a2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80065a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065aa:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80065ae:	f7fa f81b 	bl	80005e8 <__aeabi_dmul>
 80065b2:	4602      	mov	r2, r0
 80065b4:	460b      	mov	r3, r1
 80065b6:	4640      	mov	r0, r8
 80065b8:	4649      	mov	r1, r9
 80065ba:	f7f9 fe5f 	bl	800027c <__adddf3>
 80065be:	3701      	adds	r7, #1
 80065c0:	4680      	mov	r8, r0
 80065c2:	4689      	mov	r9, r1
 80065c4:	9b04      	ldr	r3, [sp, #16]
 80065c6:	429f      	cmp	r7, r3
 80065c8:	dc01      	bgt.n	80065ce <__kernel_rem_pio2+0x4c6>
 80065ca:	45ba      	cmp	sl, r7
 80065cc:	dae9      	bge.n	80065a2 <__kernel_rem_pio2+0x49a>
 80065ce:	ab4a      	add	r3, sp, #296	; 0x128
 80065d0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80065d4:	e9c3 8900 	strd	r8, r9, [r3]
 80065d8:	f10a 0a01 	add.w	sl, sl, #1
 80065dc:	3e08      	subs	r6, #8
 80065de:	e6f0      	b.n	80063c2 <__kernel_rem_pio2+0x2ba>
 80065e0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80065e2:	2b03      	cmp	r3, #3
 80065e4:	d85b      	bhi.n	800669e <__kernel_rem_pio2+0x596>
 80065e6:	e8df f003 	tbb	[pc, r3]
 80065ea:	264a      	.short	0x264a
 80065ec:	0226      	.short	0x0226
 80065ee:	ab9a      	add	r3, sp, #616	; 0x268
 80065f0:	441c      	add	r4, r3
 80065f2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80065f6:	46a2      	mov	sl, r4
 80065f8:	46ab      	mov	fp, r5
 80065fa:	f1bb 0f00 	cmp.w	fp, #0
 80065fe:	dc6c      	bgt.n	80066da <__kernel_rem_pio2+0x5d2>
 8006600:	46a2      	mov	sl, r4
 8006602:	46ab      	mov	fp, r5
 8006604:	f1bb 0f01 	cmp.w	fp, #1
 8006608:	f300 8086 	bgt.w	8006718 <__kernel_rem_pio2+0x610>
 800660c:	2000      	movs	r0, #0
 800660e:	2100      	movs	r1, #0
 8006610:	2d01      	cmp	r5, #1
 8006612:	f300 80a0 	bgt.w	8006756 <__kernel_rem_pio2+0x64e>
 8006616:	9b02      	ldr	r3, [sp, #8]
 8006618:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800661c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8006620:	2b00      	cmp	r3, #0
 8006622:	f040 809e 	bne.w	8006762 <__kernel_rem_pio2+0x65a>
 8006626:	9b01      	ldr	r3, [sp, #4]
 8006628:	e9c3 7800 	strd	r7, r8, [r3]
 800662c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006630:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006634:	e033      	b.n	800669e <__kernel_rem_pio2+0x596>
 8006636:	3408      	adds	r4, #8
 8006638:	ab4a      	add	r3, sp, #296	; 0x128
 800663a:	441c      	add	r4, r3
 800663c:	462e      	mov	r6, r5
 800663e:	2000      	movs	r0, #0
 8006640:	2100      	movs	r1, #0
 8006642:	2e00      	cmp	r6, #0
 8006644:	da3a      	bge.n	80066bc <__kernel_rem_pio2+0x5b4>
 8006646:	9b02      	ldr	r3, [sp, #8]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d03d      	beq.n	80066c8 <__kernel_rem_pio2+0x5c0>
 800664c:	4602      	mov	r2, r0
 800664e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006652:	9c01      	ldr	r4, [sp, #4]
 8006654:	e9c4 2300 	strd	r2, r3, [r4]
 8006658:	4602      	mov	r2, r0
 800665a:	460b      	mov	r3, r1
 800665c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8006660:	f7f9 fe0a 	bl	8000278 <__aeabi_dsub>
 8006664:	ae4c      	add	r6, sp, #304	; 0x130
 8006666:	2401      	movs	r4, #1
 8006668:	42a5      	cmp	r5, r4
 800666a:	da30      	bge.n	80066ce <__kernel_rem_pio2+0x5c6>
 800666c:	9b02      	ldr	r3, [sp, #8]
 800666e:	b113      	cbz	r3, 8006676 <__kernel_rem_pio2+0x56e>
 8006670:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006674:	4619      	mov	r1, r3
 8006676:	9b01      	ldr	r3, [sp, #4]
 8006678:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800667c:	e00f      	b.n	800669e <__kernel_rem_pio2+0x596>
 800667e:	ab9a      	add	r3, sp, #616	; 0x268
 8006680:	441c      	add	r4, r3
 8006682:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8006686:	2000      	movs	r0, #0
 8006688:	2100      	movs	r1, #0
 800668a:	2d00      	cmp	r5, #0
 800668c:	da10      	bge.n	80066b0 <__kernel_rem_pio2+0x5a8>
 800668e:	9b02      	ldr	r3, [sp, #8]
 8006690:	b113      	cbz	r3, 8006698 <__kernel_rem_pio2+0x590>
 8006692:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006696:	4619      	mov	r1, r3
 8006698:	9b01      	ldr	r3, [sp, #4]
 800669a:	e9c3 0100 	strd	r0, r1, [r3]
 800669e:	9b06      	ldr	r3, [sp, #24]
 80066a0:	f003 0007 	and.w	r0, r3, #7
 80066a4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80066a8:	ecbd 8b02 	vpop	{d8}
 80066ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066b0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80066b4:	f7f9 fde2 	bl	800027c <__adddf3>
 80066b8:	3d01      	subs	r5, #1
 80066ba:	e7e6      	b.n	800668a <__kernel_rem_pio2+0x582>
 80066bc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80066c0:	f7f9 fddc 	bl	800027c <__adddf3>
 80066c4:	3e01      	subs	r6, #1
 80066c6:	e7bc      	b.n	8006642 <__kernel_rem_pio2+0x53a>
 80066c8:	4602      	mov	r2, r0
 80066ca:	460b      	mov	r3, r1
 80066cc:	e7c1      	b.n	8006652 <__kernel_rem_pio2+0x54a>
 80066ce:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80066d2:	f7f9 fdd3 	bl	800027c <__adddf3>
 80066d6:	3401      	adds	r4, #1
 80066d8:	e7c6      	b.n	8006668 <__kernel_rem_pio2+0x560>
 80066da:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80066de:	ed3a 7b02 	vldmdb	sl!, {d7}
 80066e2:	4640      	mov	r0, r8
 80066e4:	ec53 2b17 	vmov	r2, r3, d7
 80066e8:	4649      	mov	r1, r9
 80066ea:	ed8d 7b04 	vstr	d7, [sp, #16]
 80066ee:	f7f9 fdc5 	bl	800027c <__adddf3>
 80066f2:	4602      	mov	r2, r0
 80066f4:	460b      	mov	r3, r1
 80066f6:	4606      	mov	r6, r0
 80066f8:	460f      	mov	r7, r1
 80066fa:	4640      	mov	r0, r8
 80066fc:	4649      	mov	r1, r9
 80066fe:	f7f9 fdbb 	bl	8000278 <__aeabi_dsub>
 8006702:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006706:	f7f9 fdb9 	bl	800027c <__adddf3>
 800670a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800670e:	e9ca 0100 	strd	r0, r1, [sl]
 8006712:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8006716:	e770      	b.n	80065fa <__kernel_rem_pio2+0x4f2>
 8006718:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800671c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8006720:	4630      	mov	r0, r6
 8006722:	ec53 2b17 	vmov	r2, r3, d7
 8006726:	4639      	mov	r1, r7
 8006728:	ed8d 7b04 	vstr	d7, [sp, #16]
 800672c:	f7f9 fda6 	bl	800027c <__adddf3>
 8006730:	4602      	mov	r2, r0
 8006732:	460b      	mov	r3, r1
 8006734:	4680      	mov	r8, r0
 8006736:	4689      	mov	r9, r1
 8006738:	4630      	mov	r0, r6
 800673a:	4639      	mov	r1, r7
 800673c:	f7f9 fd9c 	bl	8000278 <__aeabi_dsub>
 8006740:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006744:	f7f9 fd9a 	bl	800027c <__adddf3>
 8006748:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800674c:	e9ca 0100 	strd	r0, r1, [sl]
 8006750:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8006754:	e756      	b.n	8006604 <__kernel_rem_pio2+0x4fc>
 8006756:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800675a:	f7f9 fd8f 	bl	800027c <__adddf3>
 800675e:	3d01      	subs	r5, #1
 8006760:	e756      	b.n	8006610 <__kernel_rem_pio2+0x508>
 8006762:	9b01      	ldr	r3, [sp, #4]
 8006764:	9a01      	ldr	r2, [sp, #4]
 8006766:	601f      	str	r7, [r3, #0]
 8006768:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800676c:	605c      	str	r4, [r3, #4]
 800676e:	609d      	str	r5, [r3, #8]
 8006770:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006774:	60d3      	str	r3, [r2, #12]
 8006776:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800677a:	6110      	str	r0, [r2, #16]
 800677c:	6153      	str	r3, [r2, #20]
 800677e:	e78e      	b.n	800669e <__kernel_rem_pio2+0x596>
 8006780:	41700000 	.word	0x41700000
 8006784:	3e700000 	.word	0x3e700000

08006788 <__kernel_sin>:
 8006788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800678c:	ec55 4b10 	vmov	r4, r5, d0
 8006790:	b085      	sub	sp, #20
 8006792:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006796:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800679a:	ed8d 1b00 	vstr	d1, [sp]
 800679e:	9002      	str	r0, [sp, #8]
 80067a0:	da06      	bge.n	80067b0 <__kernel_sin+0x28>
 80067a2:	ee10 0a10 	vmov	r0, s0
 80067a6:	4629      	mov	r1, r5
 80067a8:	f7fa f9b8 	bl	8000b1c <__aeabi_d2iz>
 80067ac:	2800      	cmp	r0, #0
 80067ae:	d051      	beq.n	8006854 <__kernel_sin+0xcc>
 80067b0:	4622      	mov	r2, r4
 80067b2:	462b      	mov	r3, r5
 80067b4:	4620      	mov	r0, r4
 80067b6:	4629      	mov	r1, r5
 80067b8:	f7f9 ff16 	bl	80005e8 <__aeabi_dmul>
 80067bc:	4682      	mov	sl, r0
 80067be:	468b      	mov	fp, r1
 80067c0:	4602      	mov	r2, r0
 80067c2:	460b      	mov	r3, r1
 80067c4:	4620      	mov	r0, r4
 80067c6:	4629      	mov	r1, r5
 80067c8:	f7f9 ff0e 	bl	80005e8 <__aeabi_dmul>
 80067cc:	a341      	add	r3, pc, #260	; (adr r3, 80068d4 <__kernel_sin+0x14c>)
 80067ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d2:	4680      	mov	r8, r0
 80067d4:	4689      	mov	r9, r1
 80067d6:	4650      	mov	r0, sl
 80067d8:	4659      	mov	r1, fp
 80067da:	f7f9 ff05 	bl	80005e8 <__aeabi_dmul>
 80067de:	a33f      	add	r3, pc, #252	; (adr r3, 80068dc <__kernel_sin+0x154>)
 80067e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e4:	f7f9 fd48 	bl	8000278 <__aeabi_dsub>
 80067e8:	4652      	mov	r2, sl
 80067ea:	465b      	mov	r3, fp
 80067ec:	f7f9 fefc 	bl	80005e8 <__aeabi_dmul>
 80067f0:	a33c      	add	r3, pc, #240	; (adr r3, 80068e4 <__kernel_sin+0x15c>)
 80067f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f6:	f7f9 fd41 	bl	800027c <__adddf3>
 80067fa:	4652      	mov	r2, sl
 80067fc:	465b      	mov	r3, fp
 80067fe:	f7f9 fef3 	bl	80005e8 <__aeabi_dmul>
 8006802:	a33a      	add	r3, pc, #232	; (adr r3, 80068ec <__kernel_sin+0x164>)
 8006804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006808:	f7f9 fd36 	bl	8000278 <__aeabi_dsub>
 800680c:	4652      	mov	r2, sl
 800680e:	465b      	mov	r3, fp
 8006810:	f7f9 feea 	bl	80005e8 <__aeabi_dmul>
 8006814:	a337      	add	r3, pc, #220	; (adr r3, 80068f4 <__kernel_sin+0x16c>)
 8006816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681a:	f7f9 fd2f 	bl	800027c <__adddf3>
 800681e:	9b02      	ldr	r3, [sp, #8]
 8006820:	4606      	mov	r6, r0
 8006822:	460f      	mov	r7, r1
 8006824:	b9db      	cbnz	r3, 800685e <__kernel_sin+0xd6>
 8006826:	4602      	mov	r2, r0
 8006828:	460b      	mov	r3, r1
 800682a:	4650      	mov	r0, sl
 800682c:	4659      	mov	r1, fp
 800682e:	f7f9 fedb 	bl	80005e8 <__aeabi_dmul>
 8006832:	a325      	add	r3, pc, #148	; (adr r3, 80068c8 <__kernel_sin+0x140>)
 8006834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006838:	f7f9 fd1e 	bl	8000278 <__aeabi_dsub>
 800683c:	4642      	mov	r2, r8
 800683e:	464b      	mov	r3, r9
 8006840:	f7f9 fed2 	bl	80005e8 <__aeabi_dmul>
 8006844:	4602      	mov	r2, r0
 8006846:	460b      	mov	r3, r1
 8006848:	4620      	mov	r0, r4
 800684a:	4629      	mov	r1, r5
 800684c:	f7f9 fd16 	bl	800027c <__adddf3>
 8006850:	4604      	mov	r4, r0
 8006852:	460d      	mov	r5, r1
 8006854:	ec45 4b10 	vmov	d0, r4, r5
 8006858:	b005      	add	sp, #20
 800685a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800685e:	2200      	movs	r2, #0
 8006860:	4b1b      	ldr	r3, [pc, #108]	; (80068d0 <__kernel_sin+0x148>)
 8006862:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006866:	f7f9 febf 	bl	80005e8 <__aeabi_dmul>
 800686a:	4632      	mov	r2, r6
 800686c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006870:	463b      	mov	r3, r7
 8006872:	4640      	mov	r0, r8
 8006874:	4649      	mov	r1, r9
 8006876:	f7f9 feb7 	bl	80005e8 <__aeabi_dmul>
 800687a:	4602      	mov	r2, r0
 800687c:	460b      	mov	r3, r1
 800687e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006882:	f7f9 fcf9 	bl	8000278 <__aeabi_dsub>
 8006886:	4652      	mov	r2, sl
 8006888:	465b      	mov	r3, fp
 800688a:	f7f9 fead 	bl	80005e8 <__aeabi_dmul>
 800688e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006892:	f7f9 fcf1 	bl	8000278 <__aeabi_dsub>
 8006896:	a30c      	add	r3, pc, #48	; (adr r3, 80068c8 <__kernel_sin+0x140>)
 8006898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689c:	4606      	mov	r6, r0
 800689e:	460f      	mov	r7, r1
 80068a0:	4640      	mov	r0, r8
 80068a2:	4649      	mov	r1, r9
 80068a4:	f7f9 fea0 	bl	80005e8 <__aeabi_dmul>
 80068a8:	4602      	mov	r2, r0
 80068aa:	460b      	mov	r3, r1
 80068ac:	4630      	mov	r0, r6
 80068ae:	4639      	mov	r1, r7
 80068b0:	f7f9 fce4 	bl	800027c <__adddf3>
 80068b4:	4602      	mov	r2, r0
 80068b6:	460b      	mov	r3, r1
 80068b8:	4620      	mov	r0, r4
 80068ba:	4629      	mov	r1, r5
 80068bc:	f7f9 fcdc 	bl	8000278 <__aeabi_dsub>
 80068c0:	e7c6      	b.n	8006850 <__kernel_sin+0xc8>
 80068c2:	bf00      	nop
 80068c4:	f3af 8000 	nop.w
 80068c8:	55555549 	.word	0x55555549
 80068cc:	3fc55555 	.word	0x3fc55555
 80068d0:	3fe00000 	.word	0x3fe00000
 80068d4:	5acfd57c 	.word	0x5acfd57c
 80068d8:	3de5d93a 	.word	0x3de5d93a
 80068dc:	8a2b9ceb 	.word	0x8a2b9ceb
 80068e0:	3e5ae5e6 	.word	0x3e5ae5e6
 80068e4:	57b1fe7d 	.word	0x57b1fe7d
 80068e8:	3ec71de3 	.word	0x3ec71de3
 80068ec:	19c161d5 	.word	0x19c161d5
 80068f0:	3f2a01a0 	.word	0x3f2a01a0
 80068f4:	1110f8a6 	.word	0x1110f8a6
 80068f8:	3f811111 	.word	0x3f811111

080068fc <fabs>:
 80068fc:	ec51 0b10 	vmov	r0, r1, d0
 8006900:	ee10 2a10 	vmov	r2, s0
 8006904:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006908:	ec43 2b10 	vmov	d0, r2, r3
 800690c:	4770      	bx	lr
	...

08006910 <floor>:
 8006910:	ec51 0b10 	vmov	r0, r1, d0
 8006914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006918:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800691c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006920:	2e13      	cmp	r6, #19
 8006922:	460c      	mov	r4, r1
 8006924:	ee10 5a10 	vmov	r5, s0
 8006928:	4680      	mov	r8, r0
 800692a:	dc34      	bgt.n	8006996 <floor+0x86>
 800692c:	2e00      	cmp	r6, #0
 800692e:	da16      	bge.n	800695e <floor+0x4e>
 8006930:	a335      	add	r3, pc, #212	; (adr r3, 8006a08 <floor+0xf8>)
 8006932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006936:	f7f9 fca1 	bl	800027c <__adddf3>
 800693a:	2200      	movs	r2, #0
 800693c:	2300      	movs	r3, #0
 800693e:	f7fa f8e3 	bl	8000b08 <__aeabi_dcmpgt>
 8006942:	b148      	cbz	r0, 8006958 <floor+0x48>
 8006944:	2c00      	cmp	r4, #0
 8006946:	da59      	bge.n	80069fc <floor+0xec>
 8006948:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800694c:	4a30      	ldr	r2, [pc, #192]	; (8006a10 <floor+0x100>)
 800694e:	432b      	orrs	r3, r5
 8006950:	2500      	movs	r5, #0
 8006952:	42ab      	cmp	r3, r5
 8006954:	bf18      	it	ne
 8006956:	4614      	movne	r4, r2
 8006958:	4621      	mov	r1, r4
 800695a:	4628      	mov	r0, r5
 800695c:	e025      	b.n	80069aa <floor+0x9a>
 800695e:	4f2d      	ldr	r7, [pc, #180]	; (8006a14 <floor+0x104>)
 8006960:	4137      	asrs	r7, r6
 8006962:	ea01 0307 	and.w	r3, r1, r7
 8006966:	4303      	orrs	r3, r0
 8006968:	d01f      	beq.n	80069aa <floor+0x9a>
 800696a:	a327      	add	r3, pc, #156	; (adr r3, 8006a08 <floor+0xf8>)
 800696c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006970:	f7f9 fc84 	bl	800027c <__adddf3>
 8006974:	2200      	movs	r2, #0
 8006976:	2300      	movs	r3, #0
 8006978:	f7fa f8c6 	bl	8000b08 <__aeabi_dcmpgt>
 800697c:	2800      	cmp	r0, #0
 800697e:	d0eb      	beq.n	8006958 <floor+0x48>
 8006980:	2c00      	cmp	r4, #0
 8006982:	bfbe      	ittt	lt
 8006984:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006988:	fa43 f606 	asrlt.w	r6, r3, r6
 800698c:	19a4      	addlt	r4, r4, r6
 800698e:	ea24 0407 	bic.w	r4, r4, r7
 8006992:	2500      	movs	r5, #0
 8006994:	e7e0      	b.n	8006958 <floor+0x48>
 8006996:	2e33      	cmp	r6, #51	; 0x33
 8006998:	dd0b      	ble.n	80069b2 <floor+0xa2>
 800699a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800699e:	d104      	bne.n	80069aa <floor+0x9a>
 80069a0:	ee10 2a10 	vmov	r2, s0
 80069a4:	460b      	mov	r3, r1
 80069a6:	f7f9 fc69 	bl	800027c <__adddf3>
 80069aa:	ec41 0b10 	vmov	d0, r0, r1
 80069ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069b2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80069b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069ba:	fa23 f707 	lsr.w	r7, r3, r7
 80069be:	4207      	tst	r7, r0
 80069c0:	d0f3      	beq.n	80069aa <floor+0x9a>
 80069c2:	a311      	add	r3, pc, #68	; (adr r3, 8006a08 <floor+0xf8>)
 80069c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c8:	f7f9 fc58 	bl	800027c <__adddf3>
 80069cc:	2200      	movs	r2, #0
 80069ce:	2300      	movs	r3, #0
 80069d0:	f7fa f89a 	bl	8000b08 <__aeabi_dcmpgt>
 80069d4:	2800      	cmp	r0, #0
 80069d6:	d0bf      	beq.n	8006958 <floor+0x48>
 80069d8:	2c00      	cmp	r4, #0
 80069da:	da02      	bge.n	80069e2 <floor+0xd2>
 80069dc:	2e14      	cmp	r6, #20
 80069de:	d103      	bne.n	80069e8 <floor+0xd8>
 80069e0:	3401      	adds	r4, #1
 80069e2:	ea25 0507 	bic.w	r5, r5, r7
 80069e6:	e7b7      	b.n	8006958 <floor+0x48>
 80069e8:	2301      	movs	r3, #1
 80069ea:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80069ee:	fa03 f606 	lsl.w	r6, r3, r6
 80069f2:	4435      	add	r5, r6
 80069f4:	4545      	cmp	r5, r8
 80069f6:	bf38      	it	cc
 80069f8:	18e4      	addcc	r4, r4, r3
 80069fa:	e7f2      	b.n	80069e2 <floor+0xd2>
 80069fc:	2500      	movs	r5, #0
 80069fe:	462c      	mov	r4, r5
 8006a00:	e7aa      	b.n	8006958 <floor+0x48>
 8006a02:	bf00      	nop
 8006a04:	f3af 8000 	nop.w
 8006a08:	8800759c 	.word	0x8800759c
 8006a0c:	7e37e43c 	.word	0x7e37e43c
 8006a10:	bff00000 	.word	0xbff00000
 8006a14:	000fffff 	.word	0x000fffff

08006a18 <scalbn>:
 8006a18:	b570      	push	{r4, r5, r6, lr}
 8006a1a:	ec55 4b10 	vmov	r4, r5, d0
 8006a1e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006a22:	4606      	mov	r6, r0
 8006a24:	462b      	mov	r3, r5
 8006a26:	b9aa      	cbnz	r2, 8006a54 <scalbn+0x3c>
 8006a28:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006a2c:	4323      	orrs	r3, r4
 8006a2e:	d03b      	beq.n	8006aa8 <scalbn+0x90>
 8006a30:	4b31      	ldr	r3, [pc, #196]	; (8006af8 <scalbn+0xe0>)
 8006a32:	4629      	mov	r1, r5
 8006a34:	2200      	movs	r2, #0
 8006a36:	ee10 0a10 	vmov	r0, s0
 8006a3a:	f7f9 fdd5 	bl	80005e8 <__aeabi_dmul>
 8006a3e:	4b2f      	ldr	r3, [pc, #188]	; (8006afc <scalbn+0xe4>)
 8006a40:	429e      	cmp	r6, r3
 8006a42:	4604      	mov	r4, r0
 8006a44:	460d      	mov	r5, r1
 8006a46:	da12      	bge.n	8006a6e <scalbn+0x56>
 8006a48:	a327      	add	r3, pc, #156	; (adr r3, 8006ae8 <scalbn+0xd0>)
 8006a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4e:	f7f9 fdcb 	bl	80005e8 <__aeabi_dmul>
 8006a52:	e009      	b.n	8006a68 <scalbn+0x50>
 8006a54:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006a58:	428a      	cmp	r2, r1
 8006a5a:	d10c      	bne.n	8006a76 <scalbn+0x5e>
 8006a5c:	ee10 2a10 	vmov	r2, s0
 8006a60:	4620      	mov	r0, r4
 8006a62:	4629      	mov	r1, r5
 8006a64:	f7f9 fc0a 	bl	800027c <__adddf3>
 8006a68:	4604      	mov	r4, r0
 8006a6a:	460d      	mov	r5, r1
 8006a6c:	e01c      	b.n	8006aa8 <scalbn+0x90>
 8006a6e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006a72:	460b      	mov	r3, r1
 8006a74:	3a36      	subs	r2, #54	; 0x36
 8006a76:	4432      	add	r2, r6
 8006a78:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006a7c:	428a      	cmp	r2, r1
 8006a7e:	dd0b      	ble.n	8006a98 <scalbn+0x80>
 8006a80:	ec45 4b11 	vmov	d1, r4, r5
 8006a84:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8006af0 <scalbn+0xd8>
 8006a88:	f000 f83c 	bl	8006b04 <copysign>
 8006a8c:	a318      	add	r3, pc, #96	; (adr r3, 8006af0 <scalbn+0xd8>)
 8006a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a92:	ec51 0b10 	vmov	r0, r1, d0
 8006a96:	e7da      	b.n	8006a4e <scalbn+0x36>
 8006a98:	2a00      	cmp	r2, #0
 8006a9a:	dd08      	ble.n	8006aae <scalbn+0x96>
 8006a9c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006aa0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006aa4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006aa8:	ec45 4b10 	vmov	d0, r4, r5
 8006aac:	bd70      	pop	{r4, r5, r6, pc}
 8006aae:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006ab2:	da0d      	bge.n	8006ad0 <scalbn+0xb8>
 8006ab4:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006ab8:	429e      	cmp	r6, r3
 8006aba:	ec45 4b11 	vmov	d1, r4, r5
 8006abe:	dce1      	bgt.n	8006a84 <scalbn+0x6c>
 8006ac0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8006ae8 <scalbn+0xd0>
 8006ac4:	f000 f81e 	bl	8006b04 <copysign>
 8006ac8:	a307      	add	r3, pc, #28	; (adr r3, 8006ae8 <scalbn+0xd0>)
 8006aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ace:	e7e0      	b.n	8006a92 <scalbn+0x7a>
 8006ad0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006ad4:	3236      	adds	r2, #54	; 0x36
 8006ad6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006ada:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006ade:	4620      	mov	r0, r4
 8006ae0:	4629      	mov	r1, r5
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	4b06      	ldr	r3, [pc, #24]	; (8006b00 <scalbn+0xe8>)
 8006ae6:	e7b2      	b.n	8006a4e <scalbn+0x36>
 8006ae8:	c2f8f359 	.word	0xc2f8f359
 8006aec:	01a56e1f 	.word	0x01a56e1f
 8006af0:	8800759c 	.word	0x8800759c
 8006af4:	7e37e43c 	.word	0x7e37e43c
 8006af8:	43500000 	.word	0x43500000
 8006afc:	ffff3cb0 	.word	0xffff3cb0
 8006b00:	3c900000 	.word	0x3c900000

08006b04 <copysign>:
 8006b04:	ec51 0b10 	vmov	r0, r1, d0
 8006b08:	ee11 0a90 	vmov	r0, s3
 8006b0c:	ee10 2a10 	vmov	r2, s0
 8006b10:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006b14:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006b18:	ea41 0300 	orr.w	r3, r1, r0
 8006b1c:	ec43 2b10 	vmov	d0, r2, r3
 8006b20:	4770      	bx	lr
	...

08006b24 <_init>:
 8006b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b26:	bf00      	nop
 8006b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b2a:	bc08      	pop	{r3}
 8006b2c:	469e      	mov	lr, r3
 8006b2e:	4770      	bx	lr

08006b30 <_fini>:
 8006b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b32:	bf00      	nop
 8006b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b36:	bc08      	pop	{r3}
 8006b38:	469e      	mov	lr, r3
 8006b3a:	4770      	bx	lr
